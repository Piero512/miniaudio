// ignore_for_file: camel_case_types, non_constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// FFI bindings to miniaudio library
class MiniAudioFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MiniAudioFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MiniAudioFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void ma_version(
    ffi.Pointer<ffi.Uint32> pMajor,
    ffi.Pointer<ffi.Uint32> pMinor,
    ffi.Pointer<ffi.Uint32> pRevision,
  ) {
    return _ma_version(
      pMajor,
      pMinor,
      pRevision,
    );
  }

  late final _ma_version_ptr =
      _lookup<ffi.NativeFunction<_c_ma_version>>('ma_version');
  late final _dart_ma_version _ma_version =
      _ma_version_ptr.asFunction<_dart_ma_version>();

  ffi.Pointer<ffi.Int8> ma_version_string() {
    return _ma_version_string();
  }

  late final _ma_version_string_ptr =
      _lookup<ffi.NativeFunction<_c_ma_version_string>>('ma_version_string');
  late final _dart_ma_version_string _ma_version_string =
      _ma_version_string_ptr.asFunction<_dart_ma_version_string>();

  ma_log_callback ma_log_callback_init(
    ffi.Pointer<ffi.NativeFunction<ma_log_callback_proc>> onLog,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_log_callback_init(
      onLog,
      pUserData,
    );
  }

  late final _ma_log_callback_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_callback_init>>(
          'ma_log_callback_init');
  late final _dart_ma_log_callback_init _ma_log_callback_init =
      _ma_log_callback_init_ptr.asFunction<_dart_ma_log_callback_init>();

  int ma_log_init(
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_init(
      pAllocationCallbacks,
      pLog,
    );
  }

  late final _ma_log_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_init>>('ma_log_init');
  late final _dart_ma_log_init _ma_log_init =
      _ma_log_init_ptr.asFunction<_dart_ma_log_init>();

  void ma_log_uninit(
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_uninit(
      pLog,
    );
  }

  late final _ma_log_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_uninit>>('ma_log_uninit');
  late final _dart_ma_log_uninit _ma_log_uninit =
      _ma_log_uninit_ptr.asFunction<_dart_ma_log_uninit>();

  int ma_log_register_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_register_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_register_callback_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_register_callback>>(
          'ma_log_register_callback');
  late final _dart_ma_log_register_callback _ma_log_register_callback =
      _ma_log_register_callback_ptr
          .asFunction<_dart_ma_log_register_callback>();

  int ma_log_unregister_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_unregister_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_unregister_callback_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_unregister_callback>>(
          'ma_log_unregister_callback');
  late final _dart_ma_log_unregister_callback _ma_log_unregister_callback =
      _ma_log_unregister_callback_ptr
          .asFunction<_dart_ma_log_unregister_callback>();

  int ma_log_post(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Int8> pMessage,
  ) {
    return _ma_log_post(
      pLog,
      level,
      pMessage,
    );
  }

  late final _ma_log_post_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_post>>('ma_log_post');
  late final _dart_ma_log_post _ma_log_post =
      _ma_log_post_ptr.asFunction<_dart_ma_log_post>();

  int ma_log_postv(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Int8> pFormat,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _ma_log_postv(
      pLog,
      level,
      pFormat,
      args,
    );
  }

  late final _ma_log_postv_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_postv>>('ma_log_postv');
  late final _dart_ma_log_postv _ma_log_postv =
      _ma_log_postv_ptr.asFunction<_dart_ma_log_postv>();

  int ma_log_postf(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Int8> pFormat,
  ) {
    return _ma_log_postf(
      pLog,
      level,
      pFormat,
    );
  }

  late final _ma_log_postf_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_postf>>('ma_log_postf');
  late final _dart_ma_log_postf _ma_log_postf =
      _ma_log_postf_ptr.asFunction<_dart_ma_log_postf>();

  ma_biquad_config ma_biquad_config_init(
    int format,
    int channels,
    double b0,
    double b1,
    double b2,
    double a0,
    double a1,
    double a2,
  ) {
    return _ma_biquad_config_init(
      format,
      channels,
      b0,
      b1,
      b2,
      a0,
      a1,
      a2,
    );
  }

  late final _ma_biquad_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_biquad_config_init>>(
          'ma_biquad_config_init');
  late final _dart_ma_biquad_config_init _ma_biquad_config_init =
      _ma_biquad_config_init_ptr.asFunction<_dart_ma_biquad_config_init>();

  int ma_biquad_init(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_init(
      pConfig,
      pBQ,
    );
  }

  late final _ma_biquad_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_biquad_init>>('ma_biquad_init');
  late final _dart_ma_biquad_init _ma_biquad_init =
      _ma_biquad_init_ptr.asFunction<_dart_ma_biquad_init>();

  int ma_biquad_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_reinit(
      pConfig,
      pBQ,
    );
  }

  late final _ma_biquad_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_biquad_reinit>>('ma_biquad_reinit');
  late final _dart_ma_biquad_reinit _ma_biquad_reinit =
      _ma_biquad_reinit_ptr.asFunction<_dart_ma_biquad_reinit>();

  int ma_biquad_process_pcm_frames(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_biquad_process_pcm_frames(
      pBQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_biquad_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_biquad_process_pcm_frames>>(
          'ma_biquad_process_pcm_frames');
  late final _dart_ma_biquad_process_pcm_frames _ma_biquad_process_pcm_frames =
      _ma_biquad_process_pcm_frames_ptr
          .asFunction<_dart_ma_biquad_process_pcm_frames>();

  int ma_biquad_get_latency(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_get_latency(
      pBQ,
    );
  }

  late final _ma_biquad_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_biquad_get_latency>>(
          'ma_biquad_get_latency');
  late final _dart_ma_biquad_get_latency _ma_biquad_get_latency =
      _ma_biquad_get_latency_ptr.asFunction<_dart_ma_biquad_get_latency>();

  ma_lpf2_config ma_lpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_lpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_lpf1_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf1_config_init>>(
          'ma_lpf1_config_init');
  late final _dart_ma_lpf1_config_init _ma_lpf1_config_init =
      _ma_lpf1_config_init_ptr.asFunction<_dart_ma_lpf1_config_init>();

  ma_lpf2_config ma_lpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_lpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_lpf2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf2_config_init>>(
          'ma_lpf2_config_init');
  late final _dart_ma_lpf2_config_init _ma_lpf2_config_init =
      _ma_lpf2_config_init_ptr.asFunction<_dart_ma_lpf2_config_init>();

  int ma_lpf1_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_init(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf1_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf1_init>>('ma_lpf1_init');
  late final _dart_ma_lpf1_init _ma_lpf1_init =
      _ma_lpf1_init_ptr.asFunction<_dart_ma_lpf1_init>();

  int ma_lpf1_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf1_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf1_reinit>>('ma_lpf1_reinit');
  late final _dart_ma_lpf1_reinit _ma_lpf1_reinit =
      _ma_lpf1_reinit_ptr.asFunction<_dart_ma_lpf1_reinit>();

  int ma_lpf1_process_pcm_frames(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf1_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf1_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf1_process_pcm_frames>>(
          'ma_lpf1_process_pcm_frames');
  late final _dart_ma_lpf1_process_pcm_frames _ma_lpf1_process_pcm_frames =
      _ma_lpf1_process_pcm_frames_ptr
          .asFunction<_dart_ma_lpf1_process_pcm_frames>();

  int ma_lpf1_get_latency(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf1_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf1_get_latency>>(
          'ma_lpf1_get_latency');
  late final _dart_ma_lpf1_get_latency _ma_lpf1_get_latency =
      _ma_lpf1_get_latency_ptr.asFunction<_dart_ma_lpf1_get_latency>();

  int ma_lpf2_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_init(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf2_init>>('ma_lpf2_init');
  late final _dart_ma_lpf2_init _ma_lpf2_init =
      _ma_lpf2_init_ptr.asFunction<_dart_ma_lpf2_init>();

  int ma_lpf2_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf2_reinit>>('ma_lpf2_reinit');
  late final _dart_ma_lpf2_reinit _ma_lpf2_reinit =
      _ma_lpf2_reinit_ptr.asFunction<_dart_ma_lpf2_reinit>();

  int ma_lpf2_process_pcm_frames(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf2_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf2_process_pcm_frames>>(
          'ma_lpf2_process_pcm_frames');
  late final _dart_ma_lpf2_process_pcm_frames _ma_lpf2_process_pcm_frames =
      _ma_lpf2_process_pcm_frames_ptr
          .asFunction<_dart_ma_lpf2_process_pcm_frames>();

  int ma_lpf2_get_latency(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf2_get_latency>>(
          'ma_lpf2_get_latency');
  late final _dart_ma_lpf2_get_latency _ma_lpf2_get_latency =
      _ma_lpf2_get_latency_ptr.asFunction<_dart_ma_lpf2_get_latency>();

  ma_lpf_config ma_lpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_lpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_lpf_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf_config_init>>('ma_lpf_config_init');
  late final _dart_ma_lpf_config_init _ma_lpf_config_init =
      _ma_lpf_config_init_ptr.asFunction<_dart_ma_lpf_config_init>();

  int ma_lpf_init(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_init(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf_init>>('ma_lpf_init');
  late final _dart_ma_lpf_init _ma_lpf_init =
      _ma_lpf_init_ptr.asFunction<_dart_ma_lpf_init>();

  int ma_lpf_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf_reinit>>('ma_lpf_reinit');
  late final _dart_ma_lpf_reinit _ma_lpf_reinit =
      _ma_lpf_reinit_ptr.asFunction<_dart_ma_lpf_reinit>();

  int ma_lpf_process_pcm_frames(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf_process_pcm_frames>>(
          'ma_lpf_process_pcm_frames');
  late final _dart_ma_lpf_process_pcm_frames _ma_lpf_process_pcm_frames =
      _ma_lpf_process_pcm_frames_ptr
          .asFunction<_dart_ma_lpf_process_pcm_frames>();

  int ma_lpf_get_latency(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_lpf_get_latency>>('ma_lpf_get_latency');
  late final _dart_ma_lpf_get_latency _ma_lpf_get_latency =
      _ma_lpf_get_latency_ptr.asFunction<_dart_ma_lpf_get_latency>();

  ma_hpf2_config ma_hpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_hpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_hpf1_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf1_config_init>>(
          'ma_hpf1_config_init');
  late final _dart_ma_hpf1_config_init _ma_hpf1_config_init =
      _ma_hpf1_config_init_ptr.asFunction<_dart_ma_hpf1_config_init>();

  ma_hpf2_config ma_hpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_hpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_hpf2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf2_config_init>>(
          'ma_hpf2_config_init');
  late final _dart_ma_hpf2_config_init _ma_hpf2_config_init =
      _ma_hpf2_config_init_ptr.asFunction<_dart_ma_hpf2_config_init>();

  int ma_hpf1_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_init(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf1_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf1_init>>('ma_hpf1_init');
  late final _dart_ma_hpf1_init _ma_hpf1_init =
      _ma_hpf1_init_ptr.asFunction<_dart_ma_hpf1_init>();

  int ma_hpf1_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf1_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf1_reinit>>('ma_hpf1_reinit');
  late final _dart_ma_hpf1_reinit _ma_hpf1_reinit =
      _ma_hpf1_reinit_ptr.asFunction<_dart_ma_hpf1_reinit>();

  int ma_hpf1_process_pcm_frames(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf1_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf1_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf1_process_pcm_frames>>(
          'ma_hpf1_process_pcm_frames');
  late final _dart_ma_hpf1_process_pcm_frames _ma_hpf1_process_pcm_frames =
      _ma_hpf1_process_pcm_frames_ptr
          .asFunction<_dart_ma_hpf1_process_pcm_frames>();

  int ma_hpf1_get_latency(
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf1_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf1_get_latency>>(
          'ma_hpf1_get_latency');
  late final _dart_ma_hpf1_get_latency _ma_hpf1_get_latency =
      _ma_hpf1_get_latency_ptr.asFunction<_dart_ma_hpf1_get_latency>();

  int ma_hpf2_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_init(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf2_init>>('ma_hpf2_init');
  late final _dart_ma_hpf2_init _ma_hpf2_init =
      _ma_hpf2_init_ptr.asFunction<_dart_ma_hpf2_init>();

  int ma_hpf2_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf2_reinit>>('ma_hpf2_reinit');
  late final _dart_ma_hpf2_reinit _ma_hpf2_reinit =
      _ma_hpf2_reinit_ptr.asFunction<_dart_ma_hpf2_reinit>();

  int ma_hpf2_process_pcm_frames(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf2_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf2_process_pcm_frames>>(
          'ma_hpf2_process_pcm_frames');
  late final _dart_ma_hpf2_process_pcm_frames _ma_hpf2_process_pcm_frames =
      _ma_hpf2_process_pcm_frames_ptr
          .asFunction<_dart_ma_hpf2_process_pcm_frames>();

  int ma_hpf2_get_latency(
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf2_get_latency>>(
          'ma_hpf2_get_latency');
  late final _dart_ma_hpf2_get_latency _ma_hpf2_get_latency =
      _ma_hpf2_get_latency_ptr.asFunction<_dart_ma_hpf2_get_latency>();

  ma_hpf_config ma_hpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_hpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_hpf_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf_config_init>>('ma_hpf_config_init');
  late final _dart_ma_hpf_config_init _ma_hpf_config_init =
      _ma_hpf_config_init_ptr.asFunction<_dart_ma_hpf_config_init>();

  int ma_hpf_init(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_init(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf_init>>('ma_hpf_init');
  late final _dart_ma_hpf_init _ma_hpf_init =
      _ma_hpf_init_ptr.asFunction<_dart_ma_hpf_init>();

  int ma_hpf_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf_reinit>>('ma_hpf_reinit');
  late final _dart_ma_hpf_reinit _ma_hpf_reinit =
      _ma_hpf_reinit_ptr.asFunction<_dart_ma_hpf_reinit>();

  int ma_hpf_process_pcm_frames(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf_process_pcm_frames>>(
          'ma_hpf_process_pcm_frames');
  late final _dart_ma_hpf_process_pcm_frames _ma_hpf_process_pcm_frames =
      _ma_hpf_process_pcm_frames_ptr
          .asFunction<_dart_ma_hpf_process_pcm_frames>();

  int ma_hpf_get_latency(
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hpf_get_latency>>('ma_hpf_get_latency');
  late final _dart_ma_hpf_get_latency _ma_hpf_get_latency =
      _ma_hpf_get_latency_ptr.asFunction<_dart_ma_hpf_get_latency>();

  ma_bpf2_config ma_bpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_bpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_bpf2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf2_config_init>>(
          'ma_bpf2_config_init');
  late final _dart_ma_bpf2_config_init _ma_bpf2_config_init =
      _ma_bpf2_config_init_ptr.asFunction<_dart_ma_bpf2_config_init>();

  int ma_bpf2_init(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_init(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf2_init>>('ma_bpf2_init');
  late final _dart_ma_bpf2_init _ma_bpf2_init =
      _ma_bpf2_init_ptr.asFunction<_dart_ma_bpf2_init>();

  int ma_bpf2_reinit(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf2_reinit>>('ma_bpf2_reinit');
  late final _dart_ma_bpf2_reinit _ma_bpf2_reinit =
      _ma_bpf2_reinit_ptr.asFunction<_dart_ma_bpf2_reinit>();

  int ma_bpf2_process_pcm_frames(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf2_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf2_process_pcm_frames>>(
          'ma_bpf2_process_pcm_frames');
  late final _dart_ma_bpf2_process_pcm_frames _ma_bpf2_process_pcm_frames =
      _ma_bpf2_process_pcm_frames_ptr
          .asFunction<_dart_ma_bpf2_process_pcm_frames>();

  int ma_bpf2_get_latency(
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf2_get_latency>>(
          'ma_bpf2_get_latency');
  late final _dart_ma_bpf2_get_latency _ma_bpf2_get_latency =
      _ma_bpf2_get_latency_ptr.asFunction<_dart_ma_bpf2_get_latency>();

  ma_bpf_config ma_bpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_bpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_bpf_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf_config_init>>('ma_bpf_config_init');
  late final _dart_ma_bpf_config_init _ma_bpf_config_init =
      _ma_bpf_config_init_ptr.asFunction<_dart_ma_bpf_config_init>();

  int ma_bpf_init(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_init(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf_init>>('ma_bpf_init');
  late final _dart_ma_bpf_init _ma_bpf_init =
      _ma_bpf_init_ptr.asFunction<_dart_ma_bpf_init>();

  int ma_bpf_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf_reinit>>('ma_bpf_reinit');
  late final _dart_ma_bpf_reinit _ma_bpf_reinit =
      _ma_bpf_reinit_ptr.asFunction<_dart_ma_bpf_reinit>();

  int ma_bpf_process_pcm_frames(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf_process_pcm_frames>>(
          'ma_bpf_process_pcm_frames');
  late final _dart_ma_bpf_process_pcm_frames _ma_bpf_process_pcm_frames =
      _ma_bpf_process_pcm_frames_ptr
          .asFunction<_dart_ma_bpf_process_pcm_frames>();

  int ma_bpf_get_latency(
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_bpf_get_latency>>('ma_bpf_get_latency');
  late final _dart_ma_bpf_get_latency _ma_bpf_get_latency =
      _ma_bpf_get_latency_ptr.asFunction<_dart_ma_bpf_get_latency>();

  ma_notch_config ma_notch2_config_init(
    int format,
    int channels,
    int sampleRate,
    double q,
    double frequency,
  ) {
    return _ma_notch2_config_init(
      format,
      channels,
      sampleRate,
      q,
      frequency,
    );
  }

  late final _ma_notch2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_notch2_config_init>>(
          'ma_notch2_config_init');
  late final _dart_ma_notch2_config_init _ma_notch2_config_init =
      _ma_notch2_config_init_ptr.asFunction<_dart_ma_notch2_config_init>();

  int ma_notch2_init(
    ffi.Pointer<ma_notch_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_notch2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_notch2_init>>('ma_notch2_init');
  late final _dart_ma_notch2_init _ma_notch2_init =
      _ma_notch2_init_ptr.asFunction<_dart_ma_notch2_init>();

  int ma_notch2_reinit(
    ffi.Pointer<ma_notch_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_notch2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_notch2_reinit>>('ma_notch2_reinit');
  late final _dart_ma_notch2_reinit _ma_notch2_reinit =
      _ma_notch2_reinit_ptr.asFunction<_dart_ma_notch2_reinit>();

  int ma_notch2_process_pcm_frames(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_notch2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_notch2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_notch2_process_pcm_frames>>(
          'ma_notch2_process_pcm_frames');
  late final _dart_ma_notch2_process_pcm_frames _ma_notch2_process_pcm_frames =
      _ma_notch2_process_pcm_frames_ptr
          .asFunction<_dart_ma_notch2_process_pcm_frames>();

  int ma_notch2_get_latency(
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_get_latency(
      pFilter,
    );
  }

  late final _ma_notch2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_notch2_get_latency>>(
          'ma_notch2_get_latency');
  late final _dart_ma_notch2_get_latency _ma_notch2_get_latency =
      _ma_notch2_get_latency_ptr.asFunction<_dart_ma_notch2_get_latency>();

  ma_peak_config ma_peak2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_peak2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_peak2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_peak2_config_init>>(
          'ma_peak2_config_init');
  late final _dart_ma_peak2_config_init _ma_peak2_config_init =
      _ma_peak2_config_init_ptr.asFunction<_dart_ma_peak2_config_init>();

  int ma_peak2_init(
    ffi.Pointer<ma_peak_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_peak2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_peak2_init>>('ma_peak2_init');
  late final _dart_ma_peak2_init _ma_peak2_init =
      _ma_peak2_init_ptr.asFunction<_dart_ma_peak2_init>();

  int ma_peak2_reinit(
    ffi.Pointer<ma_peak_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_peak2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_peak2_reinit>>('ma_peak2_reinit');
  late final _dart_ma_peak2_reinit _ma_peak2_reinit =
      _ma_peak2_reinit_ptr.asFunction<_dart_ma_peak2_reinit>();

  int ma_peak2_process_pcm_frames(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_peak2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_peak2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_peak2_process_pcm_frames>>(
          'ma_peak2_process_pcm_frames');
  late final _dart_ma_peak2_process_pcm_frames _ma_peak2_process_pcm_frames =
      _ma_peak2_process_pcm_frames_ptr
          .asFunction<_dart_ma_peak2_process_pcm_frames>();

  int ma_peak2_get_latency(
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_get_latency(
      pFilter,
    );
  }

  late final _ma_peak2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_peak2_get_latency>>(
          'ma_peak2_get_latency');
  late final _dart_ma_peak2_get_latency _ma_peak2_get_latency =
      _ma_peak2_get_latency_ptr.asFunction<_dart_ma_peak2_get_latency>();

  ma_loshelf_config ma_loshelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_loshelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_loshelf2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_loshelf2_config_init>>(
          'ma_loshelf2_config_init');
  late final _dart_ma_loshelf2_config_init _ma_loshelf2_config_init =
      _ma_loshelf2_config_init_ptr.asFunction<_dart_ma_loshelf2_config_init>();

  int ma_loshelf2_init(
    ffi.Pointer<ma_loshelf_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_loshelf2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_loshelf2_init>>('ma_loshelf2_init');
  late final _dart_ma_loshelf2_init _ma_loshelf2_init =
      _ma_loshelf2_init_ptr.asFunction<_dart_ma_loshelf2_init>();

  int ma_loshelf2_reinit(
    ffi.Pointer<ma_loshelf_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_loshelf2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_loshelf2_reinit>>('ma_loshelf2_reinit');
  late final _dart_ma_loshelf2_reinit _ma_loshelf2_reinit =
      _ma_loshelf2_reinit_ptr.asFunction<_dart_ma_loshelf2_reinit>();

  int ma_loshelf2_process_pcm_frames(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_loshelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_loshelf2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_loshelf2_process_pcm_frames>>(
          'ma_loshelf2_process_pcm_frames');
  late final _dart_ma_loshelf2_process_pcm_frames
      _ma_loshelf2_process_pcm_frames = _ma_loshelf2_process_pcm_frames_ptr
          .asFunction<_dart_ma_loshelf2_process_pcm_frames>();

  int ma_loshelf2_get_latency(
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_loshelf2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_loshelf2_get_latency>>(
          'ma_loshelf2_get_latency');
  late final _dart_ma_loshelf2_get_latency _ma_loshelf2_get_latency =
      _ma_loshelf2_get_latency_ptr.asFunction<_dart_ma_loshelf2_get_latency>();

  ma_hishelf_config ma_hishelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_hishelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_hishelf2_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hishelf2_config_init>>(
          'ma_hishelf2_config_init');
  late final _dart_ma_hishelf2_config_init _ma_hishelf2_config_init =
      _ma_hishelf2_config_init_ptr.asFunction<_dart_ma_hishelf2_config_init>();

  int ma_hishelf2_init(
    ffi.Pointer<ma_hishelf_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_hishelf2_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hishelf2_init>>('ma_hishelf2_init');
  late final _dart_ma_hishelf2_init _ma_hishelf2_init =
      _ma_hishelf2_init_ptr.asFunction<_dart_ma_hishelf2_init>();

  int ma_hishelf2_reinit(
    ffi.Pointer<ma_hishelf_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_hishelf2_reinit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hishelf2_reinit>>('ma_hishelf2_reinit');
  late final _dart_ma_hishelf2_reinit _ma_hishelf2_reinit =
      _ma_hishelf2_reinit_ptr.asFunction<_dart_ma_hishelf2_reinit>();

  int ma_hishelf2_process_pcm_frames(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hishelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hishelf2_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hishelf2_process_pcm_frames>>(
          'ma_hishelf2_process_pcm_frames');
  late final _dart_ma_hishelf2_process_pcm_frames
      _ma_hishelf2_process_pcm_frames = _ma_hishelf2_process_pcm_frames_ptr
          .asFunction<_dart_ma_hishelf2_process_pcm_frames>();

  int ma_hishelf2_get_latency(
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_hishelf2_get_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_hishelf2_get_latency>>(
          'ma_hishelf2_get_latency');
  late final _dart_ma_hishelf2_get_latency _ma_hishelf2_get_latency =
      _ma_hishelf2_get_latency_ptr.asFunction<_dart_ma_hishelf2_get_latency>();

  ma_linear_resampler_config ma_linear_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_config_init>>(
          'ma_linear_resampler_config_init');
  late final _dart_ma_linear_resampler_config_init
      _ma_linear_resampler_config_init = _ma_linear_resampler_config_init_ptr
          .asFunction<_dart_ma_linear_resampler_config_init>();

  int ma_linear_resampler_init(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_init(
      pConfig,
      pResampler,
    );
  }

  late final _ma_linear_resampler_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_init>>(
          'ma_linear_resampler_init');
  late final _dart_ma_linear_resampler_init _ma_linear_resampler_init =
      _ma_linear_resampler_init_ptr
          .asFunction<_dart_ma_linear_resampler_init>();

  void ma_linear_resampler_uninit(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_uninit(
      pResampler,
    );
  }

  late final _ma_linear_resampler_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_uninit>>(
          'ma_linear_resampler_uninit');
  late final _dart_ma_linear_resampler_uninit _ma_linear_resampler_uninit =
      _ma_linear_resampler_uninit_ptr
          .asFunction<_dart_ma_linear_resampler_uninit>();

  int ma_linear_resampler_process_pcm_frames(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ffi.Uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ) {
    return _ma_linear_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_linear_resampler_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_process_pcm_frames>>(
          'ma_linear_resampler_process_pcm_frames');
  late final _dart_ma_linear_resampler_process_pcm_frames
      _ma_linear_resampler_process_pcm_frames =
      _ma_linear_resampler_process_pcm_frames_ptr
          .asFunction<_dart_ma_linear_resampler_process_pcm_frames>();

  int ma_linear_resampler_set_rate(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_set_rate_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_set_rate>>(
          'ma_linear_resampler_set_rate');
  late final _dart_ma_linear_resampler_set_rate _ma_linear_resampler_set_rate =
      _ma_linear_resampler_set_rate_ptr
          .asFunction<_dart_ma_linear_resampler_set_rate>();

  int ma_linear_resampler_set_rate_ratio(
    ffi.Pointer<ma_linear_resampler> pResampler,
    double ratioInOut,
  ) {
    return _ma_linear_resampler_set_rate_ratio(
      pResampler,
      ratioInOut,
    );
  }

  late final _ma_linear_resampler_set_rate_ratio_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_set_rate_ratio>>(
          'ma_linear_resampler_set_rate_ratio');
  late final _dart_ma_linear_resampler_set_rate_ratio
      _ma_linear_resampler_set_rate_ratio =
      _ma_linear_resampler_set_rate_ratio_ptr
          .asFunction<_dart_ma_linear_resampler_set_rate_ratio>();

  int ma_linear_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int outputFrameCount,
  ) {
    return _ma_linear_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_required_input_frame_count_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_linear_resampler_get_required_input_frame_count>>(
      'ma_linear_resampler_get_required_input_frame_count');
  late final _dart_ma_linear_resampler_get_required_input_frame_count
      _ma_linear_resampler_get_required_input_frame_count =
      _ma_linear_resampler_get_required_input_frame_count_ptr.asFunction<
          _dart_ma_linear_resampler_get_required_input_frame_count>();

  int ma_linear_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int inputFrameCount,
  ) {
    return _ma_linear_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_expected_output_frame_count_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_linear_resampler_get_expected_output_frame_count>>(
      'ma_linear_resampler_get_expected_output_frame_count');
  late final _dart_ma_linear_resampler_get_expected_output_frame_count
      _ma_linear_resampler_get_expected_output_frame_count =
      _ma_linear_resampler_get_expected_output_frame_count_ptr.asFunction<
          _dart_ma_linear_resampler_get_expected_output_frame_count>();

  int ma_linear_resampler_get_input_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_input_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_get_input_latency>>(
          'ma_linear_resampler_get_input_latency');
  late final _dart_ma_linear_resampler_get_input_latency
      _ma_linear_resampler_get_input_latency =
      _ma_linear_resampler_get_input_latency_ptr
          .asFunction<_dart_ma_linear_resampler_get_input_latency>();

  int ma_linear_resampler_get_output_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_output_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_linear_resampler_get_output_latency>>(
          'ma_linear_resampler_get_output_latency');
  late final _dart_ma_linear_resampler_get_output_latency
      _ma_linear_resampler_get_output_latency =
      _ma_linear_resampler_get_output_latency_ptr
          .asFunction<_dart_ma_linear_resampler_get_output_latency>();

  ma_resampler_config ma_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
    int algorithm,
  ) {
    return _ma_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
      algorithm,
    );
  }

  late final _ma_resampler_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_config_init>>(
          'ma_resampler_config_init');
  late final _dart_ma_resampler_config_init _ma_resampler_config_init =
      _ma_resampler_config_init_ptr
          .asFunction<_dart_ma_resampler_config_init>();

  int ma_resampler_init(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_init(
      pConfig,
      pResampler,
    );
  }

  late final _ma_resampler_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_init>>('ma_resampler_init');
  late final _dart_ma_resampler_init _ma_resampler_init =
      _ma_resampler_init_ptr.asFunction<_dart_ma_resampler_init>();

  void ma_resampler_uninit(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_uninit(
      pResampler,
    );
  }

  late final _ma_resampler_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_uninit>>(
          'ma_resampler_uninit');
  late final _dart_ma_resampler_uninit _ma_resampler_uninit =
      _ma_resampler_uninit_ptr.asFunction<_dart_ma_resampler_uninit>();

  int ma_resampler_process_pcm_frames(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ffi.Uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ) {
    return _ma_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_resampler_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_process_pcm_frames>>(
          'ma_resampler_process_pcm_frames');
  late final _dart_ma_resampler_process_pcm_frames
      _ma_resampler_process_pcm_frames = _ma_resampler_process_pcm_frames_ptr
          .asFunction<_dart_ma_resampler_process_pcm_frames>();

  int ma_resampler_set_rate(
    ffi.Pointer<ma_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_resampler_set_rate_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_set_rate>>(
          'ma_resampler_set_rate');
  late final _dart_ma_resampler_set_rate _ma_resampler_set_rate =
      _ma_resampler_set_rate_ptr.asFunction<_dart_ma_resampler_set_rate>();

  int ma_resampler_set_rate_ratio(
    ffi.Pointer<ma_resampler> pResampler,
    double ratio,
  ) {
    return _ma_resampler_set_rate_ratio(
      pResampler,
      ratio,
    );
  }

  late final _ma_resampler_set_rate_ratio_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_set_rate_ratio>>(
          'ma_resampler_set_rate_ratio');
  late final _dart_ma_resampler_set_rate_ratio _ma_resampler_set_rate_ratio =
      _ma_resampler_set_rate_ratio_ptr
          .asFunction<_dart_ma_resampler_set_rate_ratio>();

  int ma_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int outputFrameCount,
  ) {
    return _ma_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
    );
  }

  late final _ma_resampler_get_required_input_frame_count_ptr = _lookup<
          ffi.NativeFunction<_c_ma_resampler_get_required_input_frame_count>>(
      'ma_resampler_get_required_input_frame_count');
  late final _dart_ma_resampler_get_required_input_frame_count
      _ma_resampler_get_required_input_frame_count =
      _ma_resampler_get_required_input_frame_count_ptr
          .asFunction<_dart_ma_resampler_get_required_input_frame_count>();

  int ma_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int inputFrameCount,
  ) {
    return _ma_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
    );
  }

  late final _ma_resampler_get_expected_output_frame_count_ptr = _lookup<
          ffi.NativeFunction<_c_ma_resampler_get_expected_output_frame_count>>(
      'ma_resampler_get_expected_output_frame_count');
  late final _dart_ma_resampler_get_expected_output_frame_count
      _ma_resampler_get_expected_output_frame_count =
      _ma_resampler_get_expected_output_frame_count_ptr
          .asFunction<_dart_ma_resampler_get_expected_output_frame_count>();

  int ma_resampler_get_input_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_input_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_get_input_latency>>(
          'ma_resampler_get_input_latency');
  late final _dart_ma_resampler_get_input_latency
      _ma_resampler_get_input_latency = _ma_resampler_get_input_latency_ptr
          .asFunction<_dart_ma_resampler_get_input_latency>();

  int ma_resampler_get_output_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_output_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_resampler_get_output_latency>>(
          'ma_resampler_get_output_latency');
  late final _dart_ma_resampler_get_output_latency
      _ma_resampler_get_output_latency = _ma_resampler_get_output_latency_ptr
          .asFunction<_dart_ma_resampler_get_output_latency>();

  ma_channel_converter_config ma_channel_converter_config_init(
    int format,
    int channelsIn,
    ffi.Pointer<ffi.Uint8> pChannelMapIn,
    int channelsOut,
    ffi.Pointer<ffi.Uint8> pChannelMapOut,
    int mixingMode,
  ) {
    return _ma_channel_converter_config_init(
      format,
      channelsIn,
      pChannelMapIn,
      channelsOut,
      pChannelMapOut,
      mixingMode,
    );
  }

  late final _ma_channel_converter_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_converter_config_init>>(
          'ma_channel_converter_config_init');
  late final _dart_ma_channel_converter_config_init
      _ma_channel_converter_config_init = _ma_channel_converter_config_init_ptr
          .asFunction<_dart_ma_channel_converter_config_init>();

  int ma_channel_converter_init(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_init(
      pConfig,
      pConverter,
    );
  }

  late final _ma_channel_converter_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_converter_init>>(
          'ma_channel_converter_init');
  late final _dart_ma_channel_converter_init _ma_channel_converter_init =
      _ma_channel_converter_init_ptr
          .asFunction<_dart_ma_channel_converter_init>();

  void ma_channel_converter_uninit(
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_uninit(
      pConverter,
    );
  }

  late final _ma_channel_converter_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_converter_uninit>>(
          'ma_channel_converter_uninit');
  late final _dart_ma_channel_converter_uninit _ma_channel_converter_uninit =
      _ma_channel_converter_uninit_ptr
          .asFunction<_dart_ma_channel_converter_uninit>();

  int ma_channel_converter_process_pcm_frames(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_channel_converter_process_pcm_frames(
      pConverter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_channel_converter_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_converter_process_pcm_frames>>(
          'ma_channel_converter_process_pcm_frames');
  late final _dart_ma_channel_converter_process_pcm_frames
      _ma_channel_converter_process_pcm_frames =
      _ma_channel_converter_process_pcm_frames_ptr
          .asFunction<_dart_ma_channel_converter_process_pcm_frames>();

  ma_data_converter_config ma_data_converter_config_init_default() {
    return _ma_data_converter_config_init_default();
  }

  late final _ma_data_converter_config_init_default_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_config_init_default>>(
          'ma_data_converter_config_init_default');
  late final _dart_ma_data_converter_config_init_default
      _ma_data_converter_config_init_default =
      _ma_data_converter_config_init_default_ptr
          .asFunction<_dart_ma_data_converter_config_init_default>();

  ma_data_converter_config ma_data_converter_config_init(
    int formatIn,
    int formatOut,
    int channelsIn,
    int channelsOut,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_config_init(
      formatIn,
      formatOut,
      channelsIn,
      channelsOut,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_config_init>>(
          'ma_data_converter_config_init');
  late final _dart_ma_data_converter_config_init
      _ma_data_converter_config_init = _ma_data_converter_config_init_ptr
          .asFunction<_dart_ma_data_converter_config_init>();

  int ma_data_converter_init(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_init(
      pConfig,
      pConverter,
    );
  }

  late final _ma_data_converter_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_init>>(
          'ma_data_converter_init');
  late final _dart_ma_data_converter_init _ma_data_converter_init =
      _ma_data_converter_init_ptr.asFunction<_dart_ma_data_converter_init>();

  void ma_data_converter_uninit(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_uninit(
      pConverter,
    );
  }

  late final _ma_data_converter_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_uninit>>(
          'ma_data_converter_uninit');
  late final _dart_ma_data_converter_uninit _ma_data_converter_uninit =
      _ma_data_converter_uninit_ptr
          .asFunction<_dart_ma_data_converter_uninit>();

  int ma_data_converter_process_pcm_frames(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ffi.Uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ) {
    return _ma_data_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_data_converter_process_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_process_pcm_frames>>(
          'ma_data_converter_process_pcm_frames');
  late final _dart_ma_data_converter_process_pcm_frames
      _ma_data_converter_process_pcm_frames =
      _ma_data_converter_process_pcm_frames_ptr
          .asFunction<_dart_ma_data_converter_process_pcm_frames>();

  int ma_data_converter_set_rate(
    ffi.Pointer<ma_data_converter> pConverter,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_set_rate(
      pConverter,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_set_rate_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_set_rate>>(
          'ma_data_converter_set_rate');
  late final _dart_ma_data_converter_set_rate _ma_data_converter_set_rate =
      _ma_data_converter_set_rate_ptr
          .asFunction<_dart_ma_data_converter_set_rate>();

  int ma_data_converter_set_rate_ratio(
    ffi.Pointer<ma_data_converter> pConverter,
    double ratioInOut,
  ) {
    return _ma_data_converter_set_rate_ratio(
      pConverter,
      ratioInOut,
    );
  }

  late final _ma_data_converter_set_rate_ratio_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_set_rate_ratio>>(
          'ma_data_converter_set_rate_ratio');
  late final _dart_ma_data_converter_set_rate_ratio
      _ma_data_converter_set_rate_ratio = _ma_data_converter_set_rate_ratio_ptr
          .asFunction<_dart_ma_data_converter_set_rate_ratio>();

  int ma_data_converter_get_required_input_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int outputFrameCount,
  ) {
    return _ma_data_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
    );
  }

  late final _ma_data_converter_get_required_input_frame_count_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_data_converter_get_required_input_frame_count>>(
      'ma_data_converter_get_required_input_frame_count');
  late final _dart_ma_data_converter_get_required_input_frame_count
      _ma_data_converter_get_required_input_frame_count =
      _ma_data_converter_get_required_input_frame_count_ptr
          .asFunction<_dart_ma_data_converter_get_required_input_frame_count>();

  int ma_data_converter_get_expected_output_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int inputFrameCount,
  ) {
    return _ma_data_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
    );
  }

  late final _ma_data_converter_get_expected_output_frame_count_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_data_converter_get_expected_output_frame_count>>(
      'ma_data_converter_get_expected_output_frame_count');
  late final _dart_ma_data_converter_get_expected_output_frame_count
      _ma_data_converter_get_expected_output_frame_count =
      _ma_data_converter_get_expected_output_frame_count_ptr.asFunction<
          _dart_ma_data_converter_get_expected_output_frame_count>();

  int ma_data_converter_get_input_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_input_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_input_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_get_input_latency>>(
          'ma_data_converter_get_input_latency');
  late final _dart_ma_data_converter_get_input_latency
      _ma_data_converter_get_input_latency =
      _ma_data_converter_get_input_latency_ptr
          .asFunction<_dart_ma_data_converter_get_input_latency>();

  int ma_data_converter_get_output_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_output_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_output_latency_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_converter_get_output_latency>>(
          'ma_data_converter_get_output_latency');
  late final _dart_ma_data_converter_get_output_latency
      _ma_data_converter_get_output_latency =
      _ma_data_converter_get_output_latency_ptr
          .asFunction<_dart_ma_data_converter_get_output_latency>();

  /// Format Conversion
  void ma_pcm_u8_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_u8_to_s16>>('ma_pcm_u8_to_s16');
  late final _dart_ma_pcm_u8_to_s16 _ma_pcm_u8_to_s16 =
      _ma_pcm_u8_to_s16_ptr.asFunction<_dart_ma_pcm_u8_to_s16>();

  void ma_pcm_u8_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_u8_to_s24>>('ma_pcm_u8_to_s24');
  late final _dart_ma_pcm_u8_to_s24 _ma_pcm_u8_to_s24 =
      _ma_pcm_u8_to_s24_ptr.asFunction<_dart_ma_pcm_u8_to_s24>();

  void ma_pcm_u8_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_u8_to_s32>>('ma_pcm_u8_to_s32');
  late final _dart_ma_pcm_u8_to_s32 _ma_pcm_u8_to_s32 =
      _ma_pcm_u8_to_s32_ptr.asFunction<_dart_ma_pcm_u8_to_s32>();

  void ma_pcm_u8_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_u8_to_f32>>('ma_pcm_u8_to_f32');
  late final _dart_ma_pcm_u8_to_f32 _ma_pcm_u8_to_f32 =
      _ma_pcm_u8_to_f32_ptr.asFunction<_dart_ma_pcm_u8_to_f32>();

  void ma_pcm_s16_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s16_to_u8>>('ma_pcm_s16_to_u8');
  late final _dart_ma_pcm_s16_to_u8 _ma_pcm_s16_to_u8 =
      _ma_pcm_s16_to_u8_ptr.asFunction<_dart_ma_pcm_s16_to_u8>();

  void ma_pcm_s16_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s16_to_s24>>('ma_pcm_s16_to_s24');
  late final _dart_ma_pcm_s16_to_s24 _ma_pcm_s16_to_s24 =
      _ma_pcm_s16_to_s24_ptr.asFunction<_dart_ma_pcm_s16_to_s24>();

  void ma_pcm_s16_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s16_to_s32>>('ma_pcm_s16_to_s32');
  late final _dart_ma_pcm_s16_to_s32 _ma_pcm_s16_to_s32 =
      _ma_pcm_s16_to_s32_ptr.asFunction<_dart_ma_pcm_s16_to_s32>();

  void ma_pcm_s16_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s16_to_f32>>('ma_pcm_s16_to_f32');
  late final _dart_ma_pcm_s16_to_f32 _ma_pcm_s16_to_f32 =
      _ma_pcm_s16_to_f32_ptr.asFunction<_dart_ma_pcm_s16_to_f32>();

  void ma_pcm_s24_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s24_to_u8>>('ma_pcm_s24_to_u8');
  late final _dart_ma_pcm_s24_to_u8 _ma_pcm_s24_to_u8 =
      _ma_pcm_s24_to_u8_ptr.asFunction<_dart_ma_pcm_s24_to_u8>();

  void ma_pcm_s24_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s24_to_s16>>('ma_pcm_s24_to_s16');
  late final _dart_ma_pcm_s24_to_s16 _ma_pcm_s24_to_s16 =
      _ma_pcm_s24_to_s16_ptr.asFunction<_dart_ma_pcm_s24_to_s16>();

  void ma_pcm_s24_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s24_to_s32>>('ma_pcm_s24_to_s32');
  late final _dart_ma_pcm_s24_to_s32 _ma_pcm_s24_to_s32 =
      _ma_pcm_s24_to_s32_ptr.asFunction<_dart_ma_pcm_s24_to_s32>();

  void ma_pcm_s24_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s24_to_f32>>('ma_pcm_s24_to_f32');
  late final _dart_ma_pcm_s24_to_f32 _ma_pcm_s24_to_f32 =
      _ma_pcm_s24_to_f32_ptr.asFunction<_dart_ma_pcm_s24_to_f32>();

  void ma_pcm_s32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s32_to_u8>>('ma_pcm_s32_to_u8');
  late final _dart_ma_pcm_s32_to_u8 _ma_pcm_s32_to_u8 =
      _ma_pcm_s32_to_u8_ptr.asFunction<_dart_ma_pcm_s32_to_u8>();

  void ma_pcm_s32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s32_to_s16>>('ma_pcm_s32_to_s16');
  late final _dart_ma_pcm_s32_to_s16 _ma_pcm_s32_to_s16 =
      _ma_pcm_s32_to_s16_ptr.asFunction<_dart_ma_pcm_s32_to_s16>();

  void ma_pcm_s32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s32_to_s24>>('ma_pcm_s32_to_s24');
  late final _dart_ma_pcm_s32_to_s24 _ma_pcm_s32_to_s24 =
      _ma_pcm_s32_to_s24_ptr.asFunction<_dart_ma_pcm_s32_to_s24>();

  void ma_pcm_s32_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_s32_to_f32>>('ma_pcm_s32_to_f32');
  late final _dart_ma_pcm_s32_to_f32 _ma_pcm_s32_to_f32 =
      _ma_pcm_s32_to_f32_ptr.asFunction<_dart_ma_pcm_s32_to_f32>();

  void ma_pcm_f32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_f32_to_u8>>('ma_pcm_f32_to_u8');
  late final _dart_ma_pcm_f32_to_u8 _ma_pcm_f32_to_u8 =
      _ma_pcm_f32_to_u8_ptr.asFunction<_dart_ma_pcm_f32_to_u8>();

  void ma_pcm_f32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_f32_to_s16>>('ma_pcm_f32_to_s16');
  late final _dart_ma_pcm_f32_to_s16 _ma_pcm_f32_to_s16 =
      _ma_pcm_f32_to_s16_ptr.asFunction<_dart_ma_pcm_f32_to_s16>();

  void ma_pcm_f32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_f32_to_s24>>('ma_pcm_f32_to_s24');
  late final _dart_ma_pcm_f32_to_s24 _ma_pcm_f32_to_s24 =
      _ma_pcm_f32_to_s24_ptr.asFunction<_dart_ma_pcm_f32_to_s24>();

  void ma_pcm_f32_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_f32_to_s32>>('ma_pcm_f32_to_s32');
  late final _dart_ma_pcm_f32_to_s32 _ma_pcm_f32_to_s32 =
      _ma_pcm_f32_to_s32_ptr.asFunction<_dart_ma_pcm_f32_to_s32>();

  void ma_pcm_convert(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int sampleCount,
    int ditherMode,
  ) {
    return _ma_pcm_convert(
      pOut,
      formatOut,
      pIn,
      formatIn,
      sampleCount,
      ditherMode,
    );
  }

  late final _ma_pcm_convert_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_convert>>('ma_pcm_convert');
  late final _dart_ma_pcm_convert _ma_pcm_convert =
      _ma_pcm_convert_ptr.asFunction<_dart_ma_pcm_convert>();

  void ma_convert_pcm_frames_format(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int frameCount,
    int channels,
    int ditherMode,
  ) {
    return _ma_convert_pcm_frames_format(
      pOut,
      formatOut,
      pIn,
      formatIn,
      frameCount,
      channels,
      ditherMode,
    );
  }

  late final _ma_convert_pcm_frames_format_ptr =
      _lookup<ffi.NativeFunction<_c_ma_convert_pcm_frames_format>>(
          'ma_convert_pcm_frames_format');
  late final _dart_ma_convert_pcm_frames_format _ma_convert_pcm_frames_format =
      _ma_convert_pcm_frames_format_ptr
          .asFunction<_dart_ma_convert_pcm_frames_format>();

  void ma_deinterleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ) {
    return _ma_deinterleave_pcm_frames(
      format,
      channels,
      frameCount,
      pInterleavedPCMFrames,
      ppDeinterleavedPCMFrames,
    );
  }

  late final _ma_deinterleave_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_deinterleave_pcm_frames>>(
          'ma_deinterleave_pcm_frames');
  late final _dart_ma_deinterleave_pcm_frames _ma_deinterleave_pcm_frames =
      _ma_deinterleave_pcm_frames_ptr
          .asFunction<_dart_ma_deinterleave_pcm_frames>();

  void ma_interleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ) {
    return _ma_interleave_pcm_frames(
      format,
      channels,
      frameCount,
      ppDeinterleavedPCMFrames,
      pInterleavedPCMFrames,
    );
  }

  late final _ma_interleave_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_interleave_pcm_frames>>(
          'ma_interleave_pcm_frames');
  late final _dart_ma_interleave_pcm_frames _ma_interleave_pcm_frames =
      _ma_interleave_pcm_frames_ptr
          .asFunction<_dart_ma_interleave_pcm_frames>();

  int ma_channel_map_get_default_channel(
    int channelCount,
    int channelIndex,
  ) {
    return _ma_channel_map_get_default_channel(
      channelCount,
      channelIndex,
    );
  }

  late final _ma_channel_map_get_default_channel_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_get_default_channel>>(
          'ma_channel_map_get_default_channel');
  late final _dart_ma_channel_map_get_default_channel
      _ma_channel_map_get_default_channel =
      _ma_channel_map_get_default_channel_ptr
          .asFunction<_dart_ma_channel_map_get_default_channel>();

  int ma_channel_map_get_channel(
    ffi.Pointer<ffi.Uint8> pChannelMap,
    int channelCount,
    int channelIndex,
  ) {
    return _ma_channel_map_get_channel(
      pChannelMap,
      channelCount,
      channelIndex,
    );
  }

  late final _ma_channel_map_get_channel_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_get_channel>>(
          'ma_channel_map_get_channel');
  late final _dart_ma_channel_map_get_channel _ma_channel_map_get_channel =
      _ma_channel_map_get_channel_ptr
          .asFunction<_dart_ma_channel_map_get_channel>();

  void ma_channel_map_init_blank(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    return _ma_channel_map_init_blank(
      channels,
      pChannelMap,
    );
  }

  late final _ma_channel_map_init_blank_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_init_blank>>(
          'ma_channel_map_init_blank');
  late final _dart_ma_channel_map_init_blank _ma_channel_map_init_blank =
      _ma_channel_map_init_blank_ptr
          .asFunction<_dart_ma_channel_map_init_blank>();

  void ma_get_standard_channel_map(
    int standardChannelMap,
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    return _ma_get_standard_channel_map(
      standardChannelMap,
      channels,
      pChannelMap,
    );
  }

  late final _ma_get_standard_channel_map_ptr =
      _lookup<ffi.NativeFunction<_c_ma_get_standard_channel_map>>(
          'ma_get_standard_channel_map');
  late final _dart_ma_get_standard_channel_map _ma_get_standard_channel_map =
      _ma_get_standard_channel_map_ptr
          .asFunction<_dart_ma_get_standard_channel_map>();

  void ma_channel_map_copy(
    ffi.Pointer<ffi.Uint8> pOut,
    ffi.Pointer<ffi.Uint8> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy(
      pOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copy_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_copy>>(
          'ma_channel_map_copy');
  late final _dart_ma_channel_map_copy _ma_channel_map_copy =
      _ma_channel_map_copy_ptr.asFunction<_dart_ma_channel_map_copy>();

  void ma_channel_map_copy_or_default(
    ffi.Pointer<ffi.Uint8> pOut,
    ffi.Pointer<ffi.Uint8> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy_or_default(
      pOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copy_or_default_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_copy_or_default>>(
          'ma_channel_map_copy_or_default');
  late final _dart_ma_channel_map_copy_or_default
      _ma_channel_map_copy_or_default = _ma_channel_map_copy_or_default_ptr
          .asFunction<_dart_ma_channel_map_copy_or_default>();

  int ma_channel_map_valid(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    return _ma_channel_map_valid(
      channels,
      pChannelMap,
    );
  }

  late final _ma_channel_map_valid_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_valid>>(
          'ma_channel_map_valid');
  late final _dart_ma_channel_map_valid _ma_channel_map_valid =
      _ma_channel_map_valid_ptr.asFunction<_dart_ma_channel_map_valid>();

  int ma_channel_map_equal(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMapA,
    ffi.Pointer<ffi.Uint8> pChannelMapB,
  ) {
    return _ma_channel_map_equal(
      channels,
      pChannelMapA,
      pChannelMapB,
    );
  }

  late final _ma_channel_map_equal_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_equal>>(
          'ma_channel_map_equal');
  late final _dart_ma_channel_map_equal _ma_channel_map_equal =
      _ma_channel_map_equal_ptr.asFunction<_dart_ma_channel_map_equal>();

  int ma_channel_map_blank(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
  ) {
    return _ma_channel_map_blank(
      channels,
      pChannelMap,
    );
  }

  late final _ma_channel_map_blank_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_blank>>(
          'ma_channel_map_blank');
  late final _dart_ma_channel_map_blank _ma_channel_map_blank =
      _ma_channel_map_blank_ptr.asFunction<_dart_ma_channel_map_blank>();

  int ma_channel_map_contains_channel_position(
    int channels,
    ffi.Pointer<ffi.Uint8> pChannelMap,
    int channelPosition,
  ) {
    return _ma_channel_map_contains_channel_position(
      channels,
      pChannelMap,
      channelPosition,
    );
  }

  late final _ma_channel_map_contains_channel_position_ptr =
      _lookup<ffi.NativeFunction<_c_ma_channel_map_contains_channel_position>>(
          'ma_channel_map_contains_channel_position');
  late final _dart_ma_channel_map_contains_channel_position
      _ma_channel_map_contains_channel_position =
      _ma_channel_map_contains_channel_position_ptr
          .asFunction<_dart_ma_channel_map_contains_channel_position>();

  /// Conversion Helpers
  int ma_convert_frames(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    int formatOut,
    int channelsOut,
    int sampleRateOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    int formatIn,
    int channelsIn,
    int sampleRateIn,
  ) {
    return _ma_convert_frames(
      pOut,
      frameCountOut,
      formatOut,
      channelsOut,
      sampleRateOut,
      pIn,
      frameCountIn,
      formatIn,
      channelsIn,
      sampleRateIn,
    );
  }

  late final _ma_convert_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_convert_frames>>('ma_convert_frames');
  late final _dart_ma_convert_frames _ma_convert_frames =
      _ma_convert_frames_ptr.asFunction<_dart_ma_convert_frames>();

  int ma_convert_frames_ex(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    ffi.Pointer<ma_data_converter_config> pConfig,
  ) {
    return _ma_convert_frames_ex(
      pOut,
      frameCountOut,
      pIn,
      frameCountIn,
      pConfig,
    );
  }

  late final _ma_convert_frames_ex_ptr =
      _lookup<ffi.NativeFunction<_c_ma_convert_frames_ex>>(
          'ma_convert_frames_ex');
  late final _dart_ma_convert_frames_ex _ma_convert_frames_ex =
      _ma_convert_frames_ex_ptr.asFunction<_dart_ma_convert_frames_ex>();

  int ma_rb_init_ex(
    int subbufferSizeInBytes,
    int subbufferCount,
    int subbufferStrideInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init_ex(
      subbufferSizeInBytes,
      subbufferCount,
      subbufferStrideInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_init_ex_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_init_ex>>('ma_rb_init_ex');
  late final _dart_ma_rb_init_ex _ma_rb_init_ex =
      _ma_rb_init_ex_ptr.asFunction<_dart_ma_rb_init_ex>();

  int ma_rb_init(
    int bufferSizeInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init(
      bufferSizeInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_init>>('ma_rb_init');
  late final _dart_ma_rb_init _ma_rb_init =
      _ma_rb_init_ptr.asFunction<_dart_ma_rb_init>();

  void ma_rb_uninit(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_uninit(
      pRB,
    );
  }

  late final _ma_rb_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_uninit>>('ma_rb_uninit');
  late final _dart_ma_rb_uninit _ma_rb_uninit =
      _ma_rb_uninit_ptr.asFunction<_dart_ma_rb_uninit>();

  void ma_rb_reset(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_reset(
      pRB,
    );
  }

  late final _ma_rb_reset_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_reset>>('ma_rb_reset');
  late final _dart_ma_rb_reset _ma_rb_reset =
      _ma_rb_reset_ptr.asFunction<_dart_ma_rb_reset>();

  int ma_rb_acquire_read(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Uint64> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_read(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_acquire_read>>('ma_rb_acquire_read');
  late final _dart_ma_rb_acquire_read _ma_rb_acquire_read =
      _ma_rb_acquire_read_ptr.asFunction<_dart_ma_rb_acquire_read>();

  int ma_rb_commit_read(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_rb_commit_read(
      pRB,
      sizeInBytes,
      pBufferOut,
    );
  }

  late final _ma_rb_commit_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_commit_read>>('ma_rb_commit_read');
  late final _dart_ma_rb_commit_read _ma_rb_commit_read =
      _ma_rb_commit_read_ptr.asFunction<_dart_ma_rb_commit_read>();

  int ma_rb_acquire_write(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Uint64> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_write(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_acquire_write>>(
          'ma_rb_acquire_write');
  late final _dart_ma_rb_acquire_write _ma_rb_acquire_write =
      _ma_rb_acquire_write_ptr.asFunction<_dart_ma_rb_acquire_write>();

  int ma_rb_commit_write(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_rb_commit_write(
      pRB,
      sizeInBytes,
      pBufferOut,
    );
  }

  late final _ma_rb_commit_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_commit_write>>('ma_rb_commit_write');
  late final _dart_ma_rb_commit_write _ma_rb_commit_write =
      _ma_rb_commit_write_ptr.asFunction<_dart_ma_rb_commit_write>();

  int ma_rb_seek_read(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_read(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_seek_read>>('ma_rb_seek_read');
  late final _dart_ma_rb_seek_read _ma_rb_seek_read =
      _ma_rb_seek_read_ptr.asFunction<_dart_ma_rb_seek_read>();

  int ma_rb_seek_write(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_write(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_seek_write>>('ma_rb_seek_write');
  late final _dart_ma_rb_seek_write _ma_rb_seek_write =
      _ma_rb_seek_write_ptr.asFunction<_dart_ma_rb_seek_write>();

  int ma_rb_pointer_distance(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_rb_pointer_distance_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_pointer_distance>>(
          'ma_rb_pointer_distance');
  late final _dart_ma_rb_pointer_distance _ma_rb_pointer_distance =
      _ma_rb_pointer_distance_ptr.asFunction<_dart_ma_rb_pointer_distance>();

  int ma_rb_available_read(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_read(
      pRB,
    );
  }

  late final _ma_rb_available_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_available_read>>(
          'ma_rb_available_read');
  late final _dart_ma_rb_available_read _ma_rb_available_read =
      _ma_rb_available_read_ptr.asFunction<_dart_ma_rb_available_read>();

  int ma_rb_available_write(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_write(
      pRB,
    );
  }

  late final _ma_rb_available_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_available_write>>(
          'ma_rb_available_write');
  late final _dart_ma_rb_available_write _ma_rb_available_write =
      _ma_rb_available_write_ptr.asFunction<_dart_ma_rb_available_write>();

  int ma_rb_get_subbuffer_size(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_get_subbuffer_size>>(
          'ma_rb_get_subbuffer_size');
  late final _dart_ma_rb_get_subbuffer_size _ma_rb_get_subbuffer_size =
      _ma_rb_get_subbuffer_size_ptr
          .asFunction<_dart_ma_rb_get_subbuffer_size>();

  int ma_rb_get_subbuffer_stride(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_stride_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_get_subbuffer_stride>>(
          'ma_rb_get_subbuffer_stride');
  late final _dart_ma_rb_get_subbuffer_stride _ma_rb_get_subbuffer_stride =
      _ma_rb_get_subbuffer_stride_ptr
          .asFunction<_dart_ma_rb_get_subbuffer_stride>();

  int ma_rb_get_subbuffer_offset(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_rb_get_subbuffer_offset_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_get_subbuffer_offset>>(
          'ma_rb_get_subbuffer_offset');
  late final _dart_ma_rb_get_subbuffer_offset _ma_rb_get_subbuffer_offset =
      _ma_rb_get_subbuffer_offset_ptr
          .asFunction<_dart_ma_rb_get_subbuffer_offset>();

  ffi.Pointer<ffi.Void> ma_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_rb_get_subbuffer_ptr_ptr =
      _lookup<ffi.NativeFunction<_c_ma_rb_get_subbuffer_ptr>>(
          'ma_rb_get_subbuffer_ptr');
  late final _dart_ma_rb_get_subbuffer_ptr _ma_rb_get_subbuffer_ptr =
      _ma_rb_get_subbuffer_ptr_ptr.asFunction<_dart_ma_rb_get_subbuffer_ptr>();

  int ma_pcm_rb_init_ex(
    int format,
    int channels,
    int subbufferSizeInFrames,
    int subbufferCount,
    int subbufferStrideInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init_ex(
      format,
      channels,
      subbufferSizeInFrames,
      subbufferCount,
      subbufferStrideInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_init_ex_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_init_ex>>('ma_pcm_rb_init_ex');
  late final _dart_ma_pcm_rb_init_ex _ma_pcm_rb_init_ex =
      _ma_pcm_rb_init_ex_ptr.asFunction<_dart_ma_pcm_rb_init_ex>();

  int ma_pcm_rb_init(
    int format,
    int channels,
    int bufferSizeInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init(
      format,
      channels,
      bufferSizeInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_init>>('ma_pcm_rb_init');
  late final _dart_ma_pcm_rb_init _ma_pcm_rb_init =
      _ma_pcm_rb_init_ptr.asFunction<_dart_ma_pcm_rb_init>();

  void ma_pcm_rb_uninit(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_uninit(
      pRB,
    );
  }

  late final _ma_pcm_rb_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_uninit>>('ma_pcm_rb_uninit');
  late final _dart_ma_pcm_rb_uninit _ma_pcm_rb_uninit =
      _ma_pcm_rb_uninit_ptr.asFunction<_dart_ma_pcm_rb_uninit>();

  void ma_pcm_rb_reset(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_reset(
      pRB,
    );
  }

  late final _ma_pcm_rb_reset_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_reset>>('ma_pcm_rb_reset');
  late final _dart_ma_pcm_rb_reset _ma_pcm_rb_reset =
      _ma_pcm_rb_reset_ptr.asFunction<_dart_ma_pcm_rb_reset>();

  int ma_pcm_rb_acquire_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ffi.Uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_read(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_acquire_read>>(
          'ma_pcm_rb_acquire_read');
  late final _dart_ma_pcm_rb_acquire_read _ma_pcm_rb_acquire_read =
      _ma_pcm_rb_acquire_read_ptr.asFunction<_dart_ma_pcm_rb_acquire_read>();

  int ma_pcm_rb_commit_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_pcm_rb_commit_read(
      pRB,
      sizeInFrames,
      pBufferOut,
    );
  }

  late final _ma_pcm_rb_commit_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_commit_read>>(
          'ma_pcm_rb_commit_read');
  late final _dart_ma_pcm_rb_commit_read _ma_pcm_rb_commit_read =
      _ma_pcm_rb_commit_read_ptr.asFunction<_dart_ma_pcm_rb_commit_read>();

  int ma_pcm_rb_acquire_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ffi.Uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_write(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_acquire_write>>(
          'ma_pcm_rb_acquire_write');
  late final _dart_ma_pcm_rb_acquire_write _ma_pcm_rb_acquire_write =
      _ma_pcm_rb_acquire_write_ptr.asFunction<_dart_ma_pcm_rb_acquire_write>();

  int ma_pcm_rb_commit_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_pcm_rb_commit_write(
      pRB,
      sizeInFrames,
      pBufferOut,
    );
  }

  late final _ma_pcm_rb_commit_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_commit_write>>(
          'ma_pcm_rb_commit_write');
  late final _dart_ma_pcm_rb_commit_write _ma_pcm_rb_commit_write =
      _ma_pcm_rb_commit_write_ptr.asFunction<_dart_ma_pcm_rb_commit_write>();

  int ma_pcm_rb_seek_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_read(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_seek_read>>(
          'ma_pcm_rb_seek_read');
  late final _dart_ma_pcm_rb_seek_read _ma_pcm_rb_seek_read =
      _ma_pcm_rb_seek_read_ptr.asFunction<_dart_ma_pcm_rb_seek_read>();

  int ma_pcm_rb_seek_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_write(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_seek_write>>(
          'ma_pcm_rb_seek_write');
  late final _dart_ma_pcm_rb_seek_write _ma_pcm_rb_seek_write =
      _ma_pcm_rb_seek_write_ptr.asFunction<_dart_ma_pcm_rb_seek_write>();

  int ma_pcm_rb_pointer_distance(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_pcm_rb_pointer_distance_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_pointer_distance>>(
          'ma_pcm_rb_pointer_distance');
  late final _dart_ma_pcm_rb_pointer_distance _ma_pcm_rb_pointer_distance =
      _ma_pcm_rb_pointer_distance_ptr
          .asFunction<_dart_ma_pcm_rb_pointer_distance>();

  int ma_pcm_rb_available_read(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_read(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_available_read>>(
          'ma_pcm_rb_available_read');
  late final _dart_ma_pcm_rb_available_read _ma_pcm_rb_available_read =
      _ma_pcm_rb_available_read_ptr
          .asFunction<_dart_ma_pcm_rb_available_read>();

  int ma_pcm_rb_available_write(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_write(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_available_write>>(
          'ma_pcm_rb_available_write');
  late final _dart_ma_pcm_rb_available_write _ma_pcm_rb_available_write =
      _ma_pcm_rb_available_write_ptr
          .asFunction<_dart_ma_pcm_rb_available_write>();

  int ma_pcm_rb_get_subbuffer_size(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_get_subbuffer_size>>(
          'ma_pcm_rb_get_subbuffer_size');
  late final _dart_ma_pcm_rb_get_subbuffer_size _ma_pcm_rb_get_subbuffer_size =
      _ma_pcm_rb_get_subbuffer_size_ptr
          .asFunction<_dart_ma_pcm_rb_get_subbuffer_size>();

  int ma_pcm_rb_get_subbuffer_stride(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_stride_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_get_subbuffer_stride>>(
          'ma_pcm_rb_get_subbuffer_stride');
  late final _dart_ma_pcm_rb_get_subbuffer_stride
      _ma_pcm_rb_get_subbuffer_stride = _ma_pcm_rb_get_subbuffer_stride_ptr
          .asFunction<_dart_ma_pcm_rb_get_subbuffer_stride>();

  int ma_pcm_rb_get_subbuffer_offset(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_pcm_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_offset_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_get_subbuffer_offset>>(
          'ma_pcm_rb_get_subbuffer_offset');
  late final _dart_ma_pcm_rb_get_subbuffer_offset
      _ma_pcm_rb_get_subbuffer_offset = _ma_pcm_rb_get_subbuffer_offset_ptr
          .asFunction<_dart_ma_pcm_rb_get_subbuffer_offset>();

  ffi.Pointer<ffi.Void> ma_pcm_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_pcm_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_ptr_ptr =
      _lookup<ffi.NativeFunction<_c_ma_pcm_rb_get_subbuffer_ptr>>(
          'ma_pcm_rb_get_subbuffer_ptr');
  late final _dart_ma_pcm_rb_get_subbuffer_ptr _ma_pcm_rb_get_subbuffer_ptr =
      _ma_pcm_rb_get_subbuffer_ptr_ptr
          .asFunction<_dart_ma_pcm_rb_get_subbuffer_ptr>();

  int ma_duplex_rb_init(
    int captureFormat,
    int captureChannels,
    int sampleRate,
    int captureInternalSampleRate,
    int captureInternalPeriodSizeInFrames,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_init(
      captureFormat,
      captureChannels,
      sampleRate,
      captureInternalSampleRate,
      captureInternalPeriodSizeInFrames,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_duplex_rb_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_duplex_rb_init>>('ma_duplex_rb_init');
  late final _dart_ma_duplex_rb_init _ma_duplex_rb_init =
      _ma_duplex_rb_init_ptr.asFunction<_dart_ma_duplex_rb_init>();

  int ma_duplex_rb_uninit(
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_uninit(
      pRB,
    );
  }

  late final _ma_duplex_rb_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_duplex_rb_uninit>>(
          'ma_duplex_rb_uninit');
  late final _dart_ma_duplex_rb_uninit _ma_duplex_rb_uninit =
      _ma_duplex_rb_uninit_ptr.asFunction<_dart_ma_duplex_rb_uninit>();

  /// Miscellaneous Helpers
  ffi.Pointer<ffi.Int8> ma_result_description(
    int result,
  ) {
    return _ma_result_description(
      result,
    );
  }

  late final _ma_result_description_ptr =
      _lookup<ffi.NativeFunction<_c_ma_result_description>>(
          'ma_result_description');
  late final _dart_ma_result_description _ma_result_description =
      _ma_result_description_ptr.asFunction<_dart_ma_result_description>();

  ffi.Pointer<ffi.Void> ma_malloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_malloc(
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_ma_malloc>>('ma_malloc');
  late final _dart_ma_malloc _ma_malloc =
      _ma_malloc_ptr.asFunction<_dart_ma_malloc>();

  ffi.Pointer<ffi.Void> ma_realloc(
    ffi.Pointer<ffi.Void> p,
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_realloc(
      p,
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_realloc_ptr =
      _lookup<ffi.NativeFunction<_c_ma_realloc>>('ma_realloc');
  late final _dart_ma_realloc _ma_realloc =
      _ma_realloc_ptr.asFunction<_dart_ma_realloc>();

  void ma_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_free_ptr = _lookup<ffi.NativeFunction<_c_ma_free>>('ma_free');
  late final _dart_ma_free _ma_free = _ma_free_ptr.asFunction<_dart_ma_free>();

  ffi.Pointer<ffi.Void> ma_aligned_malloc(
    int sz,
    int alignment,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_malloc(
      sz,
      alignment,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_malloc_ptr =
      _lookup<ffi.NativeFunction<_c_ma_aligned_malloc>>('ma_aligned_malloc');
  late final _dart_ma_aligned_malloc _ma_aligned_malloc =
      _ma_aligned_malloc_ptr.asFunction<_dart_ma_aligned_malloc>();

  void ma_aligned_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_free_ptr =
      _lookup<ffi.NativeFunction<_c_ma_aligned_free>>('ma_aligned_free');
  late final _dart_ma_aligned_free _ma_aligned_free =
      _ma_aligned_free_ptr.asFunction<_dart_ma_aligned_free>();

  ffi.Pointer<ffi.Int8> ma_get_format_name(
    int format,
  ) {
    return _ma_get_format_name(
      format,
    );
  }

  late final _ma_get_format_name_ptr =
      _lookup<ffi.NativeFunction<_c_ma_get_format_name>>('ma_get_format_name');
  late final _dart_ma_get_format_name _ma_get_format_name =
      _ma_get_format_name_ptr.asFunction<_dart_ma_get_format_name>();

  void ma_blend_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<ffi.Float> pInA,
    ffi.Pointer<ffi.Float> pInB,
    double factor,
    int channels,
  ) {
    return _ma_blend_f32(
      pOut,
      pInA,
      pInB,
      factor,
      channels,
    );
  }

  late final _ma_blend_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_blend_f32>>('ma_blend_f32');
  late final _dart_ma_blend_f32 _ma_blend_f32 =
      _ma_blend_f32_ptr.asFunction<_dart_ma_blend_f32>();

  int ma_get_bytes_per_sample(
    int format,
  ) {
    return _ma_get_bytes_per_sample(
      format,
    );
  }

  late final _ma_get_bytes_per_sample_ptr =
      _lookup<ffi.NativeFunction<_c_ma_get_bytes_per_sample>>(
          'ma_get_bytes_per_sample');
  late final _dart_ma_get_bytes_per_sample _ma_get_bytes_per_sample =
      _ma_get_bytes_per_sample_ptr.asFunction<_dart_ma_get_bytes_per_sample>();

  ffi.Pointer<ffi.Int8> ma_log_level_to_string(
    int logLevel,
  ) {
    return _ma_log_level_to_string(
      logLevel,
    );
  }

  late final _ma_log_level_to_string_ptr =
      _lookup<ffi.NativeFunction<_c_ma_log_level_to_string>>(
          'ma_log_level_to_string');
  late final _dart_ma_log_level_to_string _ma_log_level_to_string =
      _ma_log_level_to_string_ptr.asFunction<_dart_ma_log_level_to_string>();

  /// Utiltities
  int ma_scale_buffer_size(
    int baseBufferSize,
    double scale,
  ) {
    return _ma_scale_buffer_size(
      baseBufferSize,
      scale,
    );
  }

  late final _ma_scale_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_ma_scale_buffer_size>>(
          'ma_scale_buffer_size');
  late final _dart_ma_scale_buffer_size _ma_scale_buffer_size =
      _ma_scale_buffer_size_ptr.asFunction<_dart_ma_scale_buffer_size>();

  int ma_calculate_buffer_size_in_milliseconds_from_frames(
    int bufferSizeInFrames,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_milliseconds_from_frames(
      bufferSizeInFrames,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_milliseconds_from_frames_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_ma_calculate_buffer_size_in_milliseconds_from_frames>>(
          'ma_calculate_buffer_size_in_milliseconds_from_frames');
  late final _dart_ma_calculate_buffer_size_in_milliseconds_from_frames
      _ma_calculate_buffer_size_in_milliseconds_from_frames =
      _ma_calculate_buffer_size_in_milliseconds_from_frames_ptr.asFunction<
          _dart_ma_calculate_buffer_size_in_milliseconds_from_frames>();

  int ma_calculate_buffer_size_in_frames_from_milliseconds(
    int bufferSizeInMilliseconds,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_milliseconds(
      bufferSizeInMilliseconds,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_milliseconds_ptr =
      _lookup<
              ffi.NativeFunction<
                  _c_ma_calculate_buffer_size_in_frames_from_milliseconds>>(
          'ma_calculate_buffer_size_in_frames_from_milliseconds');
  late final _dart_ma_calculate_buffer_size_in_frames_from_milliseconds
      _ma_calculate_buffer_size_in_frames_from_milliseconds =
      _ma_calculate_buffer_size_in_frames_from_milliseconds_ptr.asFunction<
          _dart_ma_calculate_buffer_size_in_frames_from_milliseconds>();

  void ma_copy_pcm_frames(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_copy_pcm_frames(
      dst,
      src,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_copy_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_copy_pcm_frames>>('ma_copy_pcm_frames');
  late final _dart_ma_copy_pcm_frames _ma_copy_pcm_frames =
      _ma_copy_pcm_frames_ptr.asFunction<_dart_ma_copy_pcm_frames>();

  void ma_silence_pcm_frames(
    ffi.Pointer<ffi.Void> p,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_silence_pcm_frames(
      p,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_silence_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_silence_pcm_frames>>(
          'ma_silence_pcm_frames');
  late final _dart_ma_silence_pcm_frames _ma_silence_pcm_frames =
      _ma_silence_pcm_frames_ptr.asFunction<_dart_ma_silence_pcm_frames>();

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_ptr_ptr =
      _lookup<ffi.NativeFunction<_c_ma_offset_pcm_frames_ptr>>(
          'ma_offset_pcm_frames_ptr');
  late final _dart_ma_offset_pcm_frames_ptr _ma_offset_pcm_frames_ptr =
      _ma_offset_pcm_frames_ptr_ptr
          .asFunction<_dart_ma_offset_pcm_frames_ptr>();

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_const_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_const_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_const_ptr_ptr =
      _lookup<ffi.NativeFunction<_c_ma_offset_pcm_frames_const_ptr>>(
          'ma_offset_pcm_frames_const_ptr');
  late final _dart_ma_offset_pcm_frames_const_ptr
      _ma_offset_pcm_frames_const_ptr = _ma_offset_pcm_frames_const_ptr_ptr
          .asFunction<_dart_ma_offset_pcm_frames_const_ptr>();

  void ma_clip_samples_f32(
    ffi.Pointer<ffi.Float> p,
    int sampleCount,
  ) {
    return _ma_clip_samples_f32(
      p,
      sampleCount,
    );
  }

  late final _ma_clip_samples_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_clip_samples_f32>>(
          'ma_clip_samples_f32');
  late final _dart_ma_clip_samples_f32 _ma_clip_samples_f32 =
      _ma_clip_samples_f32_ptr.asFunction<_dart_ma_clip_samples_f32>();

  void ma_copy_and_apply_volume_factor_u8(
    ffi.Pointer<ffi.Uint8> pSamplesOut,
    ffi.Pointer<ffi.Uint8> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_u8(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_u8>>(
          'ma_copy_and_apply_volume_factor_u8');
  late final _dart_ma_copy_and_apply_volume_factor_u8
      _ma_copy_and_apply_volume_factor_u8 =
      _ma_copy_and_apply_volume_factor_u8_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_u8>();

  void ma_copy_and_apply_volume_factor_s16(
    ffi.Pointer<ffi.Int16> pSamplesOut,
    ffi.Pointer<ffi.Int16> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s16(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_s16>>(
          'ma_copy_and_apply_volume_factor_s16');
  late final _dart_ma_copy_and_apply_volume_factor_s16
      _ma_copy_and_apply_volume_factor_s16 =
      _ma_copy_and_apply_volume_factor_s16_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_s16>();

  void ma_copy_and_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamplesOut,
    ffi.Pointer<ffi.Void> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s24(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_s24>>(
          'ma_copy_and_apply_volume_factor_s24');
  late final _dart_ma_copy_and_apply_volume_factor_s24
      _ma_copy_and_apply_volume_factor_s24 =
      _ma_copy_and_apply_volume_factor_s24_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_s24>();

  void ma_copy_and_apply_volume_factor_s32(
    ffi.Pointer<ffi.Int32> pSamplesOut,
    ffi.Pointer<ffi.Int32> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_s32>>(
          'ma_copy_and_apply_volume_factor_s32');
  late final _dart_ma_copy_and_apply_volume_factor_s32
      _ma_copy_and_apply_volume_factor_s32 =
      _ma_copy_and_apply_volume_factor_s32_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_s32>();

  void ma_copy_and_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamplesOut,
    ffi.Pointer<ffi.Float> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_f32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_f32>>(
          'ma_copy_and_apply_volume_factor_f32');
  late final _dart_ma_copy_and_apply_volume_factor_f32
      _ma_copy_and_apply_volume_factor_f32 =
      _ma_copy_and_apply_volume_factor_f32_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_f32>();

  void ma_apply_volume_factor_u8(
    ffi.Pointer<ffi.Uint8> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_u8(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_u8>>(
          'ma_apply_volume_factor_u8');
  late final _dart_ma_apply_volume_factor_u8 _ma_apply_volume_factor_u8 =
      _ma_apply_volume_factor_u8_ptr
          .asFunction<_dart_ma_apply_volume_factor_u8>();

  void ma_apply_volume_factor_s16(
    ffi.Pointer<ffi.Int16> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s16(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_s16>>(
          'ma_apply_volume_factor_s16');
  late final _dart_ma_apply_volume_factor_s16 _ma_apply_volume_factor_s16 =
      _ma_apply_volume_factor_s16_ptr
          .asFunction<_dart_ma_apply_volume_factor_s16>();

  void ma_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s24(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_s24>>(
          'ma_apply_volume_factor_s24');
  late final _dart_ma_apply_volume_factor_s24 _ma_apply_volume_factor_s24 =
      _ma_apply_volume_factor_s24_ptr
          .asFunction<_dart_ma_apply_volume_factor_s24>();

  void ma_apply_volume_factor_s32(
    ffi.Pointer<ffi.Int32> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_s32>>(
          'ma_apply_volume_factor_s32');
  late final _dart_ma_apply_volume_factor_s32 _ma_apply_volume_factor_s32 =
      _ma_apply_volume_factor_s32_ptr
          .asFunction<_dart_ma_apply_volume_factor_s32>();

  void ma_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_f32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_f32>>(
          'ma_apply_volume_factor_f32');
  late final _dart_ma_apply_volume_factor_f32 _ma_apply_volume_factor_f32 =
      _ma_apply_volume_factor_f32_ptr
          .asFunction<_dart_ma_apply_volume_factor_f32>();

  void ma_copy_and_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ffi.Uint8> pPCMFramesOut,
    ffi.Pointer<ffi.Uint8> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_u8(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8_ptr = _lookup<
          ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_pcm_frames_u8>>(
      'ma_copy_and_apply_volume_factor_pcm_frames_u8');
  late final _dart_ma_copy_and_apply_volume_factor_pcm_frames_u8
      _ma_copy_and_apply_volume_factor_pcm_frames_u8 =
      _ma_copy_and_apply_volume_factor_pcm_frames_u8_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_pcm_frames_u8>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ffi.Int16> pPCMFramesOut,
    ffi.Pointer<ffi.Int16> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s16(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_copy_and_apply_volume_factor_pcm_frames_s16>>(
      'ma_copy_and_apply_volume_factor_pcm_frames_s16');
  late final _dart_ma_copy_and_apply_volume_factor_pcm_frames_s16
      _ma_copy_and_apply_volume_factor_pcm_frames_s16 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s16_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_pcm_frames_s16>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pPCMFramesOut,
    ffi.Pointer<ffi.Void> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s24(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_copy_and_apply_volume_factor_pcm_frames_s24>>(
      'ma_copy_and_apply_volume_factor_pcm_frames_s24');
  late final _dart_ma_copy_and_apply_volume_factor_pcm_frames_s24
      _ma_copy_and_apply_volume_factor_pcm_frames_s24 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s24_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_pcm_frames_s24>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ffi.Int32> pPCMFramesOut,
    ffi.Pointer<ffi.Int32> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s32(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_copy_and_apply_volume_factor_pcm_frames_s32>>(
      'ma_copy_and_apply_volume_factor_pcm_frames_s32');
  late final _dart_ma_copy_and_apply_volume_factor_pcm_frames_s32
      _ma_copy_and_apply_volume_factor_pcm_frames_s32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s32_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_pcm_frames_s32>();

  void ma_copy_and_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pPCMFramesOut,
    ffi.Pointer<ffi.Float> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_f32(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32_ptr = _lookup<
          ffi.NativeFunction<
              _c_ma_copy_and_apply_volume_factor_pcm_frames_f32>>(
      'ma_copy_and_apply_volume_factor_pcm_frames_f32');
  late final _dart_ma_copy_and_apply_volume_factor_pcm_frames_f32
      _ma_copy_and_apply_volume_factor_pcm_frames_f32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_f32_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_pcm_frames_f32>();

  void ma_copy_and_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames(
      pFramesOut,
      pFramesIn,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_ptr = _lookup<
          ffi.NativeFunction<_c_ma_copy_and_apply_volume_factor_pcm_frames>>(
      'ma_copy_and_apply_volume_factor_pcm_frames');
  late final _dart_ma_copy_and_apply_volume_factor_pcm_frames
      _ma_copy_and_apply_volume_factor_pcm_frames =
      _ma_copy_and_apply_volume_factor_pcm_frames_ptr
          .asFunction<_dart_ma_copy_and_apply_volume_factor_pcm_frames>();

  void ma_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ffi.Uint8> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_u8(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_u8_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_pcm_frames_u8>>(
          'ma_apply_volume_factor_pcm_frames_u8');
  late final _dart_ma_apply_volume_factor_pcm_frames_u8
      _ma_apply_volume_factor_pcm_frames_u8 =
      _ma_apply_volume_factor_pcm_frames_u8_ptr
          .asFunction<_dart_ma_apply_volume_factor_pcm_frames_u8>();

  void ma_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ffi.Int16> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s16(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s16_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_pcm_frames_s16>>(
          'ma_apply_volume_factor_pcm_frames_s16');
  late final _dart_ma_apply_volume_factor_pcm_frames_s16
      _ma_apply_volume_factor_pcm_frames_s16 =
      _ma_apply_volume_factor_pcm_frames_s16_ptr
          .asFunction<_dart_ma_apply_volume_factor_pcm_frames_s16>();

  void ma_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s24(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s24_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_pcm_frames_s24>>(
          'ma_apply_volume_factor_pcm_frames_s24');
  late final _dart_ma_apply_volume_factor_pcm_frames_s24
      _ma_apply_volume_factor_pcm_frames_s24 =
      _ma_apply_volume_factor_pcm_frames_s24_ptr
          .asFunction<_dart_ma_apply_volume_factor_pcm_frames_s24>();

  void ma_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ffi.Int32> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_pcm_frames_s32>>(
          'ma_apply_volume_factor_pcm_frames_s32');
  late final _dart_ma_apply_volume_factor_pcm_frames_s32
      _ma_apply_volume_factor_pcm_frames_s32 =
      _ma_apply_volume_factor_pcm_frames_s32_ptr
          .asFunction<_dart_ma_apply_volume_factor_pcm_frames_s32>();

  void ma_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_f32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_f32_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_pcm_frames_f32>>(
          'ma_apply_volume_factor_pcm_frames_f32');
  late final _dart_ma_apply_volume_factor_pcm_frames_f32
      _ma_apply_volume_factor_pcm_frames_f32 =
      _ma_apply_volume_factor_pcm_frames_f32_ptr
          .asFunction<_dart_ma_apply_volume_factor_pcm_frames_f32>();

  void ma_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames(
      pFrames,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_apply_volume_factor_pcm_frames>>(
          'ma_apply_volume_factor_pcm_frames');
  late final _dart_ma_apply_volume_factor_pcm_frames
      _ma_apply_volume_factor_pcm_frames =
      _ma_apply_volume_factor_pcm_frames_ptr
          .asFunction<_dart_ma_apply_volume_factor_pcm_frames>();

  double ma_factor_to_gain_db(
    double factor,
  ) {
    return _ma_factor_to_gain_db(
      factor,
    );
  }

  late final _ma_factor_to_gain_db_ptr =
      _lookup<ffi.NativeFunction<_c_ma_factor_to_gain_db>>(
          'ma_factor_to_gain_db');
  late final _dart_ma_factor_to_gain_db _ma_factor_to_gain_db =
      _ma_factor_to_gain_db_ptr.asFunction<_dart_ma_factor_to_gain_db>();

  double ma_gain_db_to_factor(
    double gain,
  ) {
    return _ma_gain_db_to_factor(
      gain,
    );
  }

  late final _ma_gain_db_to_factor_ptr =
      _lookup<ffi.NativeFunction<_c_ma_gain_db_to_factor>>(
          'ma_gain_db_to_factor');
  late final _dart_ma_gain_db_to_factor _ma_gain_db_to_factor =
      _ma_gain_db_to_factor_ptr.asFunction<_dart_ma_gain_db_to_factor>();

  ma_data_source_config ma_data_source_config_init() {
    return _ma_data_source_config_init();
  }

  late final _ma_data_source_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_config_init>>(
          'ma_data_source_config_init');
  late final _dart_ma_data_source_config_init _ma_data_source_config_init =
      _ma_data_source_config_init_ptr
          .asFunction<_dart_ma_data_source_config_init>();

  int ma_data_source_init(
    ffi.Pointer<ma_data_source_config> pConfig,
    ffi.Pointer<ffi.Void> pDataSource,
  ) {
    return _ma_data_source_init(
      pConfig,
      pDataSource,
    );
  }

  late final _ma_data_source_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_init>>(
          'ma_data_source_init');
  late final _dart_ma_data_source_init _ma_data_source_init =
      _ma_data_source_init_ptr.asFunction<_dart_ma_data_source_init>();

  void ma_data_source_uninit(
    ffi.Pointer<ffi.Void> pDataSource,
  ) {
    return _ma_data_source_uninit(
      pDataSource,
    );
  }

  late final _ma_data_source_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_uninit>>(
          'ma_data_source_uninit');
  late final _dart_ma_data_source_uninit _ma_data_source_uninit =
      _ma_data_source_uninit_ptr.asFunction<_dart_ma_data_source_uninit>();

  int ma_data_source_read_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ffi.Uint64> pFramesRead,
    int loop,
  ) {
    return _ma_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
      loop,
    );
  }

  late final _ma_data_source_read_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_read_pcm_frames>>(
          'ma_data_source_read_pcm_frames');
  late final _dart_ma_data_source_read_pcm_frames
      _ma_data_source_read_pcm_frames = _ma_data_source_read_pcm_frames_ptr
          .asFunction<_dart_ma_data_source_read_pcm_frames>();

  int ma_data_source_seek_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    int frameCount,
    ffi.Pointer<ffi.Uint64> pFramesSeeked,
    int loop,
  ) {
    return _ma_data_source_seek_pcm_frames(
      pDataSource,
      frameCount,
      pFramesSeeked,
      loop,
    );
  }

  late final _ma_data_source_seek_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_seek_pcm_frames>>(
          'ma_data_source_seek_pcm_frames');
  late final _dart_ma_data_source_seek_pcm_frames
      _ma_data_source_seek_pcm_frames = _ma_data_source_seek_pcm_frames_ptr
          .asFunction<_dart_ma_data_source_seek_pcm_frames>();

  int ma_data_source_seek_to_pcm_frame(
    ffi.Pointer<ffi.Void> pDataSource,
    int frameIndex,
  ) {
    return _ma_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  late final _ma_data_source_seek_to_pcm_frame_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_seek_to_pcm_frame>>(
          'ma_data_source_seek_to_pcm_frame');
  late final _dart_ma_data_source_seek_to_pcm_frame
      _ma_data_source_seek_to_pcm_frame = _ma_data_source_seek_to_pcm_frame_ptr
          .asFunction<_dart_ma_data_source_seek_to_pcm_frame>();

  int ma_data_source_map(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCount,
  ) {
    return _ma_data_source_map(
      pDataSource,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_data_source_map_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_map>>('ma_data_source_map');
  late final _dart_ma_data_source_map _ma_data_source_map =
      _ma_data_source_map_ptr.asFunction<_dart_ma_data_source_map>();

  int ma_data_source_unmap(
    ffi.Pointer<ffi.Void> pDataSource,
    int frameCount,
  ) {
    return _ma_data_source_unmap(
      pDataSource,
      frameCount,
    );
  }

  late final _ma_data_source_unmap_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_unmap>>(
          'ma_data_source_unmap');
  late final _dart_ma_data_source_unmap _ma_data_source_unmap =
      _ma_data_source_unmap_ptr.asFunction<_dart_ma_data_source_unmap>();

  int ma_data_source_get_data_format(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ffi.Uint32> pChannels,
    ffi.Pointer<ffi.Uint32> pSampleRate,
  ) {
    return _ma_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
    );
  }

  late final _ma_data_source_get_data_format_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_get_data_format>>(
          'ma_data_source_get_data_format');
  late final _dart_ma_data_source_get_data_format
      _ma_data_source_get_data_format = _ma_data_source_get_data_format_ptr
          .asFunction<_dart_ma_data_source_get_data_format>();

  int ma_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Uint64> pCursor,
  ) {
    return _ma_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_data_source_get_cursor_in_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_get_cursor_in_pcm_frames>>(
          'ma_data_source_get_cursor_in_pcm_frames');
  late final _dart_ma_data_source_get_cursor_in_pcm_frames
      _ma_data_source_get_cursor_in_pcm_frames =
      _ma_data_source_get_cursor_in_pcm_frames_ptr
          .asFunction<_dart_ma_data_source_get_cursor_in_pcm_frames>();

  int ma_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ffi.Void> pDataSource,
    ffi.Pointer<ffi.Uint64> pLength,
  ) {
    return _ma_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  late final _ma_data_source_get_length_in_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_data_source_get_length_in_pcm_frames>>(
          'ma_data_source_get_length_in_pcm_frames');
  late final _dart_ma_data_source_get_length_in_pcm_frames
      _ma_data_source_get_length_in_pcm_frames =
      _ma_data_source_get_length_in_pcm_frames_ptr
          .asFunction<_dart_ma_data_source_get_length_in_pcm_frames>();

  int ma_audio_buffer_ref_init(
    int format,
    int channels,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_init(
      format,
      channels,
      pData,
      sizeInFrames,
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_init>>(
          'ma_audio_buffer_ref_init');
  late final _dart_ma_audio_buffer_ref_init _ma_audio_buffer_ref_init =
      _ma_audio_buffer_ref_init_ptr
          .asFunction<_dart_ma_audio_buffer_ref_init>();

  void ma_audio_buffer_ref_uninit(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_uninit(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_uninit>>(
          'ma_audio_buffer_ref_uninit');
  late final _dart_ma_audio_buffer_ref_uninit _ma_audio_buffer_ref_uninit =
      _ma_audio_buffer_ref_uninit_ptr
          .asFunction<_dart_ma_audio_buffer_ref_uninit>();

  int ma_audio_buffer_ref_set_data(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
  ) {
    return _ma_audio_buffer_ref_set_data(
      pAudioBufferRef,
      pData,
      sizeInFrames,
    );
  }

  late final _ma_audio_buffer_ref_set_data_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_set_data>>(
          'ma_audio_buffer_ref_set_data');
  late final _dart_ma_audio_buffer_ref_set_data _ma_audio_buffer_ref_set_data =
      _ma_audio_buffer_ref_set_data_ptr
          .asFunction<_dart_ma_audio_buffer_ref_set_data>();

  int ma_audio_buffer_ref_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_ref_read_pcm_frames(
      pAudioBufferRef,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_ref_read_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_read_pcm_frames>>(
          'ma_audio_buffer_ref_read_pcm_frames');
  late final _dart_ma_audio_buffer_ref_read_pcm_frames
      _ma_audio_buffer_ref_read_pcm_frames =
      _ma_audio_buffer_ref_read_pcm_frames_ptr
          .asFunction<_dart_ma_audio_buffer_ref_read_pcm_frames>();

  int ma_audio_buffer_ref_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameIndex,
  ) {
    return _ma_audio_buffer_ref_seek_to_pcm_frame(
      pAudioBufferRef,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_ref_seek_to_pcm_frame_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_seek_to_pcm_frame>>(
          'ma_audio_buffer_ref_seek_to_pcm_frame');
  late final _dart_ma_audio_buffer_ref_seek_to_pcm_frame
      _ma_audio_buffer_ref_seek_to_pcm_frame =
      _ma_audio_buffer_ref_seek_to_pcm_frame_ptr
          .asFunction<_dart_ma_audio_buffer_ref_seek_to_pcm_frame>();

  int ma_audio_buffer_ref_map(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_ref_map(
      pAudioBufferRef,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_ref_map_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_map>>(
          'ma_audio_buffer_ref_map');
  late final _dart_ma_audio_buffer_ref_map _ma_audio_buffer_ref_map =
      _ma_audio_buffer_ref_map_ptr.asFunction<_dart_ma_audio_buffer_ref_map>();

  int ma_audio_buffer_ref_unmap(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameCount,
  ) {
    return _ma_audio_buffer_ref_unmap(
      pAudioBufferRef,
      frameCount,
    );
  }

  late final _ma_audio_buffer_ref_unmap_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_unmap>>(
          'ma_audio_buffer_ref_unmap');
  late final _dart_ma_audio_buffer_ref_unmap _ma_audio_buffer_ref_unmap =
      _ma_audio_buffer_ref_unmap_ptr
          .asFunction<_dart_ma_audio_buffer_ref_unmap>();

  int ma_audio_buffer_ref_at_end(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_at_end(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_at_end_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_at_end>>(
          'ma_audio_buffer_ref_at_end');
  late final _dart_ma_audio_buffer_ref_at_end _ma_audio_buffer_ref_at_end =
      _ma_audio_buffer_ref_at_end_ptr
          .asFunction<_dart_ma_audio_buffer_ref_at_end>();

  int ma_audio_buffer_ref_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Uint64> pCursor,
  ) {
    return _ma_audio_buffer_ref_get_cursor_in_pcm_frames(
      pAudioBufferRef,
      pCursor,
    );
  }

  late final _ma_audio_buffer_ref_get_cursor_in_pcm_frames_ptr = _lookup<
          ffi.NativeFunction<_c_ma_audio_buffer_ref_get_cursor_in_pcm_frames>>(
      'ma_audio_buffer_ref_get_cursor_in_pcm_frames');
  late final _dart_ma_audio_buffer_ref_get_cursor_in_pcm_frames
      _ma_audio_buffer_ref_get_cursor_in_pcm_frames =
      _ma_audio_buffer_ref_get_cursor_in_pcm_frames_ptr
          .asFunction<_dart_ma_audio_buffer_ref_get_cursor_in_pcm_frames>();

  int ma_audio_buffer_ref_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Uint64> pLength,
  ) {
    return _ma_audio_buffer_ref_get_length_in_pcm_frames(
      pAudioBufferRef,
      pLength,
    );
  }

  late final _ma_audio_buffer_ref_get_length_in_pcm_frames_ptr = _lookup<
          ffi.NativeFunction<_c_ma_audio_buffer_ref_get_length_in_pcm_frames>>(
      'ma_audio_buffer_ref_get_length_in_pcm_frames');
  late final _dart_ma_audio_buffer_ref_get_length_in_pcm_frames
      _ma_audio_buffer_ref_get_length_in_pcm_frames =
      _ma_audio_buffer_ref_get_length_in_pcm_frames_ptr
          .asFunction<_dart_ma_audio_buffer_ref_get_length_in_pcm_frames>();

  int ma_audio_buffer_ref_get_available_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_ref_get_available_frames(
      pAudioBufferRef,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_ref_get_available_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_ref_get_available_frames>>(
          'ma_audio_buffer_ref_get_available_frames');
  late final _dart_ma_audio_buffer_ref_get_available_frames
      _ma_audio_buffer_ref_get_available_frames =
      _ma_audio_buffer_ref_get_available_frames_ptr
          .asFunction<_dart_ma_audio_buffer_ref_get_available_frames>();

  ma_audio_buffer_config ma_audio_buffer_config_init(
    int format,
    int channels,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_audio_buffer_config_init(
      format,
      channels,
      sizeInFrames,
      pData,
      pAllocationCallbacks,
    );
  }

  late final _ma_audio_buffer_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_config_init>>(
          'ma_audio_buffer_config_init');
  late final _dart_ma_audio_buffer_config_init _ma_audio_buffer_config_init =
      _ma_audio_buffer_config_init_ptr
          .asFunction<_dart_ma_audio_buffer_config_init>();

  int ma_audio_buffer_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_init>>(
          'ma_audio_buffer_init');
  late final _dart_ma_audio_buffer_init _ma_audio_buffer_init =
      _ma_audio_buffer_init_ptr.asFunction<_dart_ma_audio_buffer_init>();

  int ma_audio_buffer_init_copy(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init_copy(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_init_copy_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_init_copy>>(
          'ma_audio_buffer_init_copy');
  late final _dart_ma_audio_buffer_init_copy _ma_audio_buffer_init_copy =
      _ma_audio_buffer_init_copy_ptr
          .asFunction<_dart_ma_audio_buffer_init_copy>();

  int ma_audio_buffer_alloc_and_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
  ) {
    return _ma_audio_buffer_alloc_and_init(
      pConfig,
      ppAudioBuffer,
    );
  }

  late final _ma_audio_buffer_alloc_and_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_alloc_and_init>>(
          'ma_audio_buffer_alloc_and_init');
  late final _dart_ma_audio_buffer_alloc_and_init
      _ma_audio_buffer_alloc_and_init = _ma_audio_buffer_alloc_and_init_ptr
          .asFunction<_dart_ma_audio_buffer_alloc_and_init>();

  void ma_audio_buffer_uninit(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_uninit>>(
          'ma_audio_buffer_uninit');
  late final _dart_ma_audio_buffer_uninit _ma_audio_buffer_uninit =
      _ma_audio_buffer_uninit_ptr.asFunction<_dart_ma_audio_buffer_uninit>();

  void ma_audio_buffer_uninit_and_free(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit_and_free(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninit_and_free_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_uninit_and_free>>(
          'ma_audio_buffer_uninit_and_free');
  late final _dart_ma_audio_buffer_uninit_and_free
      _ma_audio_buffer_uninit_and_free = _ma_audio_buffer_uninit_and_free_ptr
          .asFunction<_dart_ma_audio_buffer_uninit_and_free>();

  int ma_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_read_pcm_frames(
      pAudioBuffer,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_read_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_read_pcm_frames>>(
          'ma_audio_buffer_read_pcm_frames');
  late final _dart_ma_audio_buffer_read_pcm_frames
      _ma_audio_buffer_read_pcm_frames = _ma_audio_buffer_read_pcm_frames_ptr
          .asFunction<_dart_ma_audio_buffer_read_pcm_frames>();

  int ma_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameIndex,
  ) {
    return _ma_audio_buffer_seek_to_pcm_frame(
      pAudioBuffer,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_seek_to_pcm_frame_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_seek_to_pcm_frame>>(
          'ma_audio_buffer_seek_to_pcm_frame');
  late final _dart_ma_audio_buffer_seek_to_pcm_frame
      _ma_audio_buffer_seek_to_pcm_frame =
      _ma_audio_buffer_seek_to_pcm_frame_ptr
          .asFunction<_dart_ma_audio_buffer_seek_to_pcm_frame>();

  int ma_audio_buffer_map(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ffi.Uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_map(
      pAudioBuffer,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_map_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_map>>(
          'ma_audio_buffer_map');
  late final _dart_ma_audio_buffer_map _ma_audio_buffer_map =
      _ma_audio_buffer_map_ptr.asFunction<_dart_ma_audio_buffer_map>();

  int ma_audio_buffer_unmap(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameCount,
  ) {
    return _ma_audio_buffer_unmap(
      pAudioBuffer,
      frameCount,
    );
  }

  late final _ma_audio_buffer_unmap_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_unmap>>(
          'ma_audio_buffer_unmap');
  late final _dart_ma_audio_buffer_unmap _ma_audio_buffer_unmap =
      _ma_audio_buffer_unmap_ptr.asFunction<_dart_ma_audio_buffer_unmap>();

  int ma_audio_buffer_at_end(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_at_end(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_at_end_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_at_end>>(
          'ma_audio_buffer_at_end');
  late final _dart_ma_audio_buffer_at_end _ma_audio_buffer_at_end =
      _ma_audio_buffer_at_end_ptr.asFunction<_dart_ma_audio_buffer_at_end>();

  int ma_audio_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Uint64> pCursor,
  ) {
    return _ma_audio_buffer_get_cursor_in_pcm_frames(
      pAudioBuffer,
      pCursor,
    );
  }

  late final _ma_audio_buffer_get_cursor_in_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_get_cursor_in_pcm_frames>>(
          'ma_audio_buffer_get_cursor_in_pcm_frames');
  late final _dart_ma_audio_buffer_get_cursor_in_pcm_frames
      _ma_audio_buffer_get_cursor_in_pcm_frames =
      _ma_audio_buffer_get_cursor_in_pcm_frames_ptr
          .asFunction<_dart_ma_audio_buffer_get_cursor_in_pcm_frames>();

  int ma_audio_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Uint64> pLength,
  ) {
    return _ma_audio_buffer_get_length_in_pcm_frames(
      pAudioBuffer,
      pLength,
    );
  }

  late final _ma_audio_buffer_get_length_in_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_get_length_in_pcm_frames>>(
          'ma_audio_buffer_get_length_in_pcm_frames');
  late final _dart_ma_audio_buffer_get_length_in_pcm_frames
      _ma_audio_buffer_get_length_in_pcm_frames =
      _ma_audio_buffer_get_length_in_pcm_frames_ptr
          .asFunction<_dart_ma_audio_buffer_get_length_in_pcm_frames>();

  int ma_audio_buffer_get_available_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_get_available_frames(
      pAudioBuffer,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_get_available_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_audio_buffer_get_available_frames>>(
          'ma_audio_buffer_get_available_frames');
  late final _dart_ma_audio_buffer_get_available_frames
      _ma_audio_buffer_get_available_frames =
      _ma_audio_buffer_get_available_frames_ptr
          .asFunction<_dart_ma_audio_buffer_get_available_frames>();

  int ma_vfs_open(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    int openMode,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
  ) {
    return _ma_vfs_open(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_open_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_open>>('ma_vfs_open');
  late final _dart_ma_vfs_open _ma_vfs_open =
      _ma_vfs_open_ptr.asFunction<_dart_ma_vfs_open>();

  int ma_vfs_open_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    int openMode,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
  ) {
    return _ma_vfs_open_w(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_open_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_open_w>>('ma_vfs_open_w');
  late final _dart_ma_vfs_open_w _ma_vfs_open_w =
      _ma_vfs_open_w_ptr.asFunction<_dart_ma_vfs_open_w>();

  int ma_vfs_close(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
  ) {
    return _ma_vfs_close(
      pVFS,
      file,
    );
  }

  late final _ma_vfs_close_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_close>>('ma_vfs_close');
  late final _dart_ma_vfs_close _ma_vfs_close =
      _ma_vfs_close_ptr.asFunction<_dart_ma_vfs_close>();

  int ma_vfs_read(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ffi.Void> pDst,
    int sizeInBytes,
    ffi.Pointer<ffi.Uint64> pBytesRead,
  ) {
    return _ma_vfs_read(
      pVFS,
      file,
      pDst,
      sizeInBytes,
      pBytesRead,
    );
  }

  late final _ma_vfs_read_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_read>>('ma_vfs_read');
  late final _dart_ma_vfs_read _ma_vfs_read =
      _ma_vfs_read_ptr.asFunction<_dart_ma_vfs_read>();

  int ma_vfs_write(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ffi.Void> pSrc,
    int sizeInBytes,
    ffi.Pointer<ffi.Uint64> pBytesWritten,
  ) {
    return _ma_vfs_write(
      pVFS,
      file,
      pSrc,
      sizeInBytes,
      pBytesWritten,
    );
  }

  late final _ma_vfs_write_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_write>>('ma_vfs_write');
  late final _dart_ma_vfs_write _ma_vfs_write =
      _ma_vfs_write_ptr.asFunction<_dart_ma_vfs_write>();

  int ma_vfs_seek(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    int offset,
    int origin,
  ) {
    return _ma_vfs_seek(
      pVFS,
      file,
      offset,
      origin,
    );
  }

  late final _ma_vfs_seek_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_seek>>('ma_vfs_seek');
  late final _dart_ma_vfs_seek _ma_vfs_seek =
      _ma_vfs_seek_ptr.asFunction<_dart_ma_vfs_seek>();

  int ma_vfs_tell(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ffi.Int64> pCursor,
  ) {
    return _ma_vfs_tell(
      pVFS,
      file,
      pCursor,
    );
  }

  late final _ma_vfs_tell_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_tell>>('ma_vfs_tell');
  late final _dart_ma_vfs_tell _ma_vfs_tell =
      _ma_vfs_tell_ptr.asFunction<_dart_ma_vfs_tell>();

  int ma_vfs_info(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Void> file,
    ffi.Pointer<ma_file_info> pInfo,
  ) {
    return _ma_vfs_info(
      pVFS,
      file,
      pInfo,
    );
  }

  late final _ma_vfs_info_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_info>>('ma_vfs_info');
  late final _dart_ma_vfs_info _ma_vfs_info =
      _ma_vfs_info_ptr.asFunction<_dart_ma_vfs_info>();

  int ma_vfs_open_and_read_file(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Uint64> pSize,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_vfs_open_and_read_file(
      pVFS,
      pFilePath,
      ppData,
      pSize,
      pAllocationCallbacks,
    );
  }

  late final _ma_vfs_open_and_read_file_ptr =
      _lookup<ffi.NativeFunction<_c_ma_vfs_open_and_read_file>>(
          'ma_vfs_open_and_read_file');
  late final _dart_ma_vfs_open_and_read_file _ma_vfs_open_and_read_file =
      _ma_vfs_open_and_read_file_ptr
          .asFunction<_dart_ma_vfs_open_and_read_file>();

  int ma_default_vfs_init(
    ffi.Pointer<ma_default_vfs> pVFS,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_default_vfs_init(
      pVFS,
      pAllocationCallbacks,
    );
  }

  late final _ma_default_vfs_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_default_vfs_init>>(
          'ma_default_vfs_init');
  late final _dart_ma_default_vfs_init _ma_default_vfs_init =
      _ma_default_vfs_init_ptr.asFunction<_dart_ma_default_vfs_init>();

  ma_decoding_backend_config ma_decoding_backend_config_init(
    int preferredFormat,
  ) {
    return _ma_decoding_backend_config_init(
      preferredFormat,
    );
  }

  late final _ma_decoding_backend_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoding_backend_config_init>>(
          'ma_decoding_backend_config_init');
  late final _dart_ma_decoding_backend_config_init
      _ma_decoding_backend_config_init = _ma_decoding_backend_config_init_ptr
          .asFunction<_dart_ma_decoding_backend_config_init>();

  ma_decoder_config ma_decoder_config_init(
    int outputFormat,
    int outputChannels,
    int outputSampleRate,
  ) {
    return _ma_decoder_config_init(
      outputFormat,
      outputChannels,
      outputSampleRate,
    );
  }

  late final _ma_decoder_config_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_config_init>>(
          'ma_decoder_config_init');
  late final _dart_ma_decoder_config_init _ma_decoder_config_init =
      _ma_decoder_config_init_ptr.asFunction<_dart_ma_decoder_config_init>();

  ma_decoder_config ma_decoder_config_init_default() {
    return _ma_decoder_config_init_default();
  }

  late final _ma_decoder_config_init_default_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_config_init_default>>(
          'ma_decoder_config_init_default');
  late final _dart_ma_decoder_config_init_default
      _ma_decoder_config_init_default = _ma_decoder_config_init_default_ptr
          .asFunction<_dart_ma_decoder_config_init_default>();

  int ma_decoder_init(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init>>('ma_decoder_init');
  late final _dart_ma_decoder_init _ma_decoder_init =
      _ma_decoder_init_ptr.asFunction<_dart_ma_decoder_init>();

  int ma_decoder_init_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_memory>>(
          'ma_decoder_init_memory');
  late final _dart_ma_decoder_init_memory _ma_decoder_init_memory =
      _ma_decoder_init_memory_ptr.asFunction<_dart_ma_decoder_init_memory>();

  int ma_decoder_init_vfs(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs>>(
          'ma_decoder_init_vfs');
  late final _dart_ma_decoder_init_vfs _ma_decoder_init_vfs =
      _ma_decoder_init_vfs_ptr.asFunction<_dart_ma_decoder_init_vfs>();

  int ma_decoder_init_vfs_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_w>>(
          'ma_decoder_init_vfs_w');
  late final _dart_ma_decoder_init_vfs_w _ma_decoder_init_vfs_w =
      _ma_decoder_init_vfs_w_ptr.asFunction<_dart_ma_decoder_init_vfs_w>();

  int ma_decoder_init_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file>>(
          'ma_decoder_init_file');
  late final _dart_ma_decoder_init_file _ma_decoder_init_file =
      _ma_decoder_init_file_ptr.asFunction<_dart_ma_decoder_init_file>();

  int ma_decoder_init_file_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_w>>(
          'ma_decoder_init_file_w');
  late final _dart_ma_decoder_init_file_w _ma_decoder_init_file_w =
      _ma_decoder_init_file_w_ptr.asFunction<_dart_ma_decoder_init_file_w>();

  int ma_decoder_uninit(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_uninit(
      pDecoder,
    );
  }

  late final _ma_decoder_uninit_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_uninit>>('ma_decoder_uninit');
  late final _dart_ma_decoder_uninit _ma_decoder_uninit =
      _ma_decoder_uninit_ptr.asFunction<_dart_ma_decoder_uninit>();

  int ma_decoder_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Uint64> pCursor,
  ) {
    return _ma_decoder_get_cursor_in_pcm_frames(
      pDecoder,
      pCursor,
    );
  }

  late final _ma_decoder_get_cursor_in_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_get_cursor_in_pcm_frames>>(
          'ma_decoder_get_cursor_in_pcm_frames');
  late final _dart_ma_decoder_get_cursor_in_pcm_frames
      _ma_decoder_get_cursor_in_pcm_frames =
      _ma_decoder_get_cursor_in_pcm_frames_ptr
          .asFunction<_dart_ma_decoder_get_cursor_in_pcm_frames>();

  int ma_decoder_get_length_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_get_length_in_pcm_frames(
      pDecoder,
    );
  }

  late final _ma_decoder_get_length_in_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_get_length_in_pcm_frames>>(
          'ma_decoder_get_length_in_pcm_frames');
  late final _dart_ma_decoder_get_length_in_pcm_frames
      _ma_decoder_get_length_in_pcm_frames =
      _ma_decoder_get_length_in_pcm_frames_ptr
          .asFunction<_dart_ma_decoder_get_length_in_pcm_frames>();

  int ma_decoder_read_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    return _ma_decoder_read_pcm_frames(
      pDecoder,
      pFramesOut,
      frameCount,
    );
  }

  late final _ma_decoder_read_pcm_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_read_pcm_frames>>(
          'ma_decoder_read_pcm_frames');
  late final _dart_ma_decoder_read_pcm_frames _ma_decoder_read_pcm_frames =
      _ma_decoder_read_pcm_frames_ptr
          .asFunction<_dart_ma_decoder_read_pcm_frames>();

  int ma_decoder_seek_to_pcm_frame(
    ffi.Pointer<ma_decoder> pDecoder,
    int frameIndex,
  ) {
    return _ma_decoder_seek_to_pcm_frame(
      pDecoder,
      frameIndex,
    );
  }

  late final _ma_decoder_seek_to_pcm_frame_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_seek_to_pcm_frame>>(
          'ma_decoder_seek_to_pcm_frame');
  late final _dart_ma_decoder_seek_to_pcm_frame _ma_decoder_seek_to_pcm_frame =
      _ma_decoder_seek_to_pcm_frame_ptr
          .asFunction<_dart_ma_decoder_seek_to_pcm_frame>();

  int ma_decoder_get_available_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Uint64> pAvailableFrames,
  ) {
    return _ma_decoder_get_available_frames(
      pDecoder,
      pAvailableFrames,
    );
  }

  late final _ma_decoder_get_available_frames_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_get_available_frames>>(
          'ma_decoder_get_available_frames');
  late final _dart_ma_decoder_get_available_frames
      _ma_decoder_get_available_frames = _ma_decoder_get_available_frames_ptr
          .asFunction<_dart_ma_decoder_get_available_frames>();

  int ma_decode_from_vfs(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_from_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_from_vfs_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decode_from_vfs>>('ma_decode_from_vfs');
  late final _dart_ma_decode_from_vfs _ma_decode_from_vfs =
      _ma_decode_from_vfs_ptr.asFunction<_dart_ma_decode_from_vfs>();

  int ma_decode_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_file(
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_file_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decode_file>>('ma_decode_file');
  late final _dart_ma_decode_file _ma_decode_file =
      _ma_decode_file_ptr.asFunction<_dart_ma_decode_file>();

  int ma_decode_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ffi.Uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_memory(
      pData,
      dataSize,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_memory_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decode_memory>>('ma_decode_memory');
  late final _dart_ma_decode_memory _ma_decode_memory =
      _ma_decode_memory_ptr.asFunction<_dart_ma_decode_memory>();

  int ma_decoder_init_wav(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_wav(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_wav_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_wav>>(
          'ma_decoder_init_wav');
  late final _dart_ma_decoder_init_wav _ma_decoder_init_wav =
      _ma_decoder_init_wav_ptr.asFunction<_dart_ma_decoder_init_wav>();

  int ma_decoder_init_flac(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_flac(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_flac_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_flac>>(
          'ma_decoder_init_flac');
  late final _dart_ma_decoder_init_flac _ma_decoder_init_flac =
      _ma_decoder_init_flac_ptr.asFunction<_dart_ma_decoder_init_flac>();

  int ma_decoder_init_mp3(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_mp3(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_mp3_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_mp3>>(
          'ma_decoder_init_mp3');
  late final _dart_ma_decoder_init_mp3 _ma_decoder_init_mp3 =
      _ma_decoder_init_mp3_ptr.asFunction<_dart_ma_decoder_init_mp3>();

  int ma_decoder_init_vorbis(
    ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
    ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vorbis(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vorbis_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vorbis>>(
          'ma_decoder_init_vorbis');
  late final _dart_ma_decoder_init_vorbis _ma_decoder_init_vorbis =
      _ma_decoder_init_vorbis_ptr.asFunction<_dart_ma_decoder_init_vorbis>();

  int ma_decoder_init_memory_wav(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_wav(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_wav_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_memory_wav>>(
          'ma_decoder_init_memory_wav');
  late final _dart_ma_decoder_init_memory_wav _ma_decoder_init_memory_wav =
      _ma_decoder_init_memory_wav_ptr
          .asFunction<_dart_ma_decoder_init_memory_wav>();

  int ma_decoder_init_memory_flac(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_flac(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_flac_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_memory_flac>>(
          'ma_decoder_init_memory_flac');
  late final _dart_ma_decoder_init_memory_flac _ma_decoder_init_memory_flac =
      _ma_decoder_init_memory_flac_ptr
          .asFunction<_dart_ma_decoder_init_memory_flac>();

  int ma_decoder_init_memory_mp3(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_mp3(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_mp3_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_memory_mp3>>(
          'ma_decoder_init_memory_mp3');
  late final _dart_ma_decoder_init_memory_mp3 _ma_decoder_init_memory_mp3 =
      _ma_decoder_init_memory_mp3_ptr
          .asFunction<_dart_ma_decoder_init_memory_mp3>();

  int ma_decoder_init_memory_vorbis(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_vorbis(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_vorbis_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_memory_vorbis>>(
          'ma_decoder_init_memory_vorbis');
  late final _dart_ma_decoder_init_memory_vorbis
      _ma_decoder_init_memory_vorbis = _ma_decoder_init_memory_vorbis_ptr
          .asFunction<_dart_ma_decoder_init_memory_vorbis>();

  int ma_decoder_init_vfs_wav(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_wav(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wav_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_wav>>(
          'ma_decoder_init_vfs_wav');
  late final _dart_ma_decoder_init_vfs_wav _ma_decoder_init_vfs_wav =
      _ma_decoder_init_vfs_wav_ptr.asFunction<_dart_ma_decoder_init_vfs_wav>();

  int ma_decoder_init_vfs_flac(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_flac(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_flac_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_flac>>(
          'ma_decoder_init_vfs_flac');
  late final _dart_ma_decoder_init_vfs_flac _ma_decoder_init_vfs_flac =
      _ma_decoder_init_vfs_flac_ptr
          .asFunction<_dart_ma_decoder_init_vfs_flac>();

  int ma_decoder_init_vfs_mp3(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_mp3(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_mp3_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_mp3>>(
          'ma_decoder_init_vfs_mp3');
  late final _dart_ma_decoder_init_vfs_mp3 _ma_decoder_init_vfs_mp3 =
      _ma_decoder_init_vfs_mp3_ptr.asFunction<_dart_ma_decoder_init_vfs_mp3>();

  int ma_decoder_init_vfs_vorbis(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_vorbis(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_vorbis_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_vorbis>>(
          'ma_decoder_init_vfs_vorbis');
  late final _dart_ma_decoder_init_vfs_vorbis _ma_decoder_init_vfs_vorbis =
      _ma_decoder_init_vfs_vorbis_ptr
          .asFunction<_dart_ma_decoder_init_vfs_vorbis>();

  int ma_decoder_init_vfs_wav_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_wav_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wav_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_wav_w>>(
          'ma_decoder_init_vfs_wav_w');
  late final _dart_ma_decoder_init_vfs_wav_w _ma_decoder_init_vfs_wav_w =
      _ma_decoder_init_vfs_wav_w_ptr
          .asFunction<_dart_ma_decoder_init_vfs_wav_w>();

  int ma_decoder_init_vfs_flac_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_flac_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_flac_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_flac_w>>(
          'ma_decoder_init_vfs_flac_w');
  late final _dart_ma_decoder_init_vfs_flac_w _ma_decoder_init_vfs_flac_w =
      _ma_decoder_init_vfs_flac_w_ptr
          .asFunction<_dart_ma_decoder_init_vfs_flac_w>();

  int ma_decoder_init_vfs_mp3_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_mp3_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_mp3_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_mp3_w>>(
          'ma_decoder_init_vfs_mp3_w');
  late final _dart_ma_decoder_init_vfs_mp3_w _ma_decoder_init_vfs_mp3_w =
      _ma_decoder_init_vfs_mp3_w_ptr
          .asFunction<_dart_ma_decoder_init_vfs_mp3_w>();

  int ma_decoder_init_vfs_vorbis_w(
    ffi.Pointer<ffi.Void> pVFS,
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_vorbis_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_vorbis_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_vfs_vorbis_w>>(
          'ma_decoder_init_vfs_vorbis_w');
  late final _dart_ma_decoder_init_vfs_vorbis_w _ma_decoder_init_vfs_vorbis_w =
      _ma_decoder_init_vfs_vorbis_w_ptr
          .asFunction<_dart_ma_decoder_init_vfs_vorbis_w>();

  int ma_decoder_init_file_wav(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_wav(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wav_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_wav>>(
          'ma_decoder_init_file_wav');
  late final _dart_ma_decoder_init_file_wav _ma_decoder_init_file_wav =
      _ma_decoder_init_file_wav_ptr
          .asFunction<_dart_ma_decoder_init_file_wav>();

  int ma_decoder_init_file_flac(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_flac(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_flac_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_flac>>(
          'ma_decoder_init_file_flac');
  late final _dart_ma_decoder_init_file_flac _ma_decoder_init_file_flac =
      _ma_decoder_init_file_flac_ptr
          .asFunction<_dart_ma_decoder_init_file_flac>();

  int ma_decoder_init_file_mp3(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_mp3(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_mp3_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_mp3>>(
          'ma_decoder_init_file_mp3');
  late final _dart_ma_decoder_init_file_mp3 _ma_decoder_init_file_mp3 =
      _ma_decoder_init_file_mp3_ptr
          .asFunction<_dart_ma_decoder_init_file_mp3>();

  int ma_decoder_init_file_vorbis(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_vorbis(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_vorbis_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_vorbis>>(
          'ma_decoder_init_file_vorbis');
  late final _dart_ma_decoder_init_file_vorbis _ma_decoder_init_file_vorbis =
      _ma_decoder_init_file_vorbis_ptr
          .asFunction<_dart_ma_decoder_init_file_vorbis>();

  int ma_decoder_init_file_wav_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_wav_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wav_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_wav_w>>(
          'ma_decoder_init_file_wav_w');
  late final _dart_ma_decoder_init_file_wav_w _ma_decoder_init_file_wav_w =
      _ma_decoder_init_file_wav_w_ptr
          .asFunction<_dart_ma_decoder_init_file_wav_w>();

  int ma_decoder_init_file_flac_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_flac_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_flac_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_flac_w>>(
          'ma_decoder_init_file_flac_w');
  late final _dart_ma_decoder_init_file_flac_w _ma_decoder_init_file_flac_w =
      _ma_decoder_init_file_flac_w_ptr
          .asFunction<_dart_ma_decoder_init_file_flac_w>();

  int ma_decoder_init_file_mp3_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_mp3_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_mp3_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_mp3_w>>(
          'ma_decoder_init_file_mp3_w');
  late final _dart_ma_decoder_init_file_mp3_w _ma_decoder_init_file_mp3_w =
      _ma_decoder_init_file_mp3_w_ptr
          .asFunction<_dart_ma_decoder_init_file_mp3_w>();

  int ma_decoder_init_file_vorbis_w(
    ffi.Pointer<ffi.Int32> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_vorbis_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_vorbis_w_ptr =
      _lookup<ffi.NativeFunction<_c_ma_decoder_init_file_vorbis_w>>(
          'ma_decoder_init_file_vorbis_w');
  late final _dart_ma_decoder_init_file_vorbis_w
      _ma_decoder_init_file_vorbis_w = _ma_decoder_init_file_vorbis_w_ptr
          .asFunction<_dart_ma_decoder_init_file_vorbis_w>();
}

class ma_context extends ffi.Opaque {}

class ma_device extends ffi.Opaque {}

abstract class ma_stream_format {
  static const int ma_stream_format_pcm = 0;
}

abstract class ma_stream_layout {
  static const int ma_stream_layout_interleaved = 0;
  static const int ma_stream_layout_deinterleaved = 1;
}

abstract class ma_dither_mode {
  static const int ma_dither_mode_none = 0;
  static const int ma_dither_mode_rectangle = 1;
  static const int ma_dither_mode_triangle = 2;
}

abstract class ma_format {
  static const int ma_format_unknown = 0;
  static const int ma_format_u8 = 1;
  static const int ma_format_s16 = 2;
  static const int ma_format_s24 = 3;
  static const int ma_format_s32 = 4;
  static const int ma_format_f32 = 5;
  static const int ma_format_count = 6;
}

abstract class ma_standard_sample_rate {
  static const int ma_standard_sample_rate_48000 = 48000;
  static const int ma_standard_sample_rate_44100 = 44100;
  static const int ma_standard_sample_rate_32000 = 32000;
  static const int ma_standard_sample_rate_24000 = 24000;
  static const int ma_standard_sample_rate_22050 = 22050;
  static const int ma_standard_sample_rate_88200 = 88200;
  static const int ma_standard_sample_rate_96000 = 96000;
  static const int ma_standard_sample_rate_176400 = 176400;
  static const int ma_standard_sample_rate_192000 = 192000;
  static const int ma_standard_sample_rate_16000 = 16000;
  static const int ma_standard_sample_rate_11025 = 11250;
  static const int ma_standard_sample_rate_8000 = 8000;
  static const int ma_standard_sample_rate_352800 = 352800;
  static const int ma_standard_sample_rate_384000 = 384000;
  static const int ma_standard_sample_rate_min = 8000;
  static const int ma_standard_sample_rate_max = 384000;
  static const int ma_standard_sample_rate_count = 14;
}

abstract class ma_channel_mix_mode {
  static const int ma_channel_mix_mode_rectangular = 0;
  static const int ma_channel_mix_mode_simple = 1;
  static const int ma_channel_mix_mode_custom_weights = 2;
  static const int ma_channel_mix_mode_planar_blend = 0;
  static const int ma_channel_mix_mode_default = 0;
}

abstract class ma_standard_channel_map {
  static const int ma_standard_channel_map_microsoft = 0;
  static const int ma_standard_channel_map_alsa = 1;
  static const int ma_standard_channel_map_rfc3551 = 2;
  static const int ma_standard_channel_map_flac = 3;
  static const int ma_standard_channel_map_vorbis = 4;
  static const int ma_standard_channel_map_sound4 = 5;
  static const int ma_standard_channel_map_sndio = 6;
  static const int ma_standard_channel_map_webaudio = 3;
  static const int ma_standard_channel_map_default = 0;
}

abstract class ma_performance_profile {
  static const int ma_performance_profile_low_latency = 0;
  static const int ma_performance_profile_conservative = 1;
}

class ma_allocation_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> onMalloc;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> onRealloc;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> onFree;
}

class ma_lcg extends ffi.Struct {
  @ffi.Int32()
  external int state;
}

class ma_log_callback extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ma_log_callback_proc>> onLog;

  external ffi.Pointer<ffi.Void> pUserData;
}

class ma_log extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ma_log_callback> callbacks;

  @ffi.Uint32()
  external int callbackCount;

  external ma_allocation_callbacks allocationCallbacks;
}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// Biquad Filtering
class ma_biquad_coefficient extends ffi.Union {
  @ffi.Float()
  external double f32;

  @ffi.Int32()
  external int s32;
}

class ma_biquad_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Double()
  external double b0;

  @ffi.Double()
  external double b1;

  @ffi.Double()
  external double b2;

  @ffi.Double()
  external double a0;

  @ffi.Double()
  external double a1;

  @ffi.Double()
  external double a2;
}

class ma_biquad extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  external ma_biquad_coefficient b0;

  external ma_biquad_coefficient b1;

  external ma_biquad_coefficient b2;

  external ma_biquad_coefficient a1;

  external ma_biquad_coefficient a2;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r1;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r2;
}

/// Low-Pass Filtering
class ma_lpf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

class ma_lpf1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  external ma_biquad_coefficient a;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r1;
}

class ma_lpf2 extends ffi.Struct {
  external ma_biquad bq;
}

class ma_lpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Uint32()
  external int order;
}

class ma_lpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Uint32()
  external int lpf1Count;

  @ffi.Uint32()
  external int lpf2Count;

  @ffi.Array.multi([1])
  external ffi.Array<ma_lpf1> lpf1;

  @ffi.Array.multi([4])
  external ffi.Array<ma_lpf2> lpf2;
}

/// High-Pass Filtering
class ma_hpf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

class ma_hpf1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  external ma_biquad_coefficient a;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r1;
}

class ma_hpf2 extends ffi.Struct {
  external ma_biquad bq;
}

class ma_hpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Uint32()
  external int order;
}

class ma_hpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Uint32()
  external int hpf1Count;

  @ffi.Uint32()
  external int hpf2Count;

  @ffi.Array.multi([1])
  external ffi.Array<ma_hpf1> hpf1;

  @ffi.Array.multi([4])
  external ffi.Array<ma_hpf2> hpf2;
}

/// Band-Pass Filtering
class ma_bpf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

class ma_bpf2 extends ffi.Struct {
  external ma_biquad bq;
}

class ma_bpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Uint32()
  external int order;
}

class ma_bpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int bpf2Count;

  @ffi.Array.multi([4])
  external ffi.Array<ma_bpf2> bpf2;
}

/// Notching Filter
class ma_notch_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

class ma_notch2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Peaking EQ Filter
class ma_peak_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

class ma_peak2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Low Shelf Filter
class ma_loshelf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

class ma_loshelf2 extends ffi.Struct {
  external ma_biquad bq;
}

/// High Shelf Filter
class ma_hishelf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

class ma_hishelf2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Resampling
class ma_linear_resampler_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRateIn;

  @ffi.Uint32()
  external int sampleRateOut;

  @ffi.Uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

class unnamedUnion_1 extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Float> f32;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int16> s16;
}

class unnamedUnion_2 extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Float> f32;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int16> s16;
}

class ma_linear_resampler extends ffi.Struct {
  external ma_linear_resampler_config config;

  @ffi.Uint32()
  external int inAdvanceInt;

  @ffi.Uint32()
  external int inAdvanceFrac;

  @ffi.Uint32()
  external int inTimeInt;

  @ffi.Uint32()
  external int inTimeFrac;

  external unnamedUnion_1 x0;

  external unnamedUnion_2 x1;

  external ma_lpf lpf;
}

abstract class ma_resample_algorithm {
  static const int ma_resample_algorithm_linear = 0;
  static const int ma_resample_algorithm_speex = 1;
}

class unnamedStruct_1 extends ffi.Struct {
  @ffi.Uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

class unnamedStruct_2 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class ma_resampler_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRateIn;

  @ffi.Uint32()
  external int sampleRateOut;

  @ffi.Int32()
  external int algorithm;

  external unnamedStruct_1 linear;

  external unnamedStruct_2 speex;
}

class unnamedStruct_3 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pSpeexResamplerState;
}

class unnamedUnion_3 extends ffi.Union {
  external ma_linear_resampler linear;

  external unnamedStruct_3 speex;
}

class ma_resampler extends ffi.Struct {
  external ma_resampler_config config;

  external unnamedUnion_3 state;
}

/// Channel Conversion
class ma_channel_converter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channelsIn;

  @ffi.Uint32()
  external int channelsOut;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMapIn;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMapOut;

  @ffi.Int32()
  external int mixingMode;

  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Float>> weights;
}

class unnamedUnion_4 extends ffi.Union {
  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Float>> f32;

  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Int32>> s16;
}

class ma_channel_converter extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channelsIn;

  @ffi.Uint32()
  external int channelsOut;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMapIn;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMapOut;

  @ffi.Int32()
  external int mixingMode;

  external unnamedUnion_4 weights;

  @ffi.Uint8()
  external int isPassthrough;

  @ffi.Uint8()
  external int isSimpleShuffle;

  @ffi.Uint8()
  external int isSimpleMonoExpansion;

  @ffi.Uint8()
  external int isStereoToMono;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> shuffleTable;
}

class unnamedStruct_5 extends ffi.Struct {
  @ffi.Uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

class unnamedStruct_6 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class unnamedStruct_4 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  @ffi.Uint32()
  external int allowDynamicSampleRate;

  external unnamedStruct_5 linear;

  external unnamedStruct_6 speex;
}

/// Data Conversion
class ma_data_converter_config extends ffi.Struct {
  @ffi.Int32()
  external int formatIn;

  @ffi.Int32()
  external int formatOut;

  @ffi.Uint32()
  external int channelsIn;

  @ffi.Uint32()
  external int channelsOut;

  @ffi.Uint32()
  external int sampleRateIn;

  @ffi.Uint32()
  external int sampleRateOut;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMapIn;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMapOut;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Float>> channelWeights;

  external unnamedStruct_4 resampling;
}

class ma_data_converter extends ffi.Struct {
  external ma_data_converter_config config;

  external ma_channel_converter channelConverter;

  external ma_resampler resampler;

  @ffi.Uint8()
  external int hasPreFormatConversion;

  @ffi.Uint8()
  external int hasPostFormatConversion;

  @ffi.Uint8()
  external int hasChannelConverter;

  @ffi.Uint8()
  external int hasResampler;

  @ffi.Uint8()
  external int isPassthrough;
}

/// Ring Buffer
class ma_rb extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pBuffer;

  @ffi.Uint32()
  external int subbufferSizeInBytes;

  @ffi.Uint32()
  external int subbufferCount;

  @ffi.Uint32()
  external int subbufferStrideInBytes;

  @ffi.Uint32()
  external int encodedReadOffset;

  @ffi.Uint32()
  external int encodedWriteOffset;

  @ffi.Uint8()
  external int ownsBuffer;

  @ffi.Uint8()
  external int clearOnWriteAcquire;

  external ma_allocation_callbacks allocationCallbacks;
}

class ma_pcm_rb extends ffi.Struct {
  external ma_rb rb;

  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;
}

class ma_duplex_rb extends ffi.Struct {
  external ma_pcm_rb rb;
}

class ma_data_source_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> onRead;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_5>> onSeek;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_6>> onMap;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> onUnmap;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_8>> onGetDataFormat;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_9>> onGetCursor;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_10>> onGetLength;
}

class ma_data_source_config extends ffi.Struct {
  external ffi.Pointer<ma_data_source_callbacks> vtable;
}

class ma_data_source_base extends ffi.Struct {
  external ma_data_source_callbacks cb;

  external ffi.Pointer<ma_data_source_callbacks> vtable;

  @ffi.Uint64()
  external int rangeBegInFrames;

  @ffi.Uint64()
  external int rangeEndInFrames;

  @ffi.Uint64()
  external int loopBegInFrames;

  @ffi.Uint64()
  external int loopEndInFrames;

  external ffi.Pointer<ffi.Void> pCurrent;

  external ffi.Pointer<ffi.Void> pNext;

  external ffi.Pointer<ffi.NativeFunction<ma_data_source_get_next_proc>>
      onGetNext;
}

class ma_audio_buffer_ref extends ffi.Struct {
  external ma_data_source_base ds;

  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint64()
  external int cursor;

  @ffi.Uint64()
  external int sizeInFrames;

  external ffi.Pointer<ffi.Void> pData;
}

class ma_audio_buffer_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint64()
  external int sizeInFrames;

  external ffi.Pointer<ffi.Void> pData;

  external ma_allocation_callbacks allocationCallbacks;
}

class ma_audio_buffer extends ffi.Struct {
  external ma_audio_buffer_ref ref;

  external ma_allocation_callbacks allocationCallbacks;

  @ffi.Uint32()
  external int ownsData;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint8> _pExtraData;
}

abstract class ma_seek_origin {
  static const int ma_seek_origin_start = 0;
  static const int ma_seek_origin_current = 1;
  static const int ma_seek_origin_end = 2;
}

class ma_file_info extends ffi.Struct {
  @ffi.Uint64()
  external int sizeInBytes;
}

class ma_vfs_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_11>> onOpen;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_12>> onOpenW;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_13>> onClose;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_14>> onRead;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_15>> onWrite;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_16>> onSeek;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_17>> onTell;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_18>> onInfo;
}

class ma_default_vfs extends ffi.Struct {
  external ma_vfs_callbacks cb;

  external ma_allocation_callbacks allocationCallbacks;
}

abstract class ma_resource_format {
  static const int ma_resource_format_wav = 0;
}

abstract class ma_encoding_format {
  static const int ma_encoding_format_unknown = 0;
  static const int ma_encoding_format_wav = 1;
  static const int ma_encoding_format_flac = 2;
  static const int ma_encoding_format_mp3 = 3;
  static const int ma_encoding_format_vorbis = 4;
}

class ma_decoding_backend_config extends ffi.Struct {
  @ffi.Int32()
  external int preferredFormat;
}

class ma_decoding_backend_vtable extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_19>> onInit;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_20>> onInitFile;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_21>> onInitFileW;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_22>> onInitMemory;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_23>> onUninit;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_24>> onGetChannelMap;
}

class unnamedStruct_7 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pVFS;

  external ffi.Pointer<ffi.Void> file;
}

class unnamedStruct_8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> pData;

  @ffi.Uint64()
  external int dataSize;

  @ffi.Uint64()
  external int currentReadPos;
}

class unnamedUnion_5 extends ffi.Union {
  external unnamedStruct_7 vfs;

  external unnamedStruct_8 memory;
}

class ma_decoder extends ffi.Struct {
  external ma_data_source_base ds;

  external ffi.Pointer<ffi.Void> pBackend;

  external ffi.Pointer<ma_decoding_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead;

  external ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek;

  external ffi.Pointer<ffi.NativeFunction<ma_decoder_tell_proc>> onTell;

  external ffi.Pointer<ffi.Void> pUserData;

  @ffi.Uint64()
  external int readPointerInPCMFrames;

  @ffi.Int32()
  external int outputFormat;

  @ffi.Uint32()
  external int outputChannels;

  @ffi.Uint32()
  external int outputSampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> outputChannelMap;

  external ma_data_converter converter;

  external ma_allocation_callbacks allocationCallbacks;

  external unnamedUnion_5 data;
}

class unnamedStruct_10 extends ffi.Struct {
  @ffi.Uint32()
  external int lpfOrder;
}

class unnamedStruct_11 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class unnamedStruct_9 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external unnamedStruct_10 linear;

  external unnamedStruct_11 speex;
}

class ma_decoder_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int channels;

  @ffi.Uint32()
  external int sampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> channelMap;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int ditherMode;

  external unnamedStruct_9 resampling;

  external ma_allocation_callbacks allocationCallbacks;

  @ffi.Int32()
  external int encodingFormat;

  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomBackendVTables;

  @ffi.Uint32()
  external int customBackendCount;

  external ffi.Pointer<ffi.Void> pCustomBackendUserData;
}

const int MA_VERSION_MAJOR = 0;

const int MA_VERSION_MINOR = 10;

const int MA_VERSION_REVISION = 37;

const String MA_VERSION_STRING = '0.10.37';

const int MA_TRUE = 1;

const int MA_FALSE = 0;

const int MA_SIZE_MAX = 4294967295;

const int MA_SIMD_ALIGNMENT = 64;

const int MA_LOG_LEVEL_DEBUG = 4;

const int MA_LOG_LEVEL_INFO = 3;

const int MA_LOG_LEVEL_WARNING = 2;

const int MA_LOG_LEVEL_ERROR = 1;

const int MA_LOG_LEVEL_VERBOSE = 4;

const int MA_LOG_LEVEL = 1;

const int MA_CHANNEL_NONE = 0;

const int MA_CHANNEL_MONO = 1;

const int MA_CHANNEL_FRONT_LEFT = 2;

const int MA_CHANNEL_FRONT_RIGHT = 3;

const int MA_CHANNEL_FRONT_CENTER = 4;

const int MA_CHANNEL_LFE = 5;

const int MA_CHANNEL_BACK_LEFT = 6;

const int MA_CHANNEL_BACK_RIGHT = 7;

const int MA_CHANNEL_FRONT_LEFT_CENTER = 8;

const int MA_CHANNEL_FRONT_RIGHT_CENTER = 9;

const int MA_CHANNEL_BACK_CENTER = 10;

const int MA_CHANNEL_SIDE_LEFT = 11;

const int MA_CHANNEL_SIDE_RIGHT = 12;

const int MA_CHANNEL_TOP_CENTER = 13;

const int MA_CHANNEL_TOP_FRONT_LEFT = 14;

const int MA_CHANNEL_TOP_FRONT_CENTER = 15;

const int MA_CHANNEL_TOP_FRONT_RIGHT = 16;

const int MA_CHANNEL_TOP_BACK_LEFT = 17;

const int MA_CHANNEL_TOP_BACK_CENTER = 18;

const int MA_CHANNEL_TOP_BACK_RIGHT = 19;

const int MA_CHANNEL_AUX_0 = 20;

const int MA_CHANNEL_AUX_1 = 21;

const int MA_CHANNEL_AUX_2 = 22;

const int MA_CHANNEL_AUX_3 = 23;

const int MA_CHANNEL_AUX_4 = 24;

const int MA_CHANNEL_AUX_5 = 25;

const int MA_CHANNEL_AUX_6 = 26;

const int MA_CHANNEL_AUX_7 = 27;

const int MA_CHANNEL_AUX_8 = 28;

const int MA_CHANNEL_AUX_9 = 29;

const int MA_CHANNEL_AUX_10 = 30;

const int MA_CHANNEL_AUX_11 = 31;

const int MA_CHANNEL_AUX_12 = 32;

const int MA_CHANNEL_AUX_13 = 33;

const int MA_CHANNEL_AUX_14 = 34;

const int MA_CHANNEL_AUX_15 = 35;

const int MA_CHANNEL_AUX_16 = 36;

const int MA_CHANNEL_AUX_17 = 37;

const int MA_CHANNEL_AUX_18 = 38;

const int MA_CHANNEL_AUX_19 = 39;

const int MA_CHANNEL_AUX_20 = 40;

const int MA_CHANNEL_AUX_21 = 41;

const int MA_CHANNEL_AUX_22 = 42;

const int MA_CHANNEL_AUX_23 = 43;

const int MA_CHANNEL_AUX_24 = 44;

const int MA_CHANNEL_AUX_25 = 45;

const int MA_CHANNEL_AUX_26 = 46;

const int MA_CHANNEL_AUX_27 = 47;

const int MA_CHANNEL_AUX_28 = 48;

const int MA_CHANNEL_AUX_29 = 49;

const int MA_CHANNEL_AUX_30 = 50;

const int MA_CHANNEL_AUX_31 = 51;

const int MA_CHANNEL_LEFT = 2;

const int MA_CHANNEL_RIGHT = 3;

const int MA_CHANNEL_POSITION_COUNT = 52;

const int MA_SUCCESS = 0;

const int MA_ERROR = -1;

const int MA_INVALID_ARGS = -2;

const int MA_INVALID_OPERATION = -3;

const int MA_OUT_OF_MEMORY = -4;

const int MA_OUT_OF_RANGE = -5;

const int MA_ACCESS_DENIED = -6;

const int MA_DOES_NOT_EXIST = -7;

const int MA_ALREADY_EXISTS = -8;

const int MA_TOO_MANY_OPEN_FILES = -9;

const int MA_INVALID_FILE = -10;

const int MA_TOO_BIG = -11;

const int MA_PATH_TOO_LONG = -12;

const int MA_NAME_TOO_LONG = -13;

const int MA_NOT_DIRECTORY = -14;

const int MA_IS_DIRECTORY = -15;

const int MA_DIRECTORY_NOT_EMPTY = -16;

const int MA_AT_END = -17;

const int MA_NO_SPACE = -18;

const int MA_BUSY = -19;

const int MA_IO_ERROR = -20;

const int MA_INTERRUPT = -21;

const int MA_UNAVAILABLE = -22;

const int MA_ALREADY_IN_USE = -23;

const int MA_BAD_ADDRESS = -24;

const int MA_BAD_SEEK = -25;

const int MA_BAD_PIPE = -26;

const int MA_DEADLOCK = -27;

const int MA_TOO_MANY_LINKS = -28;

const int MA_NOT_IMPLEMENTED = -29;

const int MA_NO_MESSAGE = -30;

const int MA_BAD_MESSAGE = -31;

const int MA_NO_DATA_AVAILABLE = -32;

const int MA_INVALID_DATA = -33;

const int MA_TIMEOUT = -34;

const int MA_NO_NETWORK = -35;

const int MA_NOT_UNIQUE = -36;

const int MA_NOT_SOCKET = -37;

const int MA_NO_ADDRESS = -38;

const int MA_BAD_PROTOCOL = -39;

const int MA_PROTOCOL_UNAVAILABLE = -40;

const int MA_PROTOCOL_NOT_SUPPORTED = -41;

const int MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;

const int MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;

const int MA_SOCKET_NOT_SUPPORTED = -44;

const int MA_CONNECTION_RESET = -45;

const int MA_ALREADY_CONNECTED = -46;

const int MA_NOT_CONNECTED = -47;

const int MA_CONNECTION_REFUSED = -48;

const int MA_NO_HOST = -49;

const int MA_IN_PROGRESS = -50;

const int MA_CANCELLED = -51;

const int MA_MEMORY_ALREADY_MAPPED = -52;

const int MA_FORMAT_NOT_SUPPORTED = -100;

const int MA_DEVICE_TYPE_NOT_SUPPORTED = -101;

const int MA_SHARE_MODE_NOT_SUPPORTED = -102;

const int MA_NO_BACKEND = -103;

const int MA_NO_DEVICE = -104;

const int MA_API_NOT_FOUND = -105;

const int MA_INVALID_DEVICE_CONFIG = -106;

const int MA_LOOP = -107;

const int MA_DEVICE_NOT_INITIALIZED = -200;

const int MA_DEVICE_ALREADY_INITIALIZED = -201;

const int MA_DEVICE_NOT_STARTED = -202;

const int MA_DEVICE_NOT_STOPPED = -203;

const int MA_FAILED_TO_INIT_BACKEND = -300;

const int MA_FAILED_TO_OPEN_BACKEND_DEVICE = -301;

const int MA_FAILED_TO_START_BACKEND_DEVICE = -302;

const int MA_FAILED_TO_STOP_BACKEND_DEVICE = -303;

const int MA_MIN_CHANNELS = 1;

const int MA_MAX_CHANNELS = 32;

const int MA_MAX_FILTER_ORDER = 8;

const int MA_MIN_SAMPLE_RATE = 8000;

const int MA_MAX_SAMPLE_RATE = 384000;

const int MA_MAX_LOG_CALLBACKS = 4;

const int MA_CHANNEL_INDEX_NULL = 255;

const int MA_OPEN_MODE_READ = 1;

const int MA_OPEN_MODE_WRITE = 2;

typedef _c_ma_version = ffi.Void Function(
  ffi.Pointer<ffi.Uint32> pMajor,
  ffi.Pointer<ffi.Uint32> pMinor,
  ffi.Pointer<ffi.Uint32> pRevision,
);

typedef _dart_ma_version = void Function(
  ffi.Pointer<ffi.Uint32> pMajor,
  ffi.Pointer<ffi.Uint32> pMinor,
  ffi.Pointer<ffi.Uint32> pRevision,
);

typedef _c_ma_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_ma_version_string = ffi.Pointer<ffi.Int8> Function();

typedef ma_log_callback_proc = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_ma_log_callback_init = ma_log_callback Function(
  ffi.Pointer<ffi.NativeFunction<ma_log_callback_proc>> onLog,
  ffi.Pointer<ffi.Void> pUserData,
);

typedef _dart_ma_log_callback_init = ma_log_callback Function(
  ffi.Pointer<ffi.NativeFunction<ma_log_callback_proc>> onLog,
  ffi.Pointer<ffi.Void> pUserData,
);

typedef _c_ma_log_init = ffi.Int32 Function(
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_log> pLog,
);

typedef _dart_ma_log_init = int Function(
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_log> pLog,
);

typedef _c_ma_log_uninit = ffi.Void Function(
  ffi.Pointer<ma_log> pLog,
);

typedef _dart_ma_log_uninit = void Function(
  ffi.Pointer<ma_log> pLog,
);

typedef _c_ma_log_register_callback = ffi.Int32 Function(
  ffi.Pointer<ma_log> pLog,
  ma_log_callback callback,
);

typedef _dart_ma_log_register_callback = int Function(
  ffi.Pointer<ma_log> pLog,
  ma_log_callback callback,
);

typedef _c_ma_log_unregister_callback = ffi.Int32 Function(
  ffi.Pointer<ma_log> pLog,
  ma_log_callback callback,
);

typedef _dart_ma_log_unregister_callback = int Function(
  ffi.Pointer<ma_log> pLog,
  ma_log_callback callback,
);

typedef _c_ma_log_post = ffi.Int32 Function(
  ffi.Pointer<ma_log> pLog,
  ffi.Uint32 level,
  ffi.Pointer<ffi.Int8> pMessage,
);

typedef _dart_ma_log_post = int Function(
  ffi.Pointer<ma_log> pLog,
  int level,
  ffi.Pointer<ffi.Int8> pMessage,
);

typedef _c_ma_log_postv = ffi.Int32 Function(
  ffi.Pointer<ma_log> pLog,
  ffi.Uint32 level,
  ffi.Pointer<ffi.Int8> pFormat,
  ffi.Pointer<__va_list_tag> args,
);

typedef _dart_ma_log_postv = int Function(
  ffi.Pointer<ma_log> pLog,
  int level,
  ffi.Pointer<ffi.Int8> pFormat,
  ffi.Pointer<__va_list_tag> args,
);

typedef _c_ma_log_postf = ffi.Int32 Function(
  ffi.Pointer<ma_log> pLog,
  ffi.Uint32 level,
  ffi.Pointer<ffi.Int8> pFormat,
);

typedef _dart_ma_log_postf = int Function(
  ffi.Pointer<ma_log> pLog,
  int level,
  ffi.Pointer<ffi.Int8> pFormat,
);

typedef _c_ma_biquad_config_init = ma_biquad_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Double b0,
  ffi.Double b1,
  ffi.Double b2,
  ffi.Double a0,
  ffi.Double a1,
  ffi.Double a2,
);

typedef _dart_ma_biquad_config_init = ma_biquad_config Function(
  int format,
  int channels,
  double b0,
  double b1,
  double b2,
  double a0,
  double a1,
  double a2,
);

typedef _c_ma_biquad_init = ffi.Int32 Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _dart_ma_biquad_init = int Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _c_ma_biquad_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _dart_ma_biquad_reinit = int Function(
  ffi.Pointer<ma_biquad_config> pConfig,
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _c_ma_biquad_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_biquad> pBQ,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_biquad_process_pcm_frames = int Function(
  ffi.Pointer<ma_biquad> pBQ,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_biquad_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _dart_ma_biquad_get_latency = int Function(
  ffi.Pointer<ma_biquad> pBQ,
);

typedef _c_ma_lpf1_config_init = ma_lpf2_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
);

typedef _dart_ma_lpf1_config_init = ma_lpf2_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
);

typedef _c_ma_lpf2_config_init = ma_lpf2_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
  ffi.Double q,
);

typedef _dart_ma_lpf2_config_init = ma_lpf2_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
  double q,
);

typedef _c_ma_lpf1_init = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _dart_ma_lpf1_init = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _c_ma_lpf1_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _dart_ma_lpf1_reinit = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _c_ma_lpf1_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_lpf1> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_lpf1_process_pcm_frames = int Function(
  ffi.Pointer<ma_lpf1> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_lpf1_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _dart_ma_lpf1_get_latency = int Function(
  ffi.Pointer<ma_lpf1> pLPF,
);

typedef _c_ma_lpf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _dart_ma_lpf2_init = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _c_ma_lpf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _dart_ma_lpf2_reinit = int Function(
  ffi.Pointer<ma_lpf2_config> pConfig,
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _c_ma_lpf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_lpf2> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_lpf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_lpf2> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_lpf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _dart_ma_lpf2_get_latency = int Function(
  ffi.Pointer<ma_lpf2> pLPF,
);

typedef _c_ma_lpf_config_init = ma_lpf_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
  ffi.Uint32 order,
);

typedef _dart_ma_lpf_config_init = ma_lpf_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
  int order,
);

typedef _c_ma_lpf_init = ffi.Int32 Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _dart_ma_lpf_init = int Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _c_ma_lpf_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _dart_ma_lpf_reinit = int Function(
  ffi.Pointer<ma_lpf_config> pConfig,
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _c_ma_lpf_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_lpf> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_lpf_process_pcm_frames = int Function(
  ffi.Pointer<ma_lpf> pLPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_lpf_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _dart_ma_lpf_get_latency = int Function(
  ffi.Pointer<ma_lpf> pLPF,
);

typedef _c_ma_hpf1_config_init = ma_hpf2_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
);

typedef _dart_ma_hpf1_config_init = ma_hpf2_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
);

typedef _c_ma_hpf2_config_init = ma_hpf2_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
  ffi.Double q,
);

typedef _dart_ma_hpf2_config_init = ma_hpf2_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
  double q,
);

typedef _c_ma_hpf1_init = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _dart_ma_hpf1_init = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _c_ma_hpf1_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _dart_ma_hpf1_reinit = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _c_ma_hpf1_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hpf1> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hpf1_process_pcm_frames = int Function(
  ffi.Pointer<ma_hpf1> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hpf1_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _dart_ma_hpf1_get_latency = int Function(
  ffi.Pointer<ma_hpf1> pHPF,
);

typedef _c_ma_hpf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _dart_ma_hpf2_init = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _c_ma_hpf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _dart_ma_hpf2_reinit = int Function(
  ffi.Pointer<ma_hpf2_config> pConfig,
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _c_ma_hpf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hpf2> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hpf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_hpf2> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hpf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _dart_ma_hpf2_get_latency = int Function(
  ffi.Pointer<ma_hpf2> pHPF,
);

typedef _c_ma_hpf_config_init = ma_hpf_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
  ffi.Uint32 order,
);

typedef _dart_ma_hpf_config_init = ma_hpf_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
  int order,
);

typedef _c_ma_hpf_init = ffi.Int32 Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _dart_ma_hpf_init = int Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _c_ma_hpf_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _dart_ma_hpf_reinit = int Function(
  ffi.Pointer<ma_hpf_config> pConfig,
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _c_ma_hpf_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hpf> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hpf_process_pcm_frames = int Function(
  ffi.Pointer<ma_hpf> pHPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hpf_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _dart_ma_hpf_get_latency = int Function(
  ffi.Pointer<ma_hpf> pHPF,
);

typedef _c_ma_bpf2_config_init = ma_bpf2_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
  ffi.Double q,
);

typedef _dart_ma_bpf2_config_init = ma_bpf2_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
  double q,
);

typedef _c_ma_bpf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _dart_ma_bpf2_init = int Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _c_ma_bpf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _dart_ma_bpf2_reinit = int Function(
  ffi.Pointer<ma_bpf2_config> pConfig,
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _c_ma_bpf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_bpf2> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_bpf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_bpf2> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_bpf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _dart_ma_bpf2_get_latency = int Function(
  ffi.Pointer<ma_bpf2> pBPF,
);

typedef _c_ma_bpf_config_init = ma_bpf_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double cutoffFrequency,
  ffi.Uint32 order,
);

typedef _dart_ma_bpf_config_init = ma_bpf_config Function(
  int format,
  int channels,
  int sampleRate,
  double cutoffFrequency,
  int order,
);

typedef _c_ma_bpf_init = ffi.Int32 Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _dart_ma_bpf_init = int Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _c_ma_bpf_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _dart_ma_bpf_reinit = int Function(
  ffi.Pointer<ma_bpf_config> pConfig,
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _c_ma_bpf_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_bpf> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_bpf_process_pcm_frames = int Function(
  ffi.Pointer<ma_bpf> pBPF,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_bpf_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _dart_ma_bpf_get_latency = int Function(
  ffi.Pointer<ma_bpf> pBPF,
);

typedef _c_ma_notch2_config_init = ma_notch_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double q,
  ffi.Double frequency,
);

typedef _dart_ma_notch2_config_init = ma_notch_config Function(
  int format,
  int channels,
  int sampleRate,
  double q,
  double frequency,
);

typedef _c_ma_notch2_init = ffi.Int32 Function(
  ffi.Pointer<ma_notch_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _dart_ma_notch2_init = int Function(
  ffi.Pointer<ma_notch_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _c_ma_notch2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_notch_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _dart_ma_notch2_reinit = int Function(
  ffi.Pointer<ma_notch_config> pConfig,
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _c_ma_notch2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_notch2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_notch2_process_pcm_frames = int Function(
  ffi.Pointer<ma_notch2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_notch2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _dart_ma_notch2_get_latency = int Function(
  ffi.Pointer<ma_notch2> pFilter,
);

typedef _c_ma_peak2_config_init = ma_peak_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double gainDB,
  ffi.Double q,
  ffi.Double frequency,
);

typedef _dart_ma_peak2_config_init = ma_peak_config Function(
  int format,
  int channels,
  int sampleRate,
  double gainDB,
  double q,
  double frequency,
);

typedef _c_ma_peak2_init = ffi.Int32 Function(
  ffi.Pointer<ma_peak_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _dart_ma_peak2_init = int Function(
  ffi.Pointer<ma_peak_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _c_ma_peak2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_peak_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _dart_ma_peak2_reinit = int Function(
  ffi.Pointer<ma_peak_config> pConfig,
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _c_ma_peak2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_peak2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_peak2_process_pcm_frames = int Function(
  ffi.Pointer<ma_peak2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_peak2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _dart_ma_peak2_get_latency = int Function(
  ffi.Pointer<ma_peak2> pFilter,
);

typedef _c_ma_loshelf2_config_init = ma_loshelf_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double gainDB,
  ffi.Double shelfSlope,
  ffi.Double frequency,
);

typedef _dart_ma_loshelf2_config_init = ma_loshelf_config Function(
  int format,
  int channels,
  int sampleRate,
  double gainDB,
  double shelfSlope,
  double frequency,
);

typedef _c_ma_loshelf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_loshelf_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _dart_ma_loshelf2_init = int Function(
  ffi.Pointer<ma_loshelf_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _c_ma_loshelf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_loshelf_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _dart_ma_loshelf2_reinit = int Function(
  ffi.Pointer<ma_loshelf_config> pConfig,
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _c_ma_loshelf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_loshelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_loshelf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_loshelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_loshelf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _dart_ma_loshelf2_get_latency = int Function(
  ffi.Pointer<ma_loshelf2> pFilter,
);

typedef _c_ma_hishelf2_config_init = ma_hishelf_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRate,
  ffi.Double gainDB,
  ffi.Double shelfSlope,
  ffi.Double frequency,
);

typedef _dart_ma_hishelf2_config_init = ma_hishelf_config Function(
  int format,
  int channels,
  int sampleRate,
  double gainDB,
  double shelfSlope,
  double frequency,
);

typedef _c_ma_hishelf2_init = ffi.Int32 Function(
  ffi.Pointer<ma_hishelf_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _dart_ma_hishelf2_init = int Function(
  ffi.Pointer<ma_hishelf_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _c_ma_hishelf2_reinit = ffi.Int32 Function(
  ffi.Pointer<ma_hishelf_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _dart_ma_hishelf2_reinit = int Function(
  ffi.Pointer<ma_hishelf_config> pConfig,
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _c_ma_hishelf2_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_hishelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_hishelf2_process_pcm_frames = int Function(
  ffi.Pointer<ma_hishelf2> pFilter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_hishelf2_get_latency = ffi.Uint32 Function(
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _dart_ma_hishelf2_get_latency = int Function(
  ffi.Pointer<ma_hishelf2> pFilter,
);

typedef _c_ma_linear_resampler_config_init = ma_linear_resampler_config
    Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_linear_resampler_config_init = ma_linear_resampler_config
    Function(
  int format,
  int channels,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_linear_resampler_init = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler_config> pConfig,
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_init = int Function(
  ffi.Pointer<ma_linear_resampler_config> pConfig,
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_linear_resampler_uninit = ffi.Void Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_uninit = void Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_linear_resampler_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _dart_ma_linear_resampler_process_pcm_frames = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _c_ma_linear_resampler_set_rate = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_linear_resampler_set_rate = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_linear_resampler_set_rate_ratio = ffi.Int32 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Float ratioInOut,
);

typedef _dart_ma_linear_resampler_set_rate_ratio = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  double ratioInOut,
);

typedef _c_ma_linear_resampler_get_required_input_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Uint64 outputFrameCount,
);

typedef _dart_ma_linear_resampler_get_required_input_frame_count = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  int outputFrameCount,
);

typedef _c_ma_linear_resampler_get_expected_output_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  ffi.Uint64 inputFrameCount,
);

typedef _dart_ma_linear_resampler_get_expected_output_frame_count = int
    Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
  int inputFrameCount,
);

typedef _c_ma_linear_resampler_get_input_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_get_input_latency = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_linear_resampler_get_output_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _dart_ma_linear_resampler_get_output_latency = int Function(
  ffi.Pointer<ma_linear_resampler> pResampler,
);

typedef _c_ma_resampler_config_init = ma_resampler_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
  ffi.Int32 algorithm,
);

typedef _dart_ma_resampler_config_init = ma_resampler_config Function(
  int format,
  int channels,
  int sampleRateIn,
  int sampleRateOut,
  int algorithm,
);

typedef _c_ma_resampler_init = ffi.Int32 Function(
  ffi.Pointer<ma_resampler_config> pConfig,
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_init = int Function(
  ffi.Pointer<ma_resampler_config> pConfig,
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_resampler_uninit = ffi.Void Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_uninit = void Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_resampler_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _dart_ma_resampler_process_pcm_frames = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _c_ma_resampler_set_rate = ffi.Int32 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_resampler_set_rate = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_resampler_set_rate_ratio = ffi.Int32 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Float ratio,
);

typedef _dart_ma_resampler_set_rate_ratio = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  double ratio,
);

typedef _c_ma_resampler_get_required_input_frame_count = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Uint64 outputFrameCount,
);

typedef _dart_ma_resampler_get_required_input_frame_count = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  int outputFrameCount,
);

typedef _c_ma_resampler_get_expected_output_frame_count = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
  ffi.Uint64 inputFrameCount,
);

typedef _dart_ma_resampler_get_expected_output_frame_count = int Function(
  ffi.Pointer<ma_resampler> pResampler,
  int inputFrameCount,
);

typedef _c_ma_resampler_get_input_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_get_input_latency = int Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_resampler_get_output_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _dart_ma_resampler_get_output_latency = int Function(
  ffi.Pointer<ma_resampler> pResampler,
);

typedef _c_ma_channel_converter_config_init = ma_channel_converter_config
    Function(
  ffi.Int32 format,
  ffi.Uint32 channelsIn,
  ffi.Pointer<ffi.Uint8> pChannelMapIn,
  ffi.Uint32 channelsOut,
  ffi.Pointer<ffi.Uint8> pChannelMapOut,
  ffi.Int32 mixingMode,
);

typedef _dart_ma_channel_converter_config_init = ma_channel_converter_config
    Function(
  int format,
  int channelsIn,
  ffi.Pointer<ffi.Uint8> pChannelMapIn,
  int channelsOut,
  ffi.Pointer<ffi.Uint8> pChannelMapOut,
  int mixingMode,
);

typedef _c_ma_channel_converter_init = ffi.Int32 Function(
  ffi.Pointer<ma_channel_converter_config> pConfig,
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _dart_ma_channel_converter_init = int Function(
  ffi.Pointer<ma_channel_converter_config> pConfig,
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _c_ma_channel_converter_uninit = ffi.Void Function(
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _dart_ma_channel_converter_uninit = void Function(
  ffi.Pointer<ma_channel_converter> pConverter,
);

typedef _c_ma_channel_converter_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_channel_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_channel_converter_process_pcm_frames = int Function(
  ffi.Pointer<ma_channel_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
);

typedef _c_ma_data_converter_config_init_default = ma_data_converter_config
    Function();

typedef _dart_ma_data_converter_config_init_default = ma_data_converter_config
    Function();

typedef _c_ma_data_converter_config_init = ma_data_converter_config Function(
  ffi.Int32 formatIn,
  ffi.Int32 formatOut,
  ffi.Uint32 channelsIn,
  ffi.Uint32 channelsOut,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_data_converter_config_init = ma_data_converter_config Function(
  int formatIn,
  int formatOut,
  int channelsIn,
  int channelsOut,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_data_converter_init = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter_config> pConfig,
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_init = int Function(
  ffi.Pointer<ma_data_converter_config> pConfig,
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_data_converter_uninit = ffi.Void Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_uninit = void Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_data_converter_process_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _dart_ma_data_converter_process_pcm_frames = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Pointer<ffi.Uint64> pFrameCountIn,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
);

typedef _c_ma_data_converter_set_rate = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Uint32 sampleRateIn,
  ffi.Uint32 sampleRateOut,
);

typedef _dart_ma_data_converter_set_rate = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  int sampleRateIn,
  int sampleRateOut,
);

typedef _c_ma_data_converter_set_rate_ratio = ffi.Int32 Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Float ratioInOut,
);

typedef _dart_ma_data_converter_set_rate_ratio = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  double ratioInOut,
);

typedef _c_ma_data_converter_get_required_input_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Uint64 outputFrameCount,
);

typedef _dart_ma_data_converter_get_required_input_frame_count = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  int outputFrameCount,
);

typedef _c_ma_data_converter_get_expected_output_frame_count = ffi.Uint64
    Function(
  ffi.Pointer<ma_data_converter> pConverter,
  ffi.Uint64 inputFrameCount,
);

typedef _dart_ma_data_converter_get_expected_output_frame_count = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
  int inputFrameCount,
);

typedef _c_ma_data_converter_get_input_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_get_input_latency = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_data_converter_get_output_latency = ffi.Uint64 Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _dart_ma_data_converter_get_output_latency = int Function(
  ffi.Pointer<ma_data_converter> pConverter,
);

typedef _c_ma_pcm_u8_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_u8_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_u8_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_u8_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_u8_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s16_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s16_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s24_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s24_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_s32_to_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_s32_to_f32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_u8 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_s16 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_s24 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_f32_to_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 count,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_f32_to_s32 = void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Pointer<ffi.Void> pIn,
  int count,
  int ditherMode,
);

typedef _c_ma_pcm_convert = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Int32 formatOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Int32 formatIn,
  ffi.Uint64 sampleCount,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_pcm_convert = void Function(
  ffi.Pointer<ffi.Void> pOut,
  int formatOut,
  ffi.Pointer<ffi.Void> pIn,
  int formatIn,
  int sampleCount,
  int ditherMode,
);

typedef _c_ma_convert_pcm_frames_format = ffi.Void Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Int32 formatOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Int32 formatIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Int32 ditherMode,
);

typedef _dart_ma_convert_pcm_frames_format = void Function(
  ffi.Pointer<ffi.Void> pOut,
  int formatOut,
  ffi.Pointer<ffi.Void> pIn,
  int formatIn,
  int frameCount,
  int channels,
  int ditherMode,
);

typedef _c_ma_deinterleave_pcm_frames = ffi.Void Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
);

typedef _dart_ma_deinterleave_pcm_frames = void Function(
  int format,
  int channels,
  int frameCount,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
);

typedef _c_ma_interleave_pcm_frames = ffi.Void Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
);

typedef _dart_ma_interleave_pcm_frames = void Function(
  int format,
  int channels,
  int frameCount,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
);

typedef _c_ma_channel_map_get_default_channel = ffi.Uint8 Function(
  ffi.Uint32 channelCount,
  ffi.Uint32 channelIndex,
);

typedef _dart_ma_channel_map_get_default_channel = int Function(
  int channelCount,
  int channelIndex,
);

typedef _c_ma_channel_map_get_channel = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8> pChannelMap,
  ffi.Uint32 channelCount,
  ffi.Uint32 channelIndex,
);

typedef _dart_ma_channel_map_get_channel = int Function(
  ffi.Pointer<ffi.Uint8> pChannelMap,
  int channelCount,
  int channelIndex,
);

typedef _c_ma_channel_map_init_blank = ffi.Void Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_channel_map_init_blank = void Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_get_standard_channel_map = ffi.Void Function(
  ffi.Int32 standardChannelMap,
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_get_standard_channel_map = void Function(
  int standardChannelMap,
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_channel_map_copy = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  ffi.Uint32 channels,
);

typedef _dart_ma_channel_map_copy = void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  int channels,
);

typedef _c_ma_channel_map_copy_or_default = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  ffi.Uint32 channels,
);

typedef _dart_ma_channel_map_copy_or_default = void Function(
  ffi.Pointer<ffi.Uint8> pOut,
  ffi.Pointer<ffi.Uint8> pIn,
  int channels,
);

typedef _c_ma_channel_map_valid = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_channel_map_valid = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_channel_map_equal = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMapA,
  ffi.Pointer<ffi.Uint8> pChannelMapB,
);

typedef _dart_ma_channel_map_equal = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMapA,
  ffi.Pointer<ffi.Uint8> pChannelMapB,
);

typedef _c_ma_channel_map_blank = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _dart_ma_channel_map_blank = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
);

typedef _c_ma_channel_map_contains_channel_position = ffi.Uint32 Function(
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
  ffi.Uint8 channelPosition,
);

typedef _dart_ma_channel_map_contains_channel_position = int Function(
  int channels,
  ffi.Pointer<ffi.Uint8> pChannelMap,
  int channelPosition,
);

typedef _c_ma_convert_frames = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Uint64 frameCountOut,
  ffi.Int32 formatOut,
  ffi.Uint32 channelsOut,
  ffi.Uint32 sampleRateOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 frameCountIn,
  ffi.Int32 formatIn,
  ffi.Uint32 channelsIn,
  ffi.Uint32 sampleRateIn,
);

typedef _dart_ma_convert_frames = int Function(
  ffi.Pointer<ffi.Void> pOut,
  int frameCountOut,
  int formatOut,
  int channelsOut,
  int sampleRateOut,
  ffi.Pointer<ffi.Void> pIn,
  int frameCountIn,
  int formatIn,
  int channelsIn,
  int sampleRateIn,
);

typedef _c_ma_convert_frames_ex = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> pOut,
  ffi.Uint64 frameCountOut,
  ffi.Pointer<ffi.Void> pIn,
  ffi.Uint64 frameCountIn,
  ffi.Pointer<ma_data_converter_config> pConfig,
);

typedef _dart_ma_convert_frames_ex = int Function(
  ffi.Pointer<ffi.Void> pOut,
  int frameCountOut,
  ffi.Pointer<ffi.Void> pIn,
  int frameCountIn,
  ffi.Pointer<ma_data_converter_config> pConfig,
);

typedef _c_ma_rb_init_ex = ffi.Int32 Function(
  ffi.Uint64 subbufferSizeInBytes,
  ffi.Uint64 subbufferCount,
  ffi.Uint64 subbufferStrideInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_init_ex = int Function(
  int subbufferSizeInBytes,
  int subbufferCount,
  int subbufferStrideInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_init = ffi.Int32 Function(
  ffi.Uint64 bufferSizeInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_init = int Function(
  int bufferSizeInBytes,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_uninit = ffi.Void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_uninit = void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_reset = ffi.Void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_reset = void Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_acquire_read = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_rb_acquire_read = int Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_rb_commit_read = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_rb_commit_read = int Function(
  ffi.Pointer<ma_rb> pRB,
  int sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_rb_acquire_write = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_rb_acquire_write = int Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Pointer<ffi.Uint64> pSizeInBytes,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_rb_commit_write = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_rb_commit_write = int Function(
  ffi.Pointer<ma_rb> pRB,
  int sizeInBytes,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_rb_seek_read = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 offsetInBytes,
);

typedef _dart_ma_rb_seek_read = int Function(
  ffi.Pointer<ma_rb> pRB,
  int offsetInBytes,
);

typedef _c_ma_rb_seek_write = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 offsetInBytes,
);

typedef _dart_ma_rb_seek_write = int Function(
  ffi.Pointer<ma_rb> pRB,
  int offsetInBytes,
);

typedef _c_ma_rb_pointer_distance = ffi.Int32 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_pointer_distance = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_available_read = ffi.Uint32 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_available_read = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_available_write = ffi.Uint32 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_available_write = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_get_subbuffer_size = ffi.Uint64 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_get_subbuffer_size = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_get_subbuffer_stride = ffi.Uint64 Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _dart_ma_rb_get_subbuffer_stride = int Function(
  ffi.Pointer<ma_rb> pRB,
);

typedef _c_ma_rb_get_subbuffer_offset = ffi.Uint64 Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 subbufferIndex,
);

typedef _dart_ma_rb_get_subbuffer_offset = int Function(
  ffi.Pointer<ma_rb> pRB,
  int subbufferIndex,
);

typedef _c_ma_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_rb> pRB,
  ffi.Uint64 subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _dart_ma_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_rb> pRB,
  int subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _c_ma_pcm_rb_init_ex = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 subbufferSizeInFrames,
  ffi.Uint32 subbufferCount,
  ffi.Uint32 subbufferStrideInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_init_ex = int Function(
  int format,
  int channels,
  int subbufferSizeInFrames,
  int subbufferCount,
  int subbufferStrideInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_init = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint32 bufferSizeInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_init = int Function(
  int format,
  int channels,
  int bufferSizeInFrames,
  ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_uninit = ffi.Void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_uninit = void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_reset = ffi.Void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_reset = void Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_acquire_read = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_pcm_rb_acquire_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_pcm_rb_commit_read = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_pcm_rb_commit_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_pcm_rb_acquire_write = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _dart_ma_pcm_rb_acquire_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Pointer<ffi.Uint32> pSizeInFrames,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
);

typedef _c_ma_pcm_rb_commit_write = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _dart_ma_pcm_rb_commit_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int sizeInFrames,
  ffi.Pointer<ffi.Void> pBufferOut,
);

typedef _c_ma_pcm_rb_seek_read = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 offsetInFrames,
);

typedef _dart_ma_pcm_rb_seek_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int offsetInFrames,
);

typedef _c_ma_pcm_rb_seek_write = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 offsetInFrames,
);

typedef _dart_ma_pcm_rb_seek_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int offsetInFrames,
);

typedef _c_ma_pcm_rb_pointer_distance = ffi.Int32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_pointer_distance = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_available_read = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_available_read = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_available_write = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_available_write = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_get_subbuffer_size = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_get_subbuffer_size = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_get_subbuffer_stride = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _dart_ma_pcm_rb_get_subbuffer_stride = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
);

typedef _c_ma_pcm_rb_get_subbuffer_offset = ffi.Uint32 Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 subbufferIndex,
);

typedef _dart_ma_pcm_rb_get_subbuffer_offset = int Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int subbufferIndex,
);

typedef _c_ma_pcm_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  ffi.Uint32 subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _dart_ma_pcm_rb_get_subbuffer_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ma_pcm_rb> pRB,
  int subbufferIndex,
  ffi.Pointer<ffi.Void> pBuffer,
);

typedef _c_ma_duplex_rb_init = ffi.Int32 Function(
  ffi.Int32 captureFormat,
  ffi.Uint32 captureChannels,
  ffi.Uint32 sampleRate,
  ffi.Uint32 captureInternalSampleRate,
  ffi.Uint32 captureInternalPeriodSizeInFrames,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _dart_ma_duplex_rb_init = int Function(
  int captureFormat,
  int captureChannels,
  int sampleRate,
  int captureInternalSampleRate,
  int captureInternalPeriodSizeInFrames,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _c_ma_duplex_rb_uninit = ffi.Int32 Function(
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _dart_ma_duplex_rb_uninit = int Function(
  ffi.Pointer<ma_duplex_rb> pRB,
);

typedef _c_ma_result_description = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 result,
);

typedef _dart_ma_result_description = ffi.Pointer<ffi.Int8> Function(
  int result,
);

typedef _c_ma_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_malloc = ffi.Pointer<ffi.Void> Function(
  int sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  int sz,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_free = void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_aligned_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 sz,
  ffi.Uint64 alignment,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_aligned_malloc = ffi.Pointer<ffi.Void> Function(
  int sz,
  int alignment,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_aligned_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_aligned_free = void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_get_format_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 format,
);

typedef _dart_ma_get_format_name = ffi.Pointer<ffi.Int8> Function(
  int format,
);

typedef _c_ma_blend_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pOut,
  ffi.Pointer<ffi.Float> pInA,
  ffi.Pointer<ffi.Float> pInB,
  ffi.Float factor,
  ffi.Uint32 channels,
);

typedef _dart_ma_blend_f32 = void Function(
  ffi.Pointer<ffi.Float> pOut,
  ffi.Pointer<ffi.Float> pInA,
  ffi.Pointer<ffi.Float> pInB,
  double factor,
  int channels,
);

typedef _c_ma_get_bytes_per_sample = ffi.Uint32 Function(
  ffi.Int32 format,
);

typedef _dart_ma_get_bytes_per_sample = int Function(
  int format,
);

typedef _c_ma_log_level_to_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 logLevel,
);

typedef _dart_ma_log_level_to_string = ffi.Pointer<ffi.Int8> Function(
  int logLevel,
);

typedef _c_ma_scale_buffer_size = ffi.Uint32 Function(
  ffi.Uint32 baseBufferSize,
  ffi.Float scale,
);

typedef _dart_ma_scale_buffer_size = int Function(
  int baseBufferSize,
  double scale,
);

typedef _c_ma_calculate_buffer_size_in_milliseconds_from_frames = ffi.Uint32
    Function(
  ffi.Uint32 bufferSizeInFrames,
  ffi.Uint32 sampleRate,
);

typedef _dart_ma_calculate_buffer_size_in_milliseconds_from_frames = int
    Function(
  int bufferSizeInFrames,
  int sampleRate,
);

typedef _c_ma_calculate_buffer_size_in_frames_from_milliseconds = ffi.Uint32
    Function(
  ffi.Uint32 bufferSizeInMilliseconds,
  ffi.Uint32 sampleRate,
);

typedef _dart_ma_calculate_buffer_size_in_frames_from_milliseconds = int
    Function(
  int bufferSizeInMilliseconds,
  int sampleRate,
);

typedef _c_ma_copy_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_copy_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> dst,
  ffi.Pointer<ffi.Void> src,
  int frameCount,
  int format,
  int channels,
);

typedef _c_ma_silence_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_silence_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> p,
  int frameCount,
  int format,
  int channels,
);

typedef _c_ma_offset_pcm_frames_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 offsetInFrames,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_offset_pcm_frames_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  int offsetInFrames,
  int format,
  int channels,
);

typedef _c_ma_offset_pcm_frames_const_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  ffi.Uint64 offsetInFrames,
  ffi.Int32 format,
  ffi.Uint32 channels,
);

typedef _dart_ma_offset_pcm_frames_const_ptr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p,
  int offsetInFrames,
  int format,
  int channels,
);

typedef _c_ma_clip_samples_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> p,
  ffi.Uint64 sampleCount,
);

typedef _dart_ma_clip_samples_f32 = void Function(
  ffi.Pointer<ffi.Float> p,
  int sampleCount,
);

typedef _c_ma_copy_and_apply_volume_factor_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pSamplesOut,
  ffi.Pointer<ffi.Uint8> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pSamplesOut,
  ffi.Pointer<ffi.Uint8> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pSamplesOut,
  ffi.Pointer<ffi.Int16> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_s16 = void Function(
  ffi.Pointer<ffi.Int16> pSamplesOut,
  ffi.Pointer<ffi.Int16> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pSamplesOut,
  ffi.Pointer<ffi.Void> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_s24 = void Function(
  ffi.Pointer<ffi.Void> pSamplesOut,
  ffi.Pointer<ffi.Void> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pSamplesOut,
  ffi.Pointer<ffi.Int32> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_s32 = void Function(
  ffi.Pointer<ffi.Int32> pSamplesOut,
  ffi.Pointer<ffi.Int32> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pSamplesOut,
  ffi.Pointer<ffi.Float> pSamplesIn,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_f32 = void Function(
  ffi.Pointer<ffi.Float> pSamplesOut,
  ffi.Pointer<ffi.Float> pSamplesIn,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_s16 = void Function(
  ffi.Pointer<ffi.Int16> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_s24 = void Function(
  ffi.Pointer<ffi.Void> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_s32 = void Function(
  ffi.Pointer<ffi.Int32> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_apply_volume_factor_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pSamples,
  ffi.Uint64 sampleCount,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_f32 = void Function(
  ffi.Pointer<ffi.Float> pSamples,
  int sampleCount,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pPCMFramesOut,
  ffi.Pointer<ffi.Uint8> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pPCMFramesOut,
  ffi.Pointer<ffi.Uint8> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pPCMFramesOut,
  ffi.Pointer<ffi.Int16> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_s16 = void Function(
  ffi.Pointer<ffi.Int16> pPCMFramesOut,
  ffi.Pointer<ffi.Int16> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pPCMFramesOut,
  ffi.Pointer<ffi.Void> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_s24 = void Function(
  ffi.Pointer<ffi.Void> pPCMFramesOut,
  ffi.Pointer<ffi.Void> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pPCMFramesOut,
  ffi.Pointer<ffi.Int32> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_s32 = void Function(
  ffi.Pointer<ffi.Int32> pPCMFramesOut,
  ffi.Pointer<ffi.Int32> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pPCMFramesOut,
  ffi.Pointer<ffi.Float> pPCMFramesIn,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames_f32 = void Function(
  ffi.Pointer<ffi.Float> pPCMFramesOut,
  ffi.Pointer<ffi.Float> pPCMFramesIn,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_copy_and_apply_volume_factor_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_copy_and_apply_volume_factor_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Pointer<ffi.Void> pFramesIn,
  int frameCount,
  int format,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_u8 = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_u8 = void Function(
  ffi.Pointer<ffi.Uint8> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_s16 = ffi.Void Function(
  ffi.Pointer<ffi.Int16> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_s16 = void Function(
  ffi.Pointer<ffi.Int16> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_s24 = ffi.Void Function(
  ffi.Pointer<ffi.Void> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_s24 = void Function(
  ffi.Pointer<ffi.Void> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_s32 = ffi.Void Function(
  ffi.Pointer<ffi.Int32> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_s32 = void Function(
  ffi.Pointer<ffi.Int32> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames_f32 = ffi.Void Function(
  ffi.Pointer<ffi.Float> pFrames,
  ffi.Uint64 frameCount,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames_f32 = void Function(
  ffi.Pointer<ffi.Float> pFrames,
  int frameCount,
  int channels,
  double factor,
);

typedef _c_ma_apply_volume_factor_pcm_frames = ffi.Void Function(
  ffi.Pointer<ffi.Void> pFrames,
  ffi.Uint64 frameCount,
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Float factor,
);

typedef _dart_ma_apply_volume_factor_pcm_frames = void Function(
  ffi.Pointer<ffi.Void> pFrames,
  int frameCount,
  int format,
  int channels,
  double factor,
);

typedef _c_ma_factor_to_gain_db = ffi.Float Function(
  ffi.Float factor,
);

typedef _dart_ma_factor_to_gain_db = double Function(
  double factor,
);

typedef _c_ma_gain_db_to_factor = ffi.Float Function(
  ffi.Float gain,
);

typedef _dart_ma_gain_db_to_factor = double Function(
  double gain,
);

typedef _c_ma_data_source_config_init = ma_data_source_config Function();

typedef _dart_ma_data_source_config_init = ma_data_source_config Function();

typedef _c_ma_data_source_init = ffi.Int32 Function(
  ffi.Pointer<ma_data_source_config> pConfig,
  ffi.Pointer<ffi.Void> pDataSource,
);

typedef _dart_ma_data_source_init = int Function(
  ffi.Pointer<ma_data_source_config> pConfig,
  ffi.Pointer<ffi.Void> pDataSource,
);

typedef _c_ma_data_source_uninit = ffi.Void Function(
  ffi.Pointer<ffi.Void> pDataSource,
);

typedef _dart_ma_data_source_uninit = void Function(
  ffi.Pointer<ffi.Void> pDataSource,
);

typedef _c_ma_data_source_read_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Uint64> pFramesRead,
  ffi.Uint32 loop,
);

typedef _dart_ma_data_source_read_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
  ffi.Pointer<ffi.Uint64> pFramesRead,
  int loop,
);

typedef _c_ma_data_source_seek_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Uint64 frameCount,
  ffi.Pointer<ffi.Uint64> pFramesSeeked,
  ffi.Uint32 loop,
);

typedef _dart_ma_data_source_seek_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  int frameCount,
  ffi.Pointer<ffi.Uint64> pFramesSeeked,
  int loop,
);

typedef _c_ma_data_source_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_data_source_seek_to_pcm_frame = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  int frameIndex,
);

typedef _c_ma_data_source_map = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _dart_ma_data_source_map = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _c_ma_data_source_unmap = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_data_source_unmap = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  int frameCount,
);

typedef _c_ma_data_source_get_data_format = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Int32> pFormat,
  ffi.Pointer<ffi.Uint32> pChannels,
  ffi.Pointer<ffi.Uint32> pSampleRate,
);

typedef _dart_ma_data_source_get_data_format = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Int32> pFormat,
  ffi.Pointer<ffi.Uint32> pChannels,
  ffi.Pointer<ffi.Uint32> pSampleRate,
);

typedef _c_ma_data_source_get_cursor_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _dart_ma_data_source_get_cursor_in_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _c_ma_data_source_get_length_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _dart_ma_data_source_get_length_in_pcm_frames = int Function(
  ffi.Pointer<ffi.Void> pDataSource,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _c_ma_audio_buffer_ref_init = ffi.Int32 Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 sizeInFrames,
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
);

typedef _dart_ma_audio_buffer_ref_init = int Function(
  int format,
  int channels,
  ffi.Pointer<ffi.Void> pData,
  int sizeInFrames,
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
);

typedef _c_ma_audio_buffer_ref_uninit = ffi.Void Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
);

typedef _dart_ma_audio_buffer_ref_uninit = void Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
);

typedef _c_ma_audio_buffer_ref_set_data = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 sizeInFrames,
);

typedef _dart_ma_audio_buffer_ref_set_data = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Void> pData,
  int sizeInFrames,
);

typedef _c_ma_audio_buffer_ref_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
  ffi.Uint32 loop,
);

typedef _dart_ma_audio_buffer_ref_read_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
  int loop,
);

typedef _c_ma_audio_buffer_ref_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_audio_buffer_ref_seek_to_pcm_frame = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  int frameIndex,
);

typedef _c_ma_audio_buffer_ref_map = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _dart_ma_audio_buffer_ref_map = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _c_ma_audio_buffer_ref_unmap = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_audio_buffer_ref_unmap = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  int frameCount,
);

typedef _c_ma_audio_buffer_ref_at_end = ffi.Uint32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
);

typedef _dart_ma_audio_buffer_ref_at_end = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
);

typedef _c_ma_audio_buffer_ref_get_cursor_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _dart_ma_audio_buffer_ref_get_cursor_in_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _c_ma_audio_buffer_ref_get_length_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _dart_ma_audio_buffer_ref_get_length_in_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _c_ma_audio_buffer_ref_get_available_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _dart_ma_audio_buffer_ref_get_available_frames = int Function(
  ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _c_ma_audio_buffer_config_init = ma_audio_buffer_config Function(
  ffi.Int32 format,
  ffi.Uint32 channels,
  ffi.Uint64 sizeInFrames,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_audio_buffer_config_init = ma_audio_buffer_config Function(
  int format,
  int channels,
  int sizeInFrames,
  ffi.Pointer<ffi.Void> pData,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_audio_buffer_init = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_init = int Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_init_copy = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_init_copy = int Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_alloc_and_init = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
);

typedef _dart_ma_audio_buffer_alloc_and_init = int Function(
  ffi.Pointer<ma_audio_buffer_config> pConfig,
  ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
);

typedef _c_ma_audio_buffer_uninit = ffi.Void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_uninit = void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_uninit_and_free = ffi.Void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_uninit_and_free = void Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
  ffi.Uint32 loop,
);

typedef _dart_ma_audio_buffer_read_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
  int loop,
);

typedef _c_ma_audio_buffer_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_audio_buffer_seek_to_pcm_frame = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  int frameIndex,
);

typedef _c_ma_audio_buffer_map = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _dart_ma_audio_buffer_map = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
  ffi.Pointer<ffi.Uint64> pFrameCount,
);

typedef _c_ma_audio_buffer_unmap = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_audio_buffer_unmap = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  int frameCount,
);

typedef _c_ma_audio_buffer_at_end = ffi.Uint32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _dart_ma_audio_buffer_at_end = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
);

typedef _c_ma_audio_buffer_get_cursor_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _dart_ma_audio_buffer_get_cursor_in_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _c_ma_audio_buffer_get_length_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _dart_ma_audio_buffer_get_length_in_pcm_frames = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pLength,
);

typedef _c_ma_audio_buffer_get_available_frames = ffi.Int32 Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _dart_ma_audio_buffer_get_available_frames = int Function(
  ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _c_ma_vfs_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Uint32 openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _dart_ma_vfs_open = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  int openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _c_ma_vfs_open_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Uint32 openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _dart_ma_vfs_open_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  int openMode,
  ffi.Pointer<ffi.Pointer<ffi.Void>> pFile,
);

typedef _c_ma_vfs_close = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
);

typedef _dart_ma_vfs_close = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
);

typedef _c_ma_vfs_read = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pDst,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesRead,
);

typedef _dart_ma_vfs_read = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pDst,
  int sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesRead,
);

typedef _c_ma_vfs_write = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pSrc,
  ffi.Uint64 sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesWritten,
);

typedef _dart_ma_vfs_write = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Void> pSrc,
  int sizeInBytes,
  ffi.Pointer<ffi.Uint64> pBytesWritten,
);

typedef _c_ma_vfs_seek = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Int64 offset,
  ffi.Int32 origin,
);

typedef _dart_ma_vfs_seek = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  int offset,
  int origin,
);

typedef _c_ma_vfs_tell = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Int64> pCursor,
);

typedef _dart_ma_vfs_tell = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ffi.Int64> pCursor,
);

typedef _c_ma_vfs_info = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ma_file_info> pInfo,
);

typedef _dart_ma_vfs_info = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Void> file,
  ffi.Pointer<ma_file_info> pInfo,
);

typedef _c_ma_vfs_open_and_read_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
  ffi.Pointer<ffi.Uint64> pSize,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_vfs_open_and_read_file = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
  ffi.Pointer<ffi.Uint64> pSize,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_default_vfs_init = ffi.Int32 Function(
  ffi.Pointer<ma_default_vfs> pVFS,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _dart_ma_default_vfs_init = int Function(
  ffi.Pointer<ma_default_vfs> pVFS,
  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
);

typedef _c_ma_decoding_backend_config_init = ma_decoding_backend_config
    Function(
  ffi.Int32 preferredFormat,
);

typedef _dart_ma_decoding_backend_config_init = ma_decoding_backend_config
    Function(
  int preferredFormat,
);

typedef _c_ma_decoder_config_init = ma_decoder_config Function(
  ffi.Int32 outputFormat,
  ffi.Uint32 outputChannels,
  ffi.Uint32 outputSampleRate,
);

typedef _dart_ma_decoder_config_init = ma_decoder_config Function(
  int outputFormat,
  int outputChannels,
  int outputSampleRate,
);

typedef _c_ma_decoder_config_init_default = ma_decoder_config Function();

typedef _dart_ma_decoder_config_init_default = ma_decoder_config Function();

typedef ma_decoder_read_proc = ffi.Uint64 Function(
  ffi.Pointer<ma_decoder>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef ma_decoder_seek_proc = ffi.Uint32 Function(
  ffi.Pointer<ma_decoder>,
  ffi.Int64,
  ffi.Int32,
);

typedef _c_ma_decoder_init = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_uninit = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_uninit = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_get_cursor_in_pcm_frames = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _dart_ma_decoder_get_cursor_in_pcm_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pCursor,
);

typedef _c_ma_decoder_get_length_in_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_get_length_in_pcm_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_read_pcm_frames = ffi.Uint64 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Void> pFramesOut,
  ffi.Uint64 frameCount,
);

typedef _dart_ma_decoder_read_pcm_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Void> pFramesOut,
  int frameCount,
);

typedef _c_ma_decoder_seek_to_pcm_frame = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Uint64 frameIndex,
);

typedef _dart_ma_decoder_seek_to_pcm_frame = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  int frameIndex,
);

typedef _c_ma_decoder_get_available_frames = ffi.Int32 Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _dart_ma_decoder_get_available_frames = int Function(
  ffi.Pointer<ma_decoder> pDecoder,
  ffi.Pointer<ffi.Uint64> pAvailableFrames,
);

typedef _c_ma_decode_from_vfs = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _dart_ma_decode_from_vfs = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _c_ma_decode_file = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _dart_ma_decode_file = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _c_ma_decode_memory = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _dart_ma_decode_memory = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ffi.Uint64> pFrameCountOut,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
);

typedef _c_ma_decoder_init_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_wav = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_flac = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_mp3 = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vorbis = int Function(
  ffi.Pointer<ffi.NativeFunction<ma_decoder_read_proc>> onRead,
  ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_proc>> onSeek,
  ffi.Pointer<ffi.Void> pUserData,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_wav = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_flac = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_mp3 = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_memory_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pData,
  ffi.Uint64 dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_memory_vorbis = int Function(
  ffi.Pointer<ffi.Void> pData,
  int dataSize,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_wav = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_flac = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_mp3 = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_vorbis = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_wav_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_wav_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_flac_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_flac_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_mp3_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_mp3_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_vfs_vorbis_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_vfs_vorbis_w = int Function(
  ffi.Pointer<ffi.Void> pVFS,
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_wav = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_wav = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_flac = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_flac = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_mp3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_mp3 = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_vorbis = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_vorbis = int Function(
  ffi.Pointer<ffi.Int8> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_wav_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_wav_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_flac_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_flac_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_mp3_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_mp3_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _c_ma_decoder_init_file_vorbis_w = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _dart_ma_decoder_init_file_vorbis_w = int Function(
  ffi.Pointer<ffi.Int32> pFilePath,
  ffi.Pointer<ma_decoder_config> pConfig,
  ffi.Pointer<ma_decoder> pDecoder,
);

typedef _typedefC_1 = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_2 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_4 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_6 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Uint32>,
  ffi.Pointer<ffi.Uint32>,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint64>,
);

typedef ma_data_source_get_next_proc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint32,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int32>,
  ffi.Uint32,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_14 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_15 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_16 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef _typedefC_17 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int64>,
);

typedef _typedefC_18 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ma_file_info>,
);

typedef ma_read_proc = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint64>,
);

typedef ma_seek_proc = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef ma_tell_proc = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int64>,
);

typedef _typedefC_19 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.NativeFunction<ma_read_proc>>,
  ffi.Pointer<ffi.NativeFunction<ma_seek_proc>>,
  ffi.Pointer<ffi.NativeFunction<ma_tell_proc>>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ma_decoding_backend_config>,
  ffi.Pointer<ma_allocation_callbacks>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_20 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ma_decoding_backend_config>,
  ffi.Pointer<ma_allocation_callbacks>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_21 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ma_decoding_backend_config>,
  ffi.Pointer<ma_allocation_callbacks>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ma_decoding_backend_config>,
  ffi.Pointer<ma_allocation_callbacks>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_23 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ma_allocation_callbacks>,
);

typedef _typedefC_24 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
);

typedef ma_decoder_tell_proc = ffi.Int32 Function(
  ffi.Pointer<ma_decoder>,
  ffi.Pointer<ffi.Int64>,
);
