// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, unused_field
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// FFI bindings to miniaudio library
class MiniAudioFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MiniAudioFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MiniAudioFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void ma_version(
    ffi.Pointer<ma_uint32> pMajor,
    ffi.Pointer<ma_uint32> pMinor,
    ffi.Pointer<ma_uint32> pRevision,
  ) {
    return _ma_version(
      pMajor,
      pMinor,
      pRevision,
    );
  }

  late final _ma_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>>('ma_version');
  late final _ma_version = _ma_versionPtr.asFunction<
      void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ma_uint32>)>();

  ffi.Pointer<ffi.Int8> ma_version_string() {
    return _ma_version_string();
  }

  late final _ma_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'ma_version_string');
  late final _ma_version_string =
      _ma_version_stringPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  ma_log_callback ma_log_callback_init(
    ma_log_callback_proc onLog,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_log_callback_init(
      onLog,
      pUserData,
    );
  }

  late final _ma_log_callback_initPtr = _lookup<
      ffi.NativeFunction<
          ma_log_callback Function(ma_log_callback_proc,
              ffi.Pointer<ffi.Void>)>>('ma_log_callback_init');
  late final _ma_log_callback_init = _ma_log_callback_initPtr.asFunction<
      ma_log_callback Function(ma_log_callback_proc, ffi.Pointer<ffi.Void>)>();

  int ma_log_init(
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_init(
      pAllocationCallbacks,
      pLog,
    );
  }

  late final _ma_log_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_log>)>>('ma_log_init');
  late final _ma_log_init = _ma_log_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_log>)>();

  void ma_log_uninit(
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_uninit(
      pLog,
    );
  }

  late final _ma_log_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_log>)>>(
          'ma_log_uninit');
  late final _ma_log_uninit =
      _ma_log_uninitPtr.asFunction<void Function(ffi.Pointer<ma_log>)>();

  int ma_log_register_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_register_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_register_callbackPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_log>,
              ma_log_callback)>>('ma_log_register_callback');
  late final _ma_log_register_callback = _ma_log_register_callbackPtr
      .asFunction<int Function(ffi.Pointer<ma_log>, ma_log_callback)>();

  int ma_log_unregister_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_unregister_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_unregister_callbackPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_log>,
              ma_log_callback)>>('ma_log_unregister_callback');
  late final _ma_log_unregister_callback = _ma_log_unregister_callbackPtr
      .asFunction<int Function(ffi.Pointer<ma_log>, ma_log_callback)>();

  int ma_log_post(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Int8> pMessage,
  ) {
    return _ma_log_post(
      pLog,
      level,
      pMessage,
    );
  }

  late final _ma_log_postPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Int8>)>>('ma_log_post');
  late final _ma_log_post = _ma_log_postPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Int8>)>();

  int ma_log_postv(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Int8> pFormat,
    va_list args,
  ) {
    return _ma_log_postv(
      pLog,
      level,
      pFormat,
      args,
    );
  }

  late final _ma_log_postvPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Int8>, va_list)>>('ma_log_postv');
  late final _ma_log_postv = _ma_log_postvPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Int8>, va_list)>();

  int ma_log_postf(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Int8> pFormat,
  ) {
    return _ma_log_postf(
      pLog,
      level,
      pFormat,
    );
  }

  late final _ma_log_postfPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Int8>)>>('ma_log_postf');
  late final _ma_log_postf = _ma_log_postfPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Int8>)>();

  ma_biquad_config ma_biquad_config_init(
    int format,
    int channels,
    double b0,
    double b1,
    double b2,
    double a0,
    double a1,
    double a2,
  ) {
    return _ma_biquad_config_init(
      format,
      channels,
      b0,
      b1,
      b2,
      a0,
      a1,
      a2,
    );
  }

  late final _ma_biquad_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_biquad_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('ma_biquad_config_init');
  late final _ma_biquad_config_init = _ma_biquad_config_initPtr.asFunction<
      ma_biquad_config Function(
          int, int, double, double, double, double, double, double)>();

  int ma_biquad_init(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_init(
      pConfig,
      pBQ,
    );
  }

  late final _ma_biquad_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_init');
  late final _ma_biquad_init = _ma_biquad_initPtr.asFunction<
      int Function(ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad>)>();

  int ma_biquad_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_reinit(
      pConfig,
      pBQ,
    );
  }

  late final _ma_biquad_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_reinit');
  late final _ma_biquad_reinit = _ma_biquad_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad>)>();

  int ma_biquad_process_pcm_frames(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_biquad_process_pcm_frames(
      pBQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_biquad_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_biquad>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_biquad_process_pcm_frames');
  late final _ma_biquad_process_pcm_frames =
      _ma_biquad_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_biquad>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_biquad_get_latency(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_get_latency(
      pBQ,
    );
  }

  late final _ma_biquad_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_biquad>)>>(
          'ma_biquad_get_latency');
  late final _ma_biquad_get_latency = _ma_biquad_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_biquad>)>();

  ma_lpf1_config ma_lpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_lpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_lpf1_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf1_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double)>>('ma_lpf1_config_init');
  late final _ma_lpf1_config_init = _ma_lpf1_config_initPtr
      .asFunction<ma_lpf1_config Function(int, int, int, double)>();

  ma_lpf2_config ma_lpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_lpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_lpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_lpf2_config_init');
  late final _ma_lpf2_config_init = _ma_lpf2_config_initPtr
      .asFunction<ma_lpf2_config Function(int, int, int, double, double)>();

  int ma_lpf1_init(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_init(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf1_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_init');
  late final _ma_lpf1_init = _ma_lpf1_initPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ma_lpf1>)>();

  int ma_lpf1_reinit(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf1_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_reinit');
  late final _ma_lpf1_reinit = _ma_lpf1_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ma_lpf1>)>();

  int ma_lpf1_process_pcm_frames(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf1_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf1_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf1_process_pcm_frames');
  late final _ma_lpf1_process_pcm_frames =
      _ma_lpf1_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_lpf1_get_latency(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf1_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf1>)>>(
          'ma_lpf1_get_latency');
  late final _ma_lpf1_get_latency =
      _ma_lpf1_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_lpf1>)>();

  int ma_lpf2_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_init(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_init');
  late final _ma_lpf2_init = _ma_lpf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ma_lpf2>)>();

  int ma_lpf2_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_reinit');
  late final _ma_lpf2_reinit = _ma_lpf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ma_lpf2>)>();

  int ma_lpf2_process_pcm_frames(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf2_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf2_process_pcm_frames');
  late final _ma_lpf2_process_pcm_frames =
      _ma_lpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_lpf2_get_latency(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf2>)>>(
          'ma_lpf2_get_latency');
  late final _ma_lpf2_get_latency =
      _ma_lpf2_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_lpf2>)>();

  ma_lpf_config ma_lpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_lpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_lpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_lpf_config_init');
  late final _ma_lpf_config_init = _ma_lpf_config_initPtr
      .asFunction<ma_lpf_config Function(int, int, int, double, int)>();

  int ma_lpf_init(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_init(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf>)>>('ma_lpf_init');
  late final _ma_lpf_init = _ma_lpf_initPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf>)>();

  int ma_lpf_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_reinit');
  late final _ma_lpf_reinit = _ma_lpf_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf>)>();

  int ma_lpf_process_pcm_frames(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_lpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf_process_pcm_frames');
  late final _ma_lpf_process_pcm_frames =
      _ma_lpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_lpf_get_latency(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf>)>>(
          'ma_lpf_get_latency');
  late final _ma_lpf_get_latency =
      _ma_lpf_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_lpf>)>();

  ma_hpf1_config ma_hpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_hpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_hpf1_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf1_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double)>>('ma_hpf1_config_init');
  late final _ma_hpf1_config_init = _ma_hpf1_config_initPtr
      .asFunction<ma_hpf1_config Function(int, int, int, double)>();

  ma_hpf2_config ma_hpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_hpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_hpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_hpf2_config_init');
  late final _ma_hpf2_config_init = _ma_hpf2_config_initPtr
      .asFunction<ma_hpf2_config Function(int, int, int, double, double)>();

  int ma_hpf1_init(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_init(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf1_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_init');
  late final _ma_hpf1_init = _ma_hpf1_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ma_hpf1>)>();

  int ma_hpf1_reinit(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf1_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_reinit');
  late final _ma_hpf1_reinit = _ma_hpf1_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ma_hpf1>)>();

  int ma_hpf1_process_pcm_frames(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf1_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf1_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf1_process_pcm_frames');
  late final _ma_hpf1_process_pcm_frames =
      _ma_hpf1_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hpf1_get_latency(
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf1_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf1>)>>(
          'ma_hpf1_get_latency');
  late final _ma_hpf1_get_latency =
      _ma_hpf1_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_hpf1>)>();

  int ma_hpf2_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_init(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_init');
  late final _ma_hpf2_init = _ma_hpf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ma_hpf2>)>();

  int ma_hpf2_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_reinit');
  late final _ma_hpf2_reinit = _ma_hpf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ma_hpf2>)>();

  int ma_hpf2_process_pcm_frames(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf2_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf2_process_pcm_frames');
  late final _ma_hpf2_process_pcm_frames =
      _ma_hpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hpf2_get_latency(
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf2>)>>(
          'ma_hpf2_get_latency');
  late final _ma_hpf2_get_latency =
      _ma_hpf2_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_hpf2>)>();

  ma_hpf_config ma_hpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_hpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_hpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_hpf_config_init');
  late final _ma_hpf_config_init = _ma_hpf_config_initPtr
      .asFunction<ma_hpf_config Function(int, int, int, double, int)>();

  int ma_hpf_init(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_init(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf>)>>('ma_hpf_init');
  late final _ma_hpf_init = _ma_hpf_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf>)>();

  int ma_hpf_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_reinit');
  late final _ma_hpf_reinit = _ma_hpf_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf>)>();

  int ma_hpf_process_pcm_frames(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf_process_pcm_frames');
  late final _ma_hpf_process_pcm_frames =
      _ma_hpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hpf_get_latency(
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf>)>>(
          'ma_hpf_get_latency');
  late final _ma_hpf_get_latency =
      _ma_hpf_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_hpf>)>();

  ma_bpf2_config ma_bpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_bpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_bpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_bpf2_config_init');
  late final _ma_bpf2_config_init = _ma_bpf2_config_initPtr
      .asFunction<ma_bpf2_config Function(int, int, int, double, double)>();

  int ma_bpf2_init(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_init(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_init');
  late final _ma_bpf2_init = _ma_bpf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ma_bpf2>)>();

  int ma_bpf2_reinit(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_reinit');
  late final _ma_bpf2_reinit = _ma_bpf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ma_bpf2>)>();

  int ma_bpf2_process_pcm_frames(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf2_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_bpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_bpf2_process_pcm_frames');
  late final _ma_bpf2_process_pcm_frames =
      _ma_bpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_bpf2_get_latency(
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf2>)>>(
          'ma_bpf2_get_latency');
  late final _ma_bpf2_get_latency =
      _ma_bpf2_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_bpf2>)>();

  ma_bpf_config ma_bpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_bpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_bpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_bpf_config_init');
  late final _ma_bpf_config_init = _ma_bpf_config_initPtr
      .asFunction<ma_bpf_config Function(int, int, int, double, int)>();

  int ma_bpf_init(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_init(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf>)>>('ma_bpf_init');
  late final _ma_bpf_init = _ma_bpf_initPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf>)>();

  int ma_bpf_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_reinit');
  late final _ma_bpf_reinit = _ma_bpf_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf>)>();

  int ma_bpf_process_pcm_frames(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_bpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_bpf_process_pcm_frames');
  late final _ma_bpf_process_pcm_frames =
      _ma_bpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_bpf_get_latency(
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf>)>>(
          'ma_bpf_get_latency');
  late final _ma_bpf_get_latency =
      _ma_bpf_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_bpf>)>();

  ma_notch2_config ma_notch2_config_init(
    int format,
    int channels,
    int sampleRate,
    double q,
    double frequency,
  ) {
    return _ma_notch2_config_init(
      format,
      channels,
      sampleRate,
      q,
      frequency,
    );
  }

  late final _ma_notch2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_notch2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_notch2_config_init');
  late final _ma_notch2_config_init = _ma_notch2_config_initPtr
      .asFunction<ma_notch2_config Function(int, int, int, double, double)>();

  int ma_notch2_init(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_notch2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_init');
  late final _ma_notch2_init = _ma_notch2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_notch2_config>, ffi.Pointer<ma_notch2>)>();

  int ma_notch2_reinit(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_notch2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_reinit');
  late final _ma_notch2_reinit = _ma_notch2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_notch2_config>, ffi.Pointer<ma_notch2>)>();

  int ma_notch2_process_pcm_frames(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_notch2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_notch2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_notch2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_notch2_process_pcm_frames');
  late final _ma_notch2_process_pcm_frames =
      _ma_notch2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_notch2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_notch2_get_latency(
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_get_latency(
      pFilter,
    );
  }

  late final _ma_notch2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_notch2>)>>(
          'ma_notch2_get_latency');
  late final _ma_notch2_get_latency = _ma_notch2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_notch2>)>();

  ma_peak2_config ma_peak2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_peak2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_peak2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_peak2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_peak2_config_init');
  late final _ma_peak2_config_init = _ma_peak2_config_initPtr.asFunction<
      ma_peak2_config Function(int, int, int, double, double, double)>();

  int ma_peak2_init(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_peak2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_init');
  late final _ma_peak2_init = _ma_peak2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_peak2_config>, ffi.Pointer<ma_peak2>)>();

  int ma_peak2_reinit(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_peak2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_reinit');
  late final _ma_peak2_reinit = _ma_peak2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_peak2_config>, ffi.Pointer<ma_peak2>)>();

  int ma_peak2_process_pcm_frames(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_peak2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_peak2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_peak2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_peak2_process_pcm_frames');
  late final _ma_peak2_process_pcm_frames =
      _ma_peak2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_peak2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_peak2_get_latency(
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_get_latency(
      pFilter,
    );
  }

  late final _ma_peak2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_peak2>)>>(
          'ma_peak2_get_latency');
  late final _ma_peak2_get_latency = _ma_peak2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_peak2>)>();

  ma_loshelf2_config ma_loshelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_loshelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_loshelf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_loshelf2_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_loshelf2_config_init');
  late final _ma_loshelf2_config_init = _ma_loshelf2_config_initPtr.asFunction<
      ma_loshelf2_config Function(int, int, int, double, double, double)>();

  int ma_loshelf2_init(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_loshelf2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_init');
  late final _ma_loshelf2_init = _ma_loshelf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ma_loshelf2>)>();

  int ma_loshelf2_reinit(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_loshelf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_reinit');
  late final _ma_loshelf2_reinit = _ma_loshelf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ma_loshelf2>)>();

  int ma_loshelf2_process_pcm_frames(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_loshelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_loshelf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_loshelf2_process_pcm_frames');
  late final _ma_loshelf2_process_pcm_frames =
      _ma_loshelf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_loshelf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_loshelf2_get_latency(
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_loshelf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_loshelf2>)>>(
          'ma_loshelf2_get_latency');
  late final _ma_loshelf2_get_latency = _ma_loshelf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_loshelf2>)>();

  ma_hishelf2_config ma_hishelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_hishelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_hishelf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hishelf2_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_hishelf2_config_init');
  late final _ma_hishelf2_config_init = _ma_hishelf2_config_initPtr.asFunction<
      ma_hishelf2_config Function(int, int, int, double, double, double)>();

  int ma_hishelf2_init(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_init(
      pConfig,
      pFilter,
    );
  }

  late final _ma_hishelf2_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_init');
  late final _ma_hishelf2_init = _ma_hishelf2_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ma_hishelf2>)>();

  int ma_hishelf2_reinit(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_hishelf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_reinit');
  late final _ma_hishelf2_reinit = _ma_hishelf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ma_hishelf2>)>();

  int ma_hishelf2_process_pcm_frames(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hishelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hishelf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_hishelf2_process_pcm_frames');
  late final _ma_hishelf2_process_pcm_frames =
      _ma_hishelf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hishelf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hishelf2_get_latency(
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_hishelf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hishelf2>)>>(
          'ma_hishelf2_get_latency');
  late final _ma_hishelf2_get_latency = _ma_hishelf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_hishelf2>)>();

  ma_linear_resampler_config ma_linear_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_linear_resampler_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ma_uint32)>>('ma_linear_resampler_config_init');
  late final _ma_linear_resampler_config_init =
      _ma_linear_resampler_config_initPtr.asFunction<
          ma_linear_resampler_config Function(int, int, int, int)>();

  int ma_linear_resampler_init(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_init(
      pConfig,
      pResampler,
    );
  }

  late final _ma_linear_resampler_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ma_linear_resampler>)>>('ma_linear_resampler_init');
  late final _ma_linear_resampler_init =
      _ma_linear_resampler_initPtr.asFunction<
          int Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ma_linear_resampler>)>();

  void ma_linear_resampler_uninit(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_uninit(
      pResampler,
    );
  }

  late final _ma_linear_resampler_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_linear_resampler>)>>('ma_linear_resampler_uninit');
  late final _ma_linear_resampler_uninit = _ma_linear_resampler_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_linear_resampler>)>();

  int ma_linear_resampler_process_pcm_frames(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_linear_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_linear_resampler_process_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_process_pcm_frames');
  late final _ma_linear_resampler_process_pcm_frames =
      _ma_linear_resampler_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>();

  int ma_linear_resampler_set_rate(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_linear_resampler>, ma_uint32,
              ma_uint32)>>('ma_linear_resampler_set_rate');
  late final _ma_linear_resampler_set_rate = _ma_linear_resampler_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, int, int)>();

  int ma_linear_resampler_set_rate_ratio(
    ffi.Pointer<ma_linear_resampler> pResampler,
    double ratioInOut,
  ) {
    return _ma_linear_resampler_set_rate_ratio(
      pResampler,
      ratioInOut,
    );
  }

  late final _ma_linear_resampler_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_linear_resampler>,
              ffi.Float)>>('ma_linear_resampler_set_rate_ratio');
  late final _ma_linear_resampler_set_rate_ratio =
      _ma_linear_resampler_set_rate_ratioPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, double)>();

  int ma_linear_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int outputFrameCount,
  ) {
    return _ma_linear_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64)>>(
      'ma_linear_resampler_get_required_input_frame_count');
  late final _ma_linear_resampler_get_required_input_frame_count =
      _ma_linear_resampler_get_required_input_frame_countPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, int)>();

  int ma_linear_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int inputFrameCount,
  ) {
    return _ma_linear_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64)>>(
      'ma_linear_resampler_get_expected_output_frame_count');
  late final _ma_linear_resampler_get_expected_output_frame_count =
      _ma_linear_resampler_get_expected_output_frame_countPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, int)>();

  int ma_linear_resampler_get_input_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_get_input_latency');
  late final _ma_linear_resampler_get_input_latency =
      _ma_linear_resampler_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>();

  int ma_linear_resampler_get_output_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_get_output_latency');
  late final _ma_linear_resampler_get_output_latency =
      _ma_linear_resampler_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>();

  ma_resampler_config ma_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
    int algorithm,
  ) {
    return _ma_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
      algorithm,
    );
  }

  late final _ma_resampler_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_resampler_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ma_uint32, ffi.Int32)>>('ma_resampler_config_init');
  late final _ma_resampler_config_init = _ma_resampler_config_initPtr
      .asFunction<ma_resampler_config Function(int, int, int, int, int)>();

  int ma_resampler_init(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_init(
      pConfig,
      pResampler,
    );
  }

  late final _ma_resampler_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ma_resampler>)>>('ma_resampler_init');
  late final _ma_resampler_init = _ma_resampler_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_resampler_config>, ffi.Pointer<ma_resampler>)>();

  void ma_resampler_uninit(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_uninit(
      pResampler,
    );
  }

  late final _ma_resampler_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_resampler>)>>(
          'ma_resampler_uninit');
  late final _ma_resampler_uninit = _ma_resampler_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_resampler>)>();

  int ma_resampler_process_pcm_frames(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_resampler_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>>('ma_resampler_process_pcm_frames');
  late final _ma_resampler_process_pcm_frames =
      _ma_resampler_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resampler_set_rate(
    ffi.Pointer<ma_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_resampler_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_resampler>, ma_uint32,
              ma_uint32)>>('ma_resampler_set_rate');
  late final _ma_resampler_set_rate = _ma_resampler_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>, int, int)>();

  int ma_resampler_set_rate_ratio(
    ffi.Pointer<ma_resampler> pResampler,
    double ratio,
  ) {
    return _ma_resampler_set_rate_ratio(
      pResampler,
      ratio,
    );
  }

  late final _ma_resampler_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_resampler>,
              ffi.Float)>>('ma_resampler_set_rate_ratio');
  late final _ma_resampler_set_rate_ratio = _ma_resampler_set_rate_ratioPtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>, double)>();

  int ma_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int outputFrameCount,
  ) {
    return _ma_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
    );
  }

  late final _ma_resampler_get_required_input_frame_countPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_resampler>,
              ma_uint64)>>('ma_resampler_get_required_input_frame_count');
  late final _ma_resampler_get_required_input_frame_count =
      _ma_resampler_get_required_input_frame_countPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>, int)>();

  int ma_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int inputFrameCount,
  ) {
    return _ma_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
    );
  }

  late final _ma_resampler_get_expected_output_frame_countPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_resampler>,
              ma_uint64)>>('ma_resampler_get_expected_output_frame_count');
  late final _ma_resampler_get_expected_output_frame_count =
      _ma_resampler_get_expected_output_frame_countPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>, int)>();

  int ma_resampler_get_input_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_get_input_latency');
  late final _ma_resampler_get_input_latency =
      _ma_resampler_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>)>();

  int ma_resampler_get_output_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_get_output_latency');
  late final _ma_resampler_get_output_latency =
      _ma_resampler_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>)>();

  ma_channel_converter_config ma_channel_converter_config_init(
    int format,
    int channelsIn,
    ffi.Pointer<ma_channel> pChannelMapIn,
    int channelsOut,
    ffi.Pointer<ma_channel> pChannelMapOut,
    int mixingMode,
  ) {
    return _ma_channel_converter_config_init(
      format,
      channelsIn,
      pChannelMapIn,
      channelsOut,
      pChannelMapOut,
      mixingMode,
    );
  }

  late final _ma_channel_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_channel_converter_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ffi.Int32)>>('ma_channel_converter_config_init');
  late final _ma_channel_converter_config_init =
      _ma_channel_converter_config_initPtr.asFunction<
          ma_channel_converter_config Function(int, int,
              ffi.Pointer<ma_channel>, int, ffi.Pointer<ma_channel>, int)>();

  int ma_channel_converter_init(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_init(
      pConfig,
      pConverter,
    );
  }

  late final _ma_channel_converter_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ma_channel_converter>)>>('ma_channel_converter_init');
  late final _ma_channel_converter_init =
      _ma_channel_converter_initPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ma_channel_converter>)>();

  void ma_channel_converter_uninit(
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_uninit(
      pConverter,
    );
  }

  late final _ma_channel_converter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_channel_converter>)>>(
      'ma_channel_converter_uninit');
  late final _ma_channel_converter_uninit = _ma_channel_converter_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_channel_converter>)>();

  int ma_channel_converter_process_pcm_frames(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_channel_converter_process_pcm_frames(
      pConverter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_channel_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_channel_converter_process_pcm_frames');
  late final _ma_channel_converter_process_pcm_frames =
      _ma_channel_converter_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  ma_data_converter_config ma_data_converter_config_init_default() {
    return _ma_data_converter_config_init_default();
  }

  late final _ma_data_converter_config_init_defaultPtr =
      _lookup<ffi.NativeFunction<ma_data_converter_config Function()>>(
          'ma_data_converter_config_init_default');
  late final _ma_data_converter_config_init_default =
      _ma_data_converter_config_init_defaultPtr
          .asFunction<ma_data_converter_config Function()>();

  ma_data_converter_config ma_data_converter_config_init(
    int formatIn,
    int formatOut,
    int channelsIn,
    int channelsOut,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_config_init(
      formatIn,
      formatOut,
      channelsIn,
      channelsOut,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_data_converter_config Function(
              ffi.Int32,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32)>>('ma_data_converter_config_init');
  late final _ma_data_converter_config_init =
      _ma_data_converter_config_initPtr.asFunction<
          ma_data_converter_config Function(int, int, int, int, int, int)>();

  int ma_data_converter_init(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_init(
      pConfig,
      pConverter,
    );
  }

  late final _ma_data_converter_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ma_data_converter>)>>('ma_data_converter_init');
  late final _ma_data_converter_init = _ma_data_converter_initPtr.asFunction<
      int Function(ffi.Pointer<ma_data_converter_config>,
          ffi.Pointer<ma_data_converter>)>();

  void ma_data_converter_uninit(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_uninit(
      pConverter,
    );
  }

  late final _ma_data_converter_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_data_converter>)>>('ma_data_converter_uninit');
  late final _ma_data_converter_uninit = _ma_data_converter_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_data_converter>)>();

  int ma_data_converter_process_pcm_frames(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_data_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_data_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>>('ma_data_converter_process_pcm_frames');
  late final _ma_data_converter_process_pcm_frames =
      _ma_data_converter_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>();

  int ma_data_converter_set_rate(
    ffi.Pointer<ma_data_converter> pConverter,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_set_rate(
      pConverter,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_converter>, ma_uint32,
              ma_uint32)>>('ma_data_converter_set_rate');
  late final _ma_data_converter_set_rate = _ma_data_converter_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_data_converter>, int, int)>();

  int ma_data_converter_set_rate_ratio(
    ffi.Pointer<ma_data_converter> pConverter,
    double ratioInOut,
  ) {
    return _ma_data_converter_set_rate_ratio(
      pConverter,
      ratioInOut,
    );
  }

  late final _ma_data_converter_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_converter>,
              ffi.Float)>>('ma_data_converter_set_rate_ratio');
  late final _ma_data_converter_set_rate_ratio =
      _ma_data_converter_set_rate_ratioPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>, double)>();

  int ma_data_converter_get_required_input_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int outputFrameCount,
  ) {
    return _ma_data_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
    );
  }

  late final _ma_data_converter_get_required_input_frame_countPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_data_converter>,
              ma_uint64)>>('ma_data_converter_get_required_input_frame_count');
  late final _ma_data_converter_get_required_input_frame_count =
      _ma_data_converter_get_required_input_frame_countPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>, int)>();

  int ma_data_converter_get_expected_output_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int inputFrameCount,
  ) {
    return _ma_data_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
    );
  }

  late final _ma_data_converter_get_expected_output_frame_countPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_data_converter>,
              ma_uint64)>>('ma_data_converter_get_expected_output_frame_count');
  late final _ma_data_converter_get_expected_output_frame_count =
      _ma_data_converter_get_expected_output_frame_countPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>, int)>();

  int ma_data_converter_get_input_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_input_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_get_input_latency');
  late final _ma_data_converter_get_input_latency =
      _ma_data_converter_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>)>();

  int ma_data_converter_get_output_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_output_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_get_output_latency');
  late final _ma_data_converter_get_output_latency =
      _ma_data_converter_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>)>();

  /// Format Conversion
  void ma_pcm_u8_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s16');
  late final _ma_pcm_u8_to_s16 = _ma_pcm_u8_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_u8_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s24');
  late final _ma_pcm_u8_to_s24 = _ma_pcm_u8_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_u8_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s32');
  late final _ma_pcm_u8_to_s32 = _ma_pcm_u8_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_u8_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_f32');
  late final _ma_pcm_u8_to_f32 = _ma_pcm_u8_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_u8');
  late final _ma_pcm_s16_to_u8 = _ma_pcm_s16_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_s24');
  late final _ma_pcm_s16_to_s24 = _ma_pcm_s16_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_s32');
  late final _ma_pcm_s16_to_s32 = _ma_pcm_s16_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_f32');
  late final _ma_pcm_s16_to_f32 = _ma_pcm_s16_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_u8');
  late final _ma_pcm_s24_to_u8 = _ma_pcm_s24_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_s16');
  late final _ma_pcm_s24_to_s16 = _ma_pcm_s24_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_s32');
  late final _ma_pcm_s24_to_s32 = _ma_pcm_s24_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_f32');
  late final _ma_pcm_s24_to_f32 = _ma_pcm_s24_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_u8');
  late final _ma_pcm_s32_to_u8 = _ma_pcm_s32_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_s16');
  late final _ma_pcm_s32_to_s16 = _ma_pcm_s32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_s24');
  late final _ma_pcm_s32_to_s24 = _ma_pcm_s32_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_f32');
  late final _ma_pcm_s32_to_f32 = _ma_pcm_s32_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_u8');
  late final _ma_pcm_f32_to_u8 = _ma_pcm_f32_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s16');
  late final _ma_pcm_f32_to_s16 = _ma_pcm_f32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s24');
  late final _ma_pcm_f32_to_s24 = _ma_pcm_f32_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s32');
  late final _ma_pcm_f32_to_s32 = _ma_pcm_f32_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_convert(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int sampleCount,
    int ditherMode,
  ) {
    return _ma_pcm_convert(
      pOut,
      formatOut,
      pIn,
      formatIn,
      sampleCount,
      ditherMode,
    );
  }

  late final _ma_pcm_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ffi.Int32)>>('ma_pcm_convert');
  late final _ma_pcm_convert = _ma_pcm_convertPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, int, int)>();

  void ma_convert_pcm_frames_format(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int frameCount,
    int channels,
    int ditherMode,
  ) {
    return _ma_convert_pcm_frames_format(
      pOut,
      formatOut,
      pIn,
      formatIn,
      frameCount,
      channels,
      ditherMode,
    );
  }

  late final _ma_convert_pcm_frames_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ma_uint32,
              ffi.Int32)>>('ma_convert_pcm_frames_format');
  late final _ma_convert_pcm_frames_format =
      _ma_convert_pcm_frames_formatPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
              int, int, int)>();

  void ma_deinterleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ) {
    return _ma_deinterleave_pcm_frames(
      format,
      channels,
      frameCount,
      pInterleavedPCMFrames,
      ppDeinterleavedPCMFrames,
    );
  }

  late final _ma_deinterleave_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int32, ma_uint32, ma_uint64,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'ma_deinterleave_pcm_frames');
  late final _ma_deinterleave_pcm_frames =
      _ma_deinterleave_pcm_framesPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void ma_interleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ) {
    return _ma_interleave_pcm_frames(
      format,
      channels,
      frameCount,
      ppDeinterleavedPCMFrames,
      pInterleavedPCMFrames,
    );
  }

  late final _ma_interleave_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ma_uint32,
              ma_uint64,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>>('ma_interleave_pcm_frames');
  late final _ma_interleave_pcm_frames =
      _ma_interleave_pcm_framesPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>();

  int ma_channel_map_get_default_channel(
    int channelCount,
    int channelIndex,
  ) {
    return _ma_channel_map_get_default_channel(
      channelCount,
      channelIndex,
    );
  }

  late final _ma_channel_map_get_default_channelPtr =
      _lookup<ffi.NativeFunction<ma_channel Function(ma_uint32, ma_uint32)>>(
          'ma_channel_map_get_default_channel');
  late final _ma_channel_map_get_default_channel =
      _ma_channel_map_get_default_channelPtr
          .asFunction<int Function(int, int)>();

  int ma_channel_map_get_channel(
    ffi.Pointer<ma_channel> pChannelMap,
    int channelCount,
    int channelIndex,
  ) {
    return _ma_channel_map_get_channel(
      pChannelMap,
      channelCount,
      channelIndex,
    );
  }

  late final _ma_channel_map_get_channelPtr = _lookup<
      ffi.NativeFunction<
          ma_channel Function(ffi.Pointer<ma_channel>, ma_uint32,
              ma_uint32)>>('ma_channel_map_get_channel');
  late final _ma_channel_map_get_channel = _ma_channel_map_get_channelPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int, int)>();

  void ma_channel_map_init_blank(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
  ) {
    return _ma_channel_map_init_blank(
      channels,
      pChannelMap,
    );
  }

  late final _ma_channel_map_init_blankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ma_uint32,
              ffi.Pointer<ma_channel>)>>('ma_channel_map_init_blank');
  late final _ma_channel_map_init_blank = _ma_channel_map_init_blankPtr
      .asFunction<void Function(int, ffi.Pointer<ma_channel>)>();

  void ma_get_standard_channel_map(
    int standardChannelMap,
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
  ) {
    return _ma_get_standard_channel_map(
      standardChannelMap,
      channels,
      pChannelMap,
    );
  }

  late final _ma_get_standard_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ma_uint32,
              ffi.Pointer<ma_channel>)>>('ma_get_standard_channel_map');
  late final _ma_get_standard_channel_map = _ma_get_standard_channel_mapPtr
      .asFunction<void Function(int, int, ffi.Pointer<ma_channel>)>();

  void ma_channel_map_copy(
    ffi.Pointer<ma_channel> pOut,
    ffi.Pointer<ma_channel> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy(
      pOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_copy');
  late final _ma_channel_map_copy = _ma_channel_map_copyPtr.asFunction<
      void Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, int)>();

  void ma_channel_map_copy_or_default(
    ffi.Pointer<ma_channel> pOut,
    ffi.Pointer<ma_channel> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy_or_default(
      pOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copy_or_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_copy_or_default');
  late final _ma_channel_map_copy_or_default =
      _ma_channel_map_copy_or_defaultPtr.asFunction<
          void Function(
              ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, int)>();

  int ma_channel_map_valid(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
  ) {
    return _ma_channel_map_valid(
      channels,
      pChannelMap,
    );
  }

  late final _ma_channel_map_validPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ma_uint32, ffi.Pointer<ma_channel>)>>('ma_channel_map_valid');
  late final _ma_channel_map_valid = _ma_channel_map_validPtr
      .asFunction<int Function(int, ffi.Pointer<ma_channel>)>();

  int ma_channel_map_equal(
    int channels,
    ffi.Pointer<ma_channel> pChannelMapA,
    ffi.Pointer<ma_channel> pChannelMapB,
  ) {
    return _ma_channel_map_equal(
      channels,
      pChannelMapA,
      pChannelMapB,
    );
  }

  late final _ma_channel_map_equalPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>,
              ffi.Pointer<ma_channel>)>>('ma_channel_map_equal');
  late final _ma_channel_map_equal = _ma_channel_map_equalPtr.asFunction<
      int Function(int, ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>)>();

  int ma_channel_map_blank(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
  ) {
    return _ma_channel_map_blank(
      channels,
      pChannelMap,
    );
  }

  late final _ma_channel_map_blankPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ma_uint32, ffi.Pointer<ma_channel>)>>('ma_channel_map_blank');
  late final _ma_channel_map_blank = _ma_channel_map_blankPtr
      .asFunction<int Function(int, ffi.Pointer<ma_channel>)>();

  int ma_channel_map_contains_channel_position(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelPosition,
  ) {
    return _ma_channel_map_contains_channel_position(
      channels,
      pChannelMap,
      channelPosition,
    );
  }

  late final _ma_channel_map_contains_channel_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>,
              ma_channel)>>('ma_channel_map_contains_channel_position');
  late final _ma_channel_map_contains_channel_position =
      _ma_channel_map_contains_channel_positionPtr
          .asFunction<int Function(int, ffi.Pointer<ma_channel>, int)>();

  /// Conversion Helpers
  int ma_convert_frames(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    int formatOut,
    int channelsOut,
    int sampleRateOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    int formatIn,
    int channelsIn,
    int sampleRateIn,
  ) {
    return _ma_convert_frames(
      pOut,
      frameCountOut,
      formatOut,
      channelsOut,
      sampleRateOut,
      pIn,
      frameCountIn,
      formatIn,
      channelsIn,
      sampleRateIn,
    );
  }

  late final _ma_convert_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_convert_frames');
  late final _ma_convert_frames = _ma_convert_framesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, int,
          ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int ma_convert_frames_ex(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    ffi.Pointer<ma_data_converter_config> pConfig,
  ) {
    return _ma_convert_frames_ex(
      pOut,
      frameCountOut,
      pIn,
      frameCountIn,
      pConfig,
    );
  }

  late final _ma_convert_frames_exPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_data_converter_config>)>>('ma_convert_frames_ex');
  late final _ma_convert_frames_ex = _ma_convert_frames_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ma_data_converter_config>)>();

  int ma_rb_init_ex(
    int subbufferSizeInBytes,
    int subbufferCount,
    int subbufferStrideInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init_ex(
      subbufferSizeInBytes,
      subbufferCount,
      subbufferStrideInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_init_exPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              size_t,
              size_t,
              size_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>>('ma_rb_init_ex');
  late final _ma_rb_init_ex = _ma_rb_init_exPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_rb>)>();

  int ma_rb_init(
    int bufferSizeInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init(
      bufferSizeInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              size_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>>('ma_rb_init');
  late final _ma_rb_init = _ma_rb_initPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_rb>)>();

  void ma_rb_uninit(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_uninit(
      pRB,
    );
  }

  late final _ma_rb_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_uninit');
  late final _ma_rb_uninit =
      _ma_rb_uninitPtr.asFunction<void Function(ffi.Pointer<ma_rb>)>();

  void ma_rb_reset(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_reset(
      pRB,
    );
  }

  late final _ma_rb_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_reset');
  late final _ma_rb_reset =
      _ma_rb_resetPtr.asFunction<void Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_acquire_read(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<size_t> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_read(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_readPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_rb>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_rb_acquire_read');
  late final _ma_rb_acquire_read = _ma_rb_acquire_readPtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, ffi.Pointer<size_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_rb_commit_read(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_rb_commit_read(
      pRB,
      sizeInBytes,
      pBufferOut,
    );
  }

  late final _ma_rb_commit_readPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_rb>, size_t,
              ffi.Pointer<ffi.Void>)>>('ma_rb_commit_read');
  late final _ma_rb_commit_read = _ma_rb_commit_readPtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_rb_acquire_write(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<size_t> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_write(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_writePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_rb>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_rb_acquire_write');
  late final _ma_rb_acquire_write = _ma_rb_acquire_writePtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, ffi.Pointer<size_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_rb_commit_write(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_rb_commit_write(
      pRB,
      sizeInBytes,
      pBufferOut,
    );
  }

  late final _ma_rb_commit_writePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_rb>, size_t,
              ffi.Pointer<ffi.Void>)>>('ma_rb_commit_write');
  late final _ma_rb_commit_write = _ma_rb_commit_writePtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_rb_seek_read(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_read(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_readPtr = _lookup<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_rb>, size_t)>>(
      'ma_rb_seek_read');
  late final _ma_rb_seek_read =
      _ma_rb_seek_readPtr.asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  int ma_rb_seek_write(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_write(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_writePtr = _lookup<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_rb>, size_t)>>(
      'ma_rb_seek_write');
  late final _ma_rb_seek_write =
      _ma_rb_seek_writePtr.asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  int ma_rb_pointer_distance(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_rb_pointer_distancePtr =
      _lookup<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_pointer_distance');
  late final _ma_rb_pointer_distance =
      _ma_rb_pointer_distancePtr.asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_available_read(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_read(
      pRB,
    );
  }

  late final _ma_rb_available_readPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_available_read');
  late final _ma_rb_available_read =
      _ma_rb_available_readPtr.asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_available_write(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_write(
      pRB,
    );
  }

  late final _ma_rb_available_writePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_available_write');
  late final _ma_rb_available_write =
      _ma_rb_available_writePtr.asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_get_subbuffer_size(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_get_subbuffer_size');
  late final _ma_rb_get_subbuffer_size = _ma_rb_get_subbuffer_sizePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_get_subbuffer_stride(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_stridePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_get_subbuffer_stride');
  late final _ma_rb_get_subbuffer_stride = _ma_rb_get_subbuffer_stridePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_get_subbuffer_offset(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_rb_get_subbuffer_offsetPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<ma_rb>, size_t)>>(
          'ma_rb_get_subbuffer_offset');
  late final _ma_rb_get_subbuffer_offset = _ma_rb_get_subbuffer_offsetPtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  ffi.Pointer<ffi.Void> ma_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_rb_get_subbuffer_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_rb>, size_t,
              ffi.Pointer<ffi.Void>)>>('ma_rb_get_subbuffer_ptr');
  late final _ma_rb_get_subbuffer_ptr = _ma_rb_get_subbuffer_ptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ma_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_pcm_rb_init_ex(
    int format,
    int channels,
    int subbufferSizeInFrames,
    int subbufferCount,
    int subbufferStrideInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init_ex(
      format,
      channels,
      subbufferSizeInFrames,
      subbufferCount,
      subbufferStrideInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_init_exPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>>('ma_pcm_rb_init_ex');
  late final _ma_pcm_rb_init_ex = _ma_pcm_rb_init_exPtr.asFunction<
      int Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_init(
    int format,
    int channels,
    int bufferSizeInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init(
      format,
      channels,
      bufferSizeInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>>('ma_pcm_rb_init');
  late final _ma_pcm_rb_init = _ma_pcm_rb_initPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_pcm_rb>)>();

  void ma_pcm_rb_uninit(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_uninit(
      pRB,
    );
  }

  late final _ma_pcm_rb_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_uninit');
  late final _ma_pcm_rb_uninit =
      _ma_pcm_rb_uninitPtr.asFunction<void Function(ffi.Pointer<ma_pcm_rb>)>();

  void ma_pcm_rb_reset(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_reset(
      pRB,
    );
  }

  late final _ma_pcm_rb_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_reset');
  late final _ma_pcm_rb_reset =
      _ma_pcm_rb_resetPtr.asFunction<void Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_acquire_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ma_uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_read(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_readPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_pcm_rb_acquire_read');
  late final _ma_pcm_rb_acquire_read = _ma_pcm_rb_acquire_readPtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_pcm_rb_commit_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_pcm_rb_commit_read(
      pRB,
      sizeInFrames,
      pBufferOut,
    );
  }

  late final _ma_pcm_rb_commit_readPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_pcm_rb>, ma_uint32,
              ffi.Pointer<ffi.Void>)>>('ma_pcm_rb_commit_read');
  late final _ma_pcm_rb_commit_read = _ma_pcm_rb_commit_readPtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_pcm_rb_acquire_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ma_uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_write(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_writePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_pcm_rb_acquire_write');
  late final _ma_pcm_rb_acquire_write = _ma_pcm_rb_acquire_writePtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_pcm_rb_commit_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pBufferOut,
  ) {
    return _ma_pcm_rb_commit_write(
      pRB,
      sizeInFrames,
      pBufferOut,
    );
  }

  late final _ma_pcm_rb_commit_writePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_pcm_rb>, ma_uint32,
              ffi.Pointer<ffi.Void>)>>('ma_pcm_rb_commit_write');
  late final _ma_pcm_rb_commit_write = _ma_pcm_rb_commit_writePtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_pcm_rb_seek_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_read(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_readPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_seek_read');
  late final _ma_pcm_rb_seek_read = _ma_pcm_rb_seek_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_pcm_rb_seek_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_write(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_writePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_seek_write');
  late final _ma_pcm_rb_seek_write = _ma_pcm_rb_seek_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_pcm_rb_pointer_distance(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_pcm_rb_pointer_distancePtr =
      _lookup<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_pointer_distance');
  late final _ma_pcm_rb_pointer_distance = _ma_pcm_rb_pointer_distancePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_available_read(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_read(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_readPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_available_read');
  late final _ma_pcm_rb_available_read = _ma_pcm_rb_available_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_available_write(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_write(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_writePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_available_write');
  late final _ma_pcm_rb_available_write = _ma_pcm_rb_available_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_subbuffer_size(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_sizePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_subbuffer_size');
  late final _ma_pcm_rb_get_subbuffer_size = _ma_pcm_rb_get_subbuffer_sizePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_subbuffer_stride(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_stridePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_subbuffer_stride');
  late final _ma_pcm_rb_get_subbuffer_stride =
      _ma_pcm_rb_get_subbuffer_stridePtr
          .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_subbuffer_offset(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_pcm_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_offsetPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(ffi.Pointer<ma_pcm_rb>,
              ma_uint32)>>('ma_pcm_rb_get_subbuffer_offset');
  late final _ma_pcm_rb_get_subbuffer_offset =
      _ma_pcm_rb_get_subbuffer_offsetPtr
          .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  ffi.Pointer<ffi.Void> ma_pcm_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_pcm_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_pcm_rb>, ma_uint32,
              ffi.Pointer<ffi.Void>)>>('ma_pcm_rb_get_subbuffer_ptr');
  late final _ma_pcm_rb_get_subbuffer_ptr =
      _ma_pcm_rb_get_subbuffer_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ma_pcm_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_duplex_rb_init(
    int captureFormat,
    int captureChannels,
    int sampleRate,
    int captureInternalSampleRate,
    int captureInternalPeriodSizeInFrames,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_init(
      captureFormat,
      captureChannels,
      sampleRate,
      captureInternalSampleRate,
      captureInternalPeriodSizeInFrames,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_duplex_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_duplex_rb>)>>('ma_duplex_rb_init');
  late final _ma_duplex_rb_init = _ma_duplex_rb_initPtr.asFunction<
      int Function(int, int, int, int, int,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_duplex_rb>)>();

  int ma_duplex_rb_uninit(
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_uninit(
      pRB,
    );
  }

  late final _ma_duplex_rb_uninitPtr = _lookup<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_duplex_rb>)>>(
      'ma_duplex_rb_uninit');
  late final _ma_duplex_rb_uninit = _ma_duplex_rb_uninitPtr
      .asFunction<int Function(ffi.Pointer<ma_duplex_rb>)>();

  /// Miscellaneous Helpers
  ffi.Pointer<ffi.Int8> ma_result_description(
    int result,
  ) {
    return _ma_result_description(
      result,
    );
  }

  late final _ma_result_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ma_result)>>(
          'ma_result_description');
  late final _ma_result_description = _ma_result_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<ffi.Void> ma_malloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_malloc(
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              size_t, ffi.Pointer<ma_allocation_callbacks>)>>('ma_malloc');
  late final _ma_malloc = _ma_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ffi.Void> ma_realloc(
    ffi.Pointer<ffi.Void> p,
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_realloc(
      p,
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_realloc');
  late final _ma_realloc = _ma_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_allocation_callbacks>)>();

  void ma_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_free');
  late final _ma_free = _ma_freePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ffi.Void> ma_aligned_malloc(
    int sz,
    int alignment,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_malloc(
      sz,
      alignment,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(size_t, size_t,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_aligned_malloc');
  late final _ma_aligned_malloc = _ma_aligned_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, int, ffi.Pointer<ma_allocation_callbacks>)>();

  void ma_aligned_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_aligned_free');
  late final _ma_aligned_free = _ma_aligned_freePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ffi.Int8> ma_get_format_name(
    int format,
  ) {
    return _ma_get_format_name(
      format,
    );
  }

  late final _ma_get_format_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'ma_get_format_name');
  late final _ma_get_format_name =
      _ma_get_format_namePtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void ma_blend_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<ffi.Float> pInA,
    ffi.Pointer<ffi.Float> pInB,
    double factor,
    int channels,
  ) {
    return _ma_blend_f32(
      pOut,
      pInA,
      pInB,
      factor,
      channels,
    );
  }

  late final _ma_blend_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Float, ma_uint32)>>('ma_blend_f32');
  late final _ma_blend_f32 = _ma_blend_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, double, int)>();

  int ma_get_bytes_per_sample(
    int format,
  ) {
    return _ma_get_bytes_per_sample(
      format,
    );
  }

  late final _ma_get_bytes_per_samplePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Int32)>>(
          'ma_get_bytes_per_sample');
  late final _ma_get_bytes_per_sample =
      _ma_get_bytes_per_samplePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> ma_log_level_to_string(
    int logLevel,
  ) {
    return _ma_log_level_to_string(
      logLevel,
    );
  }

  late final _ma_log_level_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ma_uint32)>>(
          'ma_log_level_to_string');
  late final _ma_log_level_to_string = _ma_log_level_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ma_context_config ma_context_config_init() {
    return _ma_context_config_init();
  }

  late final _ma_context_config_initPtr =
      _lookup<ffi.NativeFunction<ma_context_config Function()>>(
          'ma_context_config_init');
  late final _ma_context_config_init =
      _ma_context_config_initPtr.asFunction<ma_context_config Function()>();

  int ma_context_init(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pConfig,
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_init(
      backends,
      backendCount,
      pConfig,
      pContext,
    );
  }

  late final _ma_context_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_context>)>>('ma_context_init');
  late final _ma_context_init = _ma_context_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ma_context>)>();

  int ma_context_uninit(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_uninit(
      pContext,
    );
  }

  late final _ma_context_uninitPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_context>)>>(
          'ma_context_uninit');
  late final _ma_context_uninit =
      _ma_context_uninitPtr.asFunction<int Function(ffi.Pointer<ma_context>)>();

  int ma_context_sizeof() {
    return _ma_context_sizeof();
  }

  late final _ma_context_sizeofPtr =
      _lookup<ffi.NativeFunction<size_t Function()>>('ma_context_sizeof');
  late final _ma_context_sizeof =
      _ma_context_sizeofPtr.asFunction<int Function()>();

  ffi.Pointer<ma_log> ma_context_get_log(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_get_log(
      pContext,
    );
  }

  late final _ma_context_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_context>)>>('ma_context_get_log');
  late final _ma_context_get_log = _ma_context_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_context>)>();

  int ma_context_enumerate_devices(
    ffi.Pointer<ma_context> pContext,
    ma_enum_devices_callback_proc callback,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_context_enumerate_devices(
      pContext,
      callback,
      pUserData,
    );
  }

  late final _ma_context_enumerate_devicesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>>('ma_context_enumerate_devices');
  late final _ma_context_enumerate_devices =
      _ma_context_enumerate_devicesPtr.asFunction<
          int Function(ffi.Pointer<ma_context>, ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>();

  int ma_context_get_devices(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppPlaybackDeviceInfos,
    ffi.Pointer<ma_uint32> pPlaybackDeviceCount,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppCaptureDeviceInfos,
    ffi.Pointer<ma_uint32> pCaptureDeviceCount,
  ) {
    return _ma_context_get_devices(
      pContext,
      ppPlaybackDeviceInfos,
      pPlaybackDeviceCount,
      ppCaptureDeviceInfos,
      pCaptureDeviceCount,
    );
  }

  late final _ma_context_get_devicesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>)>>('ma_context_get_devices');
  late final _ma_context_get_devices = _ma_context_get_devicesPtr.asFunction<
      int Function(
          ffi.Pointer<ma_context>,
          ffi.Pointer<ffi.Pointer<ma_device_info>>,
          ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ma_device_info>>,
          ffi.Pointer<ma_uint32>)>();

  int ma_context_get_device_info(
    ffi.Pointer<ma_context> pContext,
    int deviceType,
    ffi.Pointer<ma_device_id> pDeviceID,
    int shareMode,
    ffi.Pointer<ma_device_info> pDeviceInfo,
  ) {
    return _ma_context_get_device_info(
      pContext,
      deviceType,
      pDeviceID,
      shareMode,
      pDeviceInfo,
    );
  }

  late final _ma_context_get_device_infoPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ffi.Int32,
              ffi.Pointer<ma_device_id>,
              ffi.Int32,
              ffi.Pointer<ma_device_info>)>>('ma_context_get_device_info');
  late final _ma_context_get_device_info =
      _ma_context_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<ma_context>, int, ffi.Pointer<ma_device_id>,
              int, ffi.Pointer<ma_device_info>)>();

  int ma_context_is_loopback_supported(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_is_loopback_supported(
      pContext,
    );
  }

  late final _ma_context_is_loopback_supportedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_context>)>>(
          'ma_context_is_loopback_supported');
  late final _ma_context_is_loopback_supported =
      _ma_context_is_loopback_supportedPtr
          .asFunction<int Function(ffi.Pointer<ma_context>)>();

  ma_device_config ma_device_config_init(
    int deviceType,
  ) {
    return _ma_device_config_init(
      deviceType,
    );
  }

  late final _ma_device_config_initPtr =
      _lookup<ffi.NativeFunction<ma_device_config Function(ffi.Int32)>>(
          'ma_device_config_init');
  late final _ma_device_config_init =
      _ma_device_config_initPtr.asFunction<ma_device_config Function(int)>();

  int ma_device_init(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_init(
      pContext,
      pConfig,
      pDevice,
    );
  }

  late final _ma_device_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>>('ma_device_init');
  late final _ma_device_init = _ma_device_initPtr.asFunction<
      int Function(ffi.Pointer<ma_context>, ffi.Pointer<ma_device_config>,
          ffi.Pointer<ma_device>)>();

  int ma_device_init_ex(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pContextConfig,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_init_ex(
      backends,
      backendCount,
      pContextConfig,
      pConfig,
      pDevice,
    );
  }

  late final _ma_device_init_exPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>>('ma_device_init_ex');
  late final _ma_device_init_ex = _ma_device_init_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ma_device_config>, ffi.Pointer<ma_device>)>();

  void ma_device_uninit(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_uninit(
      pDevice,
    );
  }

  late final _ma_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_device>)>>(
          'ma_device_uninit');
  late final _ma_device_uninit =
      _ma_device_uninitPtr.asFunction<void Function(ffi.Pointer<ma_device>)>();

  ffi.Pointer<ma_context> ma_device_get_context(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_context(
      pDevice,
    );
  }

  late final _ma_device_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_context> Function(
              ffi.Pointer<ma_device>)>>('ma_device_get_context');
  late final _ma_device_get_context = _ma_device_get_contextPtr
      .asFunction<ffi.Pointer<ma_context> Function(ffi.Pointer<ma_device>)>();

  ffi.Pointer<ma_log> ma_device_get_log(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_log(
      pDevice,
    );
  }

  late final _ma_device_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_device>)>>('ma_device_get_log');
  late final _ma_device_get_log = _ma_device_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_device>)>();

  int ma_device_start(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_start(
      pDevice,
    );
  }

  late final _ma_device_startPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>(
          'ma_device_start');
  late final _ma_device_start =
      _ma_device_startPtr.asFunction<int Function(ffi.Pointer<ma_device>)>();

  int ma_device_stop(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_stop(
      pDevice,
    );
  }

  late final _ma_device_stopPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>(
          'ma_device_stop');
  late final _ma_device_stop =
      _ma_device_stopPtr.asFunction<int Function(ffi.Pointer<ma_device>)>();

  int ma_device_is_started(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_is_started(
      pDevice,
    );
  }

  late final _ma_device_is_startedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_is_started');
  late final _ma_device_is_started = _ma_device_is_startedPtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>();

  int ma_device_get_state(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_state(
      pDevice,
    );
  }

  late final _ma_device_get_statePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_get_state');
  late final _ma_device_get_state = _ma_device_get_statePtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>();

  int ma_device_set_master_volume(
    ffi.Pointer<ma_device> pDevice,
    double volume,
  ) {
    return _ma_device_set_master_volume(
      pDevice,
      volume,
    );
  }

  late final _ma_device_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_device>,
              ffi.Float)>>('ma_device_set_master_volume');
  late final _ma_device_set_master_volume = _ma_device_set_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_device>, double)>();

  int ma_device_get_master_volume(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_device_get_master_volume(
      pDevice,
      pVolume,
    );
  }

  late final _ma_device_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Float>)>>('ma_device_get_master_volume');
  late final _ma_device_get_master_volume =
      _ma_device_get_master_volumePtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>();

  int ma_device_set_master_gain_db(
    ffi.Pointer<ma_device> pDevice,
    double gainDB,
  ) {
    return _ma_device_set_master_gain_db(
      pDevice,
      gainDB,
    );
  }

  late final _ma_device_set_master_gain_dbPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_device>,
              ffi.Float)>>('ma_device_set_master_gain_db');
  late final _ma_device_set_master_gain_db = _ma_device_set_master_gain_dbPtr
      .asFunction<int Function(ffi.Pointer<ma_device>, double)>();

  int ma_device_get_master_gain_db(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pGainDB,
  ) {
    return _ma_device_get_master_gain_db(
      pDevice,
      pGainDB,
    );
  }

  late final _ma_device_get_master_gain_dbPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Float>)>>('ma_device_get_master_gain_db');
  late final _ma_device_get_master_gain_db =
      _ma_device_get_master_gain_dbPtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>();

  int ma_device_handle_backend_data_callback(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    int frameCount,
  ) {
    return _ma_device_handle_backend_data_callback(
      pDevice,
      pOutput,
      pInput,
      frameCount,
    );
  }

  late final _ma_device_handle_backend_data_callbackPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>>('ma_device_handle_backend_data_callback');
  late final _ma_device_handle_backend_data_callback =
      _ma_device_handle_backend_data_callbackPtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_calculate_buffer_size_in_frames_from_descriptor(
    ffi.Pointer<ma_device_descriptor> pDescriptor,
    int nativeSampleRate,
    int performanceProfile,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_descriptor(
      pDescriptor,
      nativeSampleRate,
      performanceProfile,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_descriptorPtr = _lookup<
          ffi.NativeFunction<
              ma_uint32 Function(
                  ffi.Pointer<ma_device_descriptor>, ma_uint32, ffi.Int32)>>(
      'ma_calculate_buffer_size_in_frames_from_descriptor');
  late final _ma_calculate_buffer_size_in_frames_from_descriptor =
      _ma_calculate_buffer_size_in_frames_from_descriptorPtr.asFunction<
          int Function(ffi.Pointer<ma_device_descriptor>, int, int)>();

  ffi.Pointer<ffi.Int8> ma_get_backend_name(
    int backend,
  ) {
    return _ma_get_backend_name(
      backend,
    );
  }

  late final _ma_get_backend_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'ma_get_backend_name');
  late final _ma_get_backend_name =
      _ma_get_backend_namePtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int ma_is_backend_enabled(
    int backend,
  ) {
    return _ma_is_backend_enabled(
      backend,
    );
  }

  late final _ma_is_backend_enabledPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>(
          'ma_is_backend_enabled');
  late final _ma_is_backend_enabled =
      _ma_is_backend_enabledPtr.asFunction<int Function(int)>();

  int ma_get_enabled_backends(
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCap,
    ffi.Pointer<size_t> pBackendCount,
  ) {
    return _ma_get_enabled_backends(
      pBackends,
      backendCap,
      pBackendCount,
    );
  }

  late final _ma_get_enabled_backendsPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ffi.Int32>, size_t,
              ffi.Pointer<size_t>)>>('ma_get_enabled_backends');
  late final _ma_get_enabled_backends = _ma_get_enabled_backendsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<size_t>)>();

  int ma_is_loopback_supported(
    int backend,
  ) {
    return _ma_is_loopback_supported(
      backend,
    );
  }

  late final _ma_is_loopback_supportedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>(
          'ma_is_loopback_supported');
  late final _ma_is_loopback_supported =
      _ma_is_loopback_supportedPtr.asFunction<int Function(int)>();

  int ma_spinlock_lock(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_lock(
      pSpinlock,
    );
  }

  late final _ma_spinlock_lockPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_lock');
  late final _ma_spinlock_lock =
      _ma_spinlock_lockPtr.asFunction<int Function(ffi.Pointer<ma_spinlock>)>();

  int ma_spinlock_lock_noyield(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_lock_noyield(
      pSpinlock,
    );
  }

  late final _ma_spinlock_lock_noyieldPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_lock_noyield');
  late final _ma_spinlock_lock_noyield = _ma_spinlock_lock_noyieldPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>();

  int ma_spinlock_unlock(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_unlock(
      pSpinlock,
    );
  }

  late final _ma_spinlock_unlockPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_unlock');
  late final _ma_spinlock_unlock = _ma_spinlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>();

  int ma_mutex_init(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_init(
      pMutex,
    );
  }

  late final _ma_mutex_initPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_init');
  late final _ma_mutex_init =
      _ma_mutex_initPtr.asFunction<int Function(ffi.Pointer<ma_mutex>)>();

  void ma_mutex_uninit(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_uninit(
      pMutex,
    );
  }

  late final _ma_mutex_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_uninit');
  late final _ma_mutex_uninit =
      _ma_mutex_uninitPtr.asFunction<void Function(ffi.Pointer<ma_mutex>)>();

  void ma_mutex_lock(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_lock(
      pMutex,
    );
  }

  late final _ma_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_lock');
  late final _ma_mutex_lock =
      _ma_mutex_lockPtr.asFunction<void Function(ffi.Pointer<ma_mutex>)>();

  void ma_mutex_unlock(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_unlock(
      pMutex,
    );
  }

  late final _ma_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_unlock');
  late final _ma_mutex_unlock =
      _ma_mutex_unlockPtr.asFunction<void Function(ffi.Pointer<ma_mutex>)>();

  int ma_event_init(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_init(
      pEvent,
    );
  }

  late final _ma_event_initPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_event>)>>(
          'ma_event_init');
  late final _ma_event_init =
      _ma_event_initPtr.asFunction<int Function(ffi.Pointer<ma_event>)>();

  void ma_event_uninit(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_uninit(
      pEvent,
    );
  }

  late final _ma_event_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_event>)>>(
          'ma_event_uninit');
  late final _ma_event_uninit =
      _ma_event_uninitPtr.asFunction<void Function(ffi.Pointer<ma_event>)>();

  int ma_event_wait(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_wait(
      pEvent,
    );
  }

  late final _ma_event_waitPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_event>)>>(
          'ma_event_wait');
  late final _ma_event_wait =
      _ma_event_waitPtr.asFunction<int Function(ffi.Pointer<ma_event>)>();

  int ma_event_signal(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_signal(
      pEvent,
    );
  }

  late final _ma_event_signalPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_event>)>>(
          'ma_event_signal');
  late final _ma_event_signal =
      _ma_event_signalPtr.asFunction<int Function(ffi.Pointer<ma_event>)>();

  /// Utiltities
  int ma_scale_buffer_size(
    int baseBufferSize,
    double scale,
  ) {
    return _ma_scale_buffer_size(
      baseBufferSize,
      scale,
    );
  }

  late final _ma_scale_buffer_sizePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ffi.Float)>>(
          'ma_scale_buffer_size');
  late final _ma_scale_buffer_size =
      _ma_scale_buffer_sizePtr.asFunction<int Function(int, double)>();

  int ma_calculate_buffer_size_in_milliseconds_from_frames(
    int bufferSizeInFrames,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_milliseconds_from_frames(
      bufferSizeInFrames,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_milliseconds_from_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>(
          'ma_calculate_buffer_size_in_milliseconds_from_frames');
  late final _ma_calculate_buffer_size_in_milliseconds_from_frames =
      _ma_calculate_buffer_size_in_milliseconds_from_framesPtr
          .asFunction<int Function(int, int)>();

  int ma_calculate_buffer_size_in_frames_from_milliseconds(
    int bufferSizeInMilliseconds,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_milliseconds(
      bufferSizeInMilliseconds,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>(
          'ma_calculate_buffer_size_in_frames_from_milliseconds');
  late final _ma_calculate_buffer_size_in_frames_from_milliseconds =
      _ma_calculate_buffer_size_in_frames_from_millisecondsPtr
          .asFunction<int Function(int, int)>();

  void ma_copy_pcm_frames(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_copy_pcm_frames(
      dst,
      src,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_copy_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32, ma_uint32)>>('ma_copy_pcm_frames');
  late final _ma_copy_pcm_frames = _ma_copy_pcm_framesPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  void ma_silence_pcm_frames(
    ffi.Pointer<ffi.Void> p,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_silence_pcm_frames(
      p,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_silence_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32,
              ma_uint32)>>('ma_silence_pcm_frames');
  late final _ma_silence_pcm_frames = _ma_silence_pcm_framesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Int32, ma_uint32)>>('ma_offset_pcm_frames_ptr');
  late final _ma_offset_pcm_frames_ptr =
      _ma_offset_pcm_frames_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_const_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_const_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Int32, ma_uint32)>>('ma_offset_pcm_frames_const_ptr');
  late final _ma_offset_pcm_frames_const_ptr =
      _ma_offset_pcm_frames_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  void ma_clip_samples_f32(
    ffi.Pointer<ffi.Float> p,
    int sampleCount,
  ) {
    return _ma_clip_samples_f32(
      p,
      sampleCount,
    );
  }

  late final _ma_clip_samples_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>, ma_uint64)>>('ma_clip_samples_f32');
  late final _ma_clip_samples_f32 = _ma_clip_samples_f32Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int)>();

  void ma_copy_and_apply_volume_factor_u8(
    ffi.Pointer<ma_uint8> pSamplesOut,
    ffi.Pointer<ma_uint8> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_u8(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_u8');
  late final _ma_copy_and_apply_volume_factor_u8 =
      _ma_copy_and_apply_volume_factor_u8Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>, int, double)>();

  void ma_copy_and_apply_volume_factor_s16(
    ffi.Pointer<ma_int16> pSamplesOut,
    ffi.Pointer<ma_int16> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s16(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s16');
  late final _ma_copy_and_apply_volume_factor_s16 =
      _ma_copy_and_apply_volume_factor_s16Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>, int, double)>();

  void ma_copy_and_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamplesOut,
    ffi.Pointer<ffi.Void> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s24(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s24');
  late final _ma_copy_and_apply_volume_factor_s24 =
      _ma_copy_and_apply_volume_factor_s24Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, double)>();

  void ma_copy_and_apply_volume_factor_s32(
    ffi.Pointer<ma_int32> pSamplesOut,
    ffi.Pointer<ma_int32> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s32');
  late final _ma_copy_and_apply_volume_factor_s32 =
      _ma_copy_and_apply_volume_factor_s32Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>, int, double)>();

  void ma_copy_and_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamplesOut,
    ffi.Pointer<ffi.Float> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_f32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_f32');
  late final _ma_copy_and_apply_volume_factor_f32 =
      _ma_copy_and_apply_volume_factor_f32Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, double)>();

  void ma_apply_volume_factor_u8(
    ffi.Pointer<ma_uint8> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_u8(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_u8');
  late final _ma_apply_volume_factor_u8 = _ma_apply_volume_factor_u8Ptr
      .asFunction<void Function(ffi.Pointer<ma_uint8>, int, double)>();

  void ma_apply_volume_factor_s16(
    ffi.Pointer<ma_int16> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s16(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s16');
  late final _ma_apply_volume_factor_s16 = _ma_apply_volume_factor_s16Ptr
      .asFunction<void Function(ffi.Pointer<ma_int16>, int, double)>();

  void ma_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s24(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s24');
  late final _ma_apply_volume_factor_s24 = _ma_apply_volume_factor_s24Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, double)>();

  void ma_apply_volume_factor_s32(
    ffi.Pointer<ma_int32> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s32');
  late final _ma_apply_volume_factor_s32 = _ma_apply_volume_factor_s32Ptr
      .asFunction<void Function(ffi.Pointer<ma_int32>, int, double)>();

  void ma_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_f32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_f32');
  late final _ma_apply_volume_factor_f32 = _ma_apply_volume_factor_f32Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int, double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ma_uint8> pPCMFramesOut,
    ffi.Pointer<ma_uint8> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_u8(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_uint8>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_u8');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8 =
      _ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr.asFunction<
          void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ma_int16> pPCMFramesOut,
    ffi.Pointer<ma_int16> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s16(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s16');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr.asFunction<
          void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pPCMFramesOut,
    ffi.Pointer<ffi.Void> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s24(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s24');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ma_int32> pPCMFramesOut,
    ffi.Pointer<ma_int32> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s32(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s32');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr.asFunction<
          void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pPCMFramesOut,
    ffi.Pointer<ffi.Float> pPCMFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_f32(
      pPCMFramesOut,
      pPCMFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_f32');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              int, double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames(
      pFramesOut,
      pFramesIn,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames');
  late final _ma_copy_and_apply_volume_factor_pcm_frames =
      _ma_copy_and_apply_volume_factor_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              int, double)>();

  void ma_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ma_uint8> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_u8(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_u8');
  late final _ma_apply_volume_factor_pcm_frames_u8 =
      _ma_apply_volume_factor_pcm_frames_u8Ptr
          .asFunction<void Function(ffi.Pointer<ma_uint8>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ma_int16> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s16(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s16');
  late final _ma_apply_volume_factor_pcm_frames_s16 =
      _ma_apply_volume_factor_pcm_frames_s16Ptr
          .asFunction<void Function(ffi.Pointer<ma_int16>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s24(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s24');
  late final _ma_apply_volume_factor_pcm_frames_s24 =
      _ma_apply_volume_factor_pcm_frames_s24Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ma_int32> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s32');
  late final _ma_apply_volume_factor_pcm_frames_s32 =
      _ma_apply_volume_factor_pcm_frames_s32Ptr
          .asFunction<void Function(ffi.Pointer<ma_int32>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_f32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_f32');
  late final _ma_apply_volume_factor_pcm_frames_f32 =
      _ma_apply_volume_factor_pcm_frames_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames(
      pFrames,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32,
              ma_uint32, ffi.Float)>>('ma_apply_volume_factor_pcm_frames');
  late final _ma_apply_volume_factor_pcm_frames =
      _ma_apply_volume_factor_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, int, int, double)>();

  double ma_factor_to_gain_db(
    double factor,
  ) {
    return _ma_factor_to_gain_db(
      factor,
    );
  }

  late final _ma_factor_to_gain_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'ma_factor_to_gain_db');
  late final _ma_factor_to_gain_db =
      _ma_factor_to_gain_dbPtr.asFunction<double Function(double)>();

  double ma_gain_db_to_factor(
    double gain,
  ) {
    return _ma_gain_db_to_factor(
      gain,
    );
  }

  late final _ma_gain_db_to_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'ma_gain_db_to_factor');
  late final _ma_gain_db_to_factor =
      _ma_gain_db_to_factorPtr.asFunction<double Function(double)>();

  ma_data_source_config ma_data_source_config_init() {
    return _ma_data_source_config_init();
  }

  late final _ma_data_source_config_initPtr =
      _lookup<ffi.NativeFunction<ma_data_source_config Function()>>(
          'ma_data_source_config_init');
  late final _ma_data_source_config_init = _ma_data_source_config_initPtr
      .asFunction<ma_data_source_config Function()>();

  int ma_data_source_init(
    ffi.Pointer<ma_data_source_config> pConfig,
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_init(
      pConfig,
      pDataSource,
    );
  }

  late final _ma_data_source_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_source_config>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_init');
  late final _ma_data_source_init = _ma_data_source_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_data_source_config>, ffi.Pointer<ma_data_source>)>();

  void ma_data_source_uninit(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_uninit(
      pDataSource,
    );
  }

  late final _ma_data_source_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_uninit');
  late final _ma_data_source_uninit = _ma_data_source_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_data_source>)>();

  int ma_data_source_read_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
    int loop,
  ) {
    return _ma_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
      loop,
    );
  }

  late final _ma_data_source_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>,
              ma_bool32)>>('ma_data_source_read_pcm_frames');
  late final _ma_data_source_read_pcm_frames =
      _ma_data_source_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>, int)>();

  int ma_data_source_seek_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesSeeked,
    int loop,
  ) {
    return _ma_data_source_seek_pcm_frames(
      pDataSource,
      frameCount,
      pFramesSeeked,
      loop,
    );
  }

  late final _ma_data_source_seek_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>,
              ma_uint64,
              ffi.Pointer<ma_uint64>,
              ma_bool32)>>('ma_data_source_seek_pcm_frames');
  late final _ma_data_source_seek_pcm_frames =
      _ma_data_source_seek_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_source>, int, ffi.Pointer<ma_uint64>, int)>();

  int ma_data_source_seek_to_pcm_frame(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameIndex,
  ) {
    return _ma_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  late final _ma_data_source_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_source>,
              ma_uint64)>>('ma_data_source_seek_to_pcm_frame');
  late final _ma_data_source_seek_to_pcm_frame =
      _ma_data_source_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int)>();

  int ma_data_source_map(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_data_source_map(
      pDataSource,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_data_source_mapPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_data_source_map');
  late final _ma_data_source_map = _ma_data_source_mapPtr.asFunction<
      int Function(ffi.Pointer<ma_data_source>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ma_uint64>)>();

  int ma_data_source_unmap(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameCount,
  ) {
    return _ma_data_source_unmap(
      pDataSource,
      frameCount,
    );
  }

  late final _ma_data_source_unmapPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>, ma_uint64)>>('ma_data_source_unmap');
  late final _ma_data_source_unmap = _ma_data_source_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_data_source>, int)>();

  int ma_data_source_get_data_format(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
  ) {
    return _ma_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
    );
  }

  late final _ma_data_source_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>>('ma_data_source_get_data_format');
  late final _ma_data_source_get_data_format =
      _ma_data_source_get_data_formatPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>)>();

  int ma_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_data_source_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_cursor_in_pcm_frames');
  late final _ma_data_source_get_cursor_in_pcm_frames =
      _ma_data_source_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>();

  int ma_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  late final _ma_data_source_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_length_in_pcm_frames');
  late final _ma_data_source_get_length_in_pcm_frames =
      _ma_data_source_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_init(
    int format,
    int channels,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_init(
      format,
      channels,
      pData,
      sizeInFrames,
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_init');
  late final _ma_audio_buffer_ref_init =
      _ma_audio_buffer_ref_initPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_audio_buffer_ref>)>();

  void ma_audio_buffer_ref_uninit(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_uninit(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_uninit');
  late final _ma_audio_buffer_ref_uninit = _ma_audio_buffer_ref_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_audio_buffer_ref>)>();

  int ma_audio_buffer_ref_set_data(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
  ) {
    return _ma_audio_buffer_ref_set_data(
      pAudioBufferRef,
      pData,
      sizeInFrames,
    );
  }

  late final _ma_audio_buffer_ref_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_audio_buffer_ref_set_data');
  late final _ma_audio_buffer_ref_set_data =
      _ma_audio_buffer_ref_set_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ffi.Void>, int)>();

  int ma_audio_buffer_ref_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_ref_read_pcm_frames(
      pAudioBufferRef,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_ref_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>>('ma_audio_buffer_ref_read_pcm_frames');
  late final _ma_audio_buffer_ref_read_pcm_frames =
      _ma_audio_buffer_ref_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ffi.Void>,
              int, int)>();

  int ma_audio_buffer_ref_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameIndex,
  ) {
    return _ma_audio_buffer_ref_seek_to_pcm_frame(
      pAudioBufferRef,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_ref_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer_ref>,
              ma_uint64)>>('ma_audio_buffer_ref_seek_to_pcm_frame');
  late final _ma_audio_buffer_ref_seek_to_pcm_frame =
      _ma_audio_buffer_ref_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>, int)>();

  int ma_audio_buffer_ref_map(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_ref_map(
      pAudioBufferRef,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_ref_mapPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_ref_map');
  late final _ma_audio_buffer_ref_map = _ma_audio_buffer_ref_mapPtr.asFunction<
      int Function(ffi.Pointer<ma_audio_buffer_ref>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_unmap(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameCount,
  ) {
    return _ma_audio_buffer_ref_unmap(
      pAudioBufferRef,
      frameCount,
    );
  }

  late final _ma_audio_buffer_ref_unmapPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer_ref>,
              ma_uint64)>>('ma_audio_buffer_ref_unmap');
  late final _ma_audio_buffer_ref_unmap = _ma_audio_buffer_ref_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>, int)>();

  int ma_audio_buffer_ref_at_end(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_at_end(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_at_endPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_at_end');
  late final _ma_audio_buffer_ref_at_end = _ma_audio_buffer_ref_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>)>();

  int ma_audio_buffer_ref_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_audio_buffer_ref_get_cursor_in_pcm_frames(
      pAudioBufferRef,
      pCursor,
    );
  }

  late final _ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_cursor_in_pcm_frames');
  late final _ma_audio_buffer_ref_get_cursor_in_pcm_frames =
      _ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_audio_buffer_ref_get_length_in_pcm_frames(
      pAudioBufferRef,
      pLength,
    );
  }

  late final _ma_audio_buffer_ref_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_length_in_pcm_frames');
  late final _ma_audio_buffer_ref_get_length_in_pcm_frames =
      _ma_audio_buffer_ref_get_length_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_get_available_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_ref_get_available_frames(
      pAudioBufferRef,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_ref_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_available_frames');
  late final _ma_audio_buffer_ref_get_available_frames =
      _ma_audio_buffer_ref_get_available_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>();

  ma_audio_buffer_config ma_audio_buffer_config_init(
    int format,
    int channels,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_audio_buffer_config_init(
      format,
      channels,
      sizeInFrames,
      pData,
      pAllocationCallbacks,
    );
  }

  late final _ma_audio_buffer_config_initPtr = _lookup<
          ffi.NativeFunction<
              ma_audio_buffer_config Function(
                  ffi.Int32,
                  ma_uint32,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_audio_buffer_config_init');
  late final _ma_audio_buffer_config_init =
      _ma_audio_buffer_config_initPtr.asFunction<
          ma_audio_buffer_config Function(int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_audio_buffer_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>>('ma_audio_buffer_init');
  late final _ma_audio_buffer_init = _ma_audio_buffer_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_audio_buffer_config>, ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_init_copy(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init_copy(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_init_copyPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>>('ma_audio_buffer_init_copy');
  late final _ma_audio_buffer_init_copy =
      _ma_audio_buffer_init_copyPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_alloc_and_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
  ) {
    return _ma_audio_buffer_alloc_and_init(
      pConfig,
      ppAudioBuffer,
    );
  }

  late final _ma_audio_buffer_alloc_and_initPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(ffi.Pointer<ma_audio_buffer_config>,
                  ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>>(
      'ma_audio_buffer_alloc_and_init');
  late final _ma_audio_buffer_alloc_and_init =
      _ma_audio_buffer_alloc_and_initPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>();

  void ma_audio_buffer_uninit(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_uninit');
  late final _ma_audio_buffer_uninit = _ma_audio_buffer_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_audio_buffer>)>();

  void ma_audio_buffer_uninit_and_free(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit_and_free(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninit_and_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_uninit_and_free');
  late final _ma_audio_buffer_uninit_and_free =
      _ma_audio_buffer_uninit_and_freePtr
          .asFunction<void Function(ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_read_pcm_frames(
      pAudioBuffer,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>>('ma_audio_buffer_read_pcm_frames');
  late final _ma_audio_buffer_read_pcm_frames =
      _ma_audio_buffer_read_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ffi.Void>, int, int)>();

  int ma_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameIndex,
  ) {
    return _ma_audio_buffer_seek_to_pcm_frame(
      pAudioBuffer,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer>,
              ma_uint64)>>('ma_audio_buffer_seek_to_pcm_frame');
  late final _ma_audio_buffer_seek_to_pcm_frame =
      _ma_audio_buffer_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_audio_buffer>, int)>();

  int ma_audio_buffer_map(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_map(
      pAudioBuffer,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_mapPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_map');
  late final _ma_audio_buffer_map = _ma_audio_buffer_mapPtr.asFunction<
      int Function(ffi.Pointer<ma_audio_buffer>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_unmap(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameCount,
  ) {
    return _ma_audio_buffer_unmap(
      pAudioBuffer,
      frameCount,
    );
  }

  late final _ma_audio_buffer_unmapPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer>,
              ma_uint64)>>('ma_audio_buffer_unmap');
  late final _ma_audio_buffer_unmap = _ma_audio_buffer_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer>, int)>();

  int ma_audio_buffer_at_end(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_at_end(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_at_endPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_at_end');
  late final _ma_audio_buffer_at_end = _ma_audio_buffer_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_audio_buffer_get_cursor_in_pcm_frames(
      pAudioBuffer,
      pCursor,
    );
  }

  late final _ma_audio_buffer_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_get_cursor_in_pcm_frames');
  late final _ma_audio_buffer_get_cursor_in_pcm_frames =
      _ma_audio_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_audio_buffer_get_length_in_pcm_frames(
      pAudioBuffer,
      pLength,
    );
  }

  late final _ma_audio_buffer_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_get_length_in_pcm_frames');
  late final _ma_audio_buffer_get_length_in_pcm_frames =
      _ma_audio_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_get_available_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_get_available_frames(
      pAudioBuffer,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_get_available_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_get_available_frames');
  late final _ma_audio_buffer_get_available_frames =
      _ma_audio_buffer_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_vfs_open(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    int openMode,
    ffi.Pointer<ma_vfs_file> pFile,
  ) {
    return _ma_vfs_open(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_openPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>>('ma_vfs_open');
  late final _ma_vfs_open = _ma_vfs_openPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ma_vfs_file>)>();

  int ma_vfs_open_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<wchar_t> pFilePath,
    int openMode,
    ffi.Pointer<ma_vfs_file> pFile,
  ) {
    return _ma_vfs_open_w(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_open_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>>('ma_vfs_open_w');
  late final _ma_vfs_open_w = _ma_vfs_open_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>, int,
          ffi.Pointer<ma_vfs_file>)>();

  int ma_vfs_close(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
  ) {
    return _ma_vfs_close(
      pVFS,
      file,
    );
  }

  late final _ma_vfs_closePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>, ma_vfs_file)>>('ma_vfs_close');
  late final _ma_vfs_close = _ma_vfs_closePtr
      .asFunction<int Function(ffi.Pointer<ma_vfs>, ma_vfs_file)>();

  int ma_vfs_read(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ffi.Void> pDst,
    int sizeInBytes,
    ffi.Pointer<size_t> pBytesRead,
  ) {
    return _ma_vfs_read(
      pVFS,
      file,
      pDst,
      sizeInBytes,
      pBytesRead,
    );
  }

  late final _ma_vfs_readPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<size_t>)>>('ma_vfs_read');
  late final _ma_vfs_read = _ma_vfs_readPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<size_t>)>();

  int ma_vfs_write(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ffi.Void> pSrc,
    int sizeInBytes,
    ffi.Pointer<size_t> pBytesWritten,
  ) {
    return _ma_vfs_write(
      pVFS,
      file,
      pSrc,
      sizeInBytes,
      pBytesWritten,
    );
  }

  late final _ma_vfs_writePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<size_t>)>>('ma_vfs_write');
  late final _ma_vfs_write = _ma_vfs_writePtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<size_t>)>();

  int ma_vfs_seek(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    int offset,
    int origin,
  ) {
    return _ma_vfs_seek(
      pVFS,
      file,
      offset,
      origin,
    );
  }

  late final _ma_vfs_seekPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ma_int64,
              ffi.Int32)>>('ma_vfs_seek');
  late final _ma_vfs_seek = _ma_vfs_seekPtr
      .asFunction<int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, int, int)>();

  int ma_vfs_tell(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ma_int64> pCursor,
  ) {
    return _ma_vfs_tell(
      pVFS,
      file,
      pCursor,
    );
  }

  late final _ma_vfs_tellPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ma_int64>)>>('ma_vfs_tell');
  late final _ma_vfs_tell = _ma_vfs_tellPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_int64>)>();

  int ma_vfs_info(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ma_file_info> pInfo,
  ) {
    return _ma_vfs_info(
      pVFS,
      file,
      pInfo,
    );
  }

  late final _ma_vfs_infoPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ma_file_info>)>>('ma_vfs_info');
  late final _ma_vfs_info = _ma_vfs_infoPtr.asFunction<
      int Function(
          ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_file_info>)>();

  int ma_vfs_open_and_read_file(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<size_t> pSize,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_vfs_open_and_read_file(
      pVFS,
      pFilePath,
      ppData,
      pSize,
      pAllocationCallbacks,
    );
  }

  late final _ma_vfs_open_and_read_filePtr = _lookup<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_vfs>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_vfs_open_and_read_file');
  late final _ma_vfs_open_and_read_file =
      _ma_vfs_open_and_read_filePtr.asFunction<
          int Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_default_vfs_init(
    ffi.Pointer<ma_default_vfs> pVFS,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_default_vfs_init(
      pVFS,
      pAllocationCallbacks,
    );
  }

  late final _ma_default_vfs_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_default_vfs>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_default_vfs_init');
  late final _ma_default_vfs_init = _ma_default_vfs_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_default_vfs>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_decoding_backend_config ma_decoding_backend_config_init(
    int preferredFormat,
  ) {
    return _ma_decoding_backend_config_init(
      preferredFormat,
    );
  }

  late final _ma_decoding_backend_config_initPtr = _lookup<
          ffi.NativeFunction<ma_decoding_backend_config Function(ffi.Int32)>>(
      'ma_decoding_backend_config_init');
  late final _ma_decoding_backend_config_init =
      _ma_decoding_backend_config_initPtr
          .asFunction<ma_decoding_backend_config Function(int)>();

  ma_decoder_config ma_decoder_config_init(
    int outputFormat,
    int outputChannels,
    int outputSampleRate,
  ) {
    return _ma_decoder_config_init(
      outputFormat,
      outputChannels,
      outputSampleRate,
    );
  }

  late final _ma_decoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_decoder_config Function(
              ffi.Int32, ma_uint32, ma_uint32)>>('ma_decoder_config_init');
  late final _ma_decoder_config_init = _ma_decoder_config_initPtr
      .asFunction<ma_decoder_config Function(int, int, int)>();

  ma_decoder_config ma_decoder_config_init_default() {
    return _ma_decoder_config_init_default();
  }

  late final _ma_decoder_config_init_defaultPtr =
      _lookup<ffi.NativeFunction<ma_decoder_config Function()>>(
          'ma_decoder_config_init_default');
  late final _ma_decoder_config_init_default =
      _ma_decoder_config_init_defaultPtr
          .asFunction<ma_decoder_config Function()>();

  int ma_decoder_init(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init');
  late final _ma_decoder_init = _ma_decoder_initPtr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memoryPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory');
  late final _ma_decoder_init_memory = _ma_decoder_init_memoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfsPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs');
  late final _ma_decoder_init_vfs = _ma_decoder_init_vfsPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_w');
  late final _ma_decoder_init_vfs_w = _ma_decoder_init_vfs_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file');
  late final _ma_decoder_init_file = _ma_decoder_init_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_w(
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_w');
  late final _ma_decoder_init_file_w = _ma_decoder_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_uninit(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_uninit(
      pDecoder,
    );
  }

  late final _ma_decoder_uninitPtr =
      _lookup<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_decoder>)>>(
          'ma_decoder_uninit');
  late final _ma_decoder_uninit =
      _ma_decoder_uninitPtr.asFunction<int Function(ffi.Pointer<ma_decoder>)>();

  int ma_decoder_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_decoder_get_cursor_in_pcm_frames(
      pDecoder,
      pCursor,
    );
  }

  late final _ma_decoder_get_cursor_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_cursor_in_pcm_frames');
  late final _ma_decoder_get_cursor_in_pcm_frames =
      _ma_decoder_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  int ma_decoder_get_length_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_get_length_in_pcm_frames(
      pDecoder,
    );
  }

  late final _ma_decoder_get_length_in_pcm_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_decoder>)>>(
          'ma_decoder_get_length_in_pcm_frames');
  late final _ma_decoder_get_length_in_pcm_frames =
      _ma_decoder_get_length_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_decoder>)>();

  int ma_decoder_read_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    return _ma_decoder_read_pcm_frames(
      pDecoder,
      pFramesOut,
      frameCount,
    );
  }

  late final _ma_decoder_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_decoder_read_pcm_frames');
  late final _ma_decoder_read_pcm_frames =
      _ma_decoder_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ffi.Void>, int)>();

  int ma_decoder_seek_to_pcm_frame(
    ffi.Pointer<ma_decoder> pDecoder,
    int frameIndex,
  ) {
    return _ma_decoder_seek_to_pcm_frame(
      pDecoder,
      frameIndex,
    );
  }

  late final _ma_decoder_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_decoder>,
              ma_uint64)>>('ma_decoder_seek_to_pcm_frame');
  late final _ma_decoder_seek_to_pcm_frame = _ma_decoder_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_decoder>, int)>();

  int ma_decoder_get_available_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_decoder_get_available_frames(
      pDecoder,
      pAvailableFrames,
    );
  }

  late final _ma_decoder_get_available_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_available_frames');
  late final _ma_decoder_get_available_frames =
      _ma_decoder_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  int ma_decode_from_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_from_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_from_vfsPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_from_vfs');
  late final _ma_decode_from_vfs = _ma_decode_from_vfsPtr.asFunction<
      int Function(
          ffi.Pointer<ma_vfs>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_decode_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_file(
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_filePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_file');
  late final _ma_decode_file = _ma_decode_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_decode_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_memory(
      pData,
      dataSize,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_memoryPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_memory');
  late final _ma_decode_memory = _ma_decode_memoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_decoder_init_wav(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_wav(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_wavPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_wav');
  late final _ma_decoder_init_wav = _ma_decoder_init_wavPtr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_flac(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_flac(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_flacPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_flac');
  late final _ma_decoder_init_flac = _ma_decoder_init_flacPtr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_mp3(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_mp3(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_mp3Ptr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_mp3');
  late final _ma_decoder_init_mp3 = _ma_decoder_init_mp3Ptr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vorbis(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vorbis(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vorbisPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vorbis');
  late final _ma_decoder_init_vorbis = _ma_decoder_init_vorbisPtr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_memory_wav(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_wav(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_wavPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory_wav');
  late final _ma_decoder_init_memory_wav =
      _ma_decoder_init_memory_wavPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_memory_flac(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_flac(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_flacPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory_flac');
  late final _ma_decoder_init_memory_flac =
      _ma_decoder_init_memory_flacPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_memory_mp3(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_mp3(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_mp3Ptr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory_mp3');
  late final _ma_decoder_init_memory_mp3 =
      _ma_decoder_init_memory_mp3Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_memory_vorbis(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory_vorbis(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memory_vorbisPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory_vorbis');
  late final _ma_decoder_init_memory_vorbis =
      _ma_decoder_init_memory_vorbisPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_wav(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_wav(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wavPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_wav');
  late final _ma_decoder_init_vfs_wav = _ma_decoder_init_vfs_wavPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_flac(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_flac(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_flacPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_flac');
  late final _ma_decoder_init_vfs_flac =
      _ma_decoder_init_vfs_flacPtr.asFunction<
          int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_mp3(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_mp3(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_mp3Ptr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_mp3');
  late final _ma_decoder_init_vfs_mp3 = _ma_decoder_init_vfs_mp3Ptr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_vorbis(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_vorbis(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_vorbisPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_vorbis');
  late final _ma_decoder_init_vfs_vorbis =
      _ma_decoder_init_vfs_vorbisPtr.asFunction<
          int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_wav_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_wav_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wav_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_wav_w');
  late final _ma_decoder_init_vfs_wav_w =
      _ma_decoder_init_vfs_wav_wPtr.asFunction<
          int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_flac_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_flac_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_flac_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_flac_w');
  late final _ma_decoder_init_vfs_flac_w =
      _ma_decoder_init_vfs_flac_wPtr.asFunction<
          int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_mp3_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_mp3_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_mp3_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_mp3_w');
  late final _ma_decoder_init_vfs_mp3_w =
      _ma_decoder_init_vfs_mp3_wPtr.asFunction<
          int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_vorbis_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_vorbis_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_vorbis_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_vorbis_w');
  late final _ma_decoder_init_vfs_vorbis_w =
      _ma_decoder_init_vfs_vorbis_wPtr.asFunction<
          int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_wav(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_wav(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wavPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_wav');
  late final _ma_decoder_init_file_wav =
      _ma_decoder_init_file_wavPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_flac(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_flac(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_flacPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_flac');
  late final _ma_decoder_init_file_flac =
      _ma_decoder_init_file_flacPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_mp3(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_mp3(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_mp3Ptr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_mp3');
  late final _ma_decoder_init_file_mp3 =
      _ma_decoder_init_file_mp3Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_vorbis(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_vorbis(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_vorbisPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_vorbis');
  late final _ma_decoder_init_file_vorbis =
      _ma_decoder_init_file_vorbisPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_wav_w(
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_wav_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wav_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_wav_w');
  late final _ma_decoder_init_file_wav_w =
      _ma_decoder_init_file_wav_wPtr.asFunction<
          int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_flac_w(
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_flac_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_flac_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_flac_w');
  late final _ma_decoder_init_file_flac_w =
      _ma_decoder_init_file_flac_wPtr.asFunction<
          int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_mp3_w(
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_mp3_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_mp3_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_mp3_w');
  late final _ma_decoder_init_file_mp3_w =
      _ma_decoder_init_file_mp3_wPtr.asFunction<
          int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_vorbis_w(
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_vorbis_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_vorbis_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_vorbis_w');
  late final _ma_decoder_init_file_vorbis_w =
      _ma_decoder_init_file_vorbis_wPtr.asFunction<
          int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>();

  ma_encoder_config ma_encoder_config_init(
    int resourceFormat,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_encoder_config_init(
      resourceFormat,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_encoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_encoder_config Function(ffi.Int32, ffi.Int32, ma_uint32,
              ma_uint32)>>('ma_encoder_config_init');
  late final _ma_encoder_config_init = _ma_encoder_config_initPtr
      .asFunction<ma_encoder_config Function(int, int, int, int)>();

  int ma_encoder_init(
    ma_encoder_write_proc onWrite,
    ma_encoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init(
      onWrite,
      onSeek,
      pUserData,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ma_encoder_write_proc,
              ma_encoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init');
  late final _ma_encoder_init = _ma_encoder_initPtr.asFunction<
      int Function(
          ma_encoder_write_proc,
          ma_encoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  int ma_encoder_init_file(
    ffi.Pointer<ffi.Int8> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_file(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_file');
  late final _ma_encoder_init_file = _ma_encoder_init_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  int ma_encoder_init_file_w(
    ffi.Pointer<wchar_t> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_file_w(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_file_w');
  late final _ma_encoder_init_file_w = _ma_encoder_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  void ma_encoder_uninit(
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_uninit(
      pEncoder,
    );
  }

  late final _ma_encoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_encoder>)>>(
          'ma_encoder_uninit');
  late final _ma_encoder_uninit = _ma_encoder_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_encoder>)>();

  int ma_encoder_write_pcm_frames(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_encoder_write_pcm_frames(
      pEncoder,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_encoder_write_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_encoder>, ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_encoder_write_pcm_frames');
  late final _ma_encoder_write_pcm_frames =
      _ma_encoder_write_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_encoder>, ffi.Pointer<ffi.Void>, int)>();

  ma_waveform_config ma_waveform_config_init(
    int format,
    int channels,
    int sampleRate,
    int type,
    double amplitude,
    double frequency,
  ) {
    return _ma_waveform_config_init(
      format,
      channels,
      sampleRate,
      type,
      amplitude,
      frequency,
    );
  }

  late final _ma_waveform_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_waveform_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Int32, ffi.Double, ffi.Double)>>('ma_waveform_config_init');
  late final _ma_waveform_config_init = _ma_waveform_config_initPtr.asFunction<
      ma_waveform_config Function(int, int, int, int, double, double)>();

  int ma_waveform_init(
    ffi.Pointer<ma_waveform_config> pConfig,
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    return _ma_waveform_init(
      pConfig,
      pWaveform,
    );
  }

  late final _ma_waveform_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_waveform_config>,
              ffi.Pointer<ma_waveform>)>>('ma_waveform_init');
  late final _ma_waveform_init = _ma_waveform_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_waveform_config>, ffi.Pointer<ma_waveform>)>();

  void ma_waveform_uninit(
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    return _ma_waveform_uninit(
      pWaveform,
    );
  }

  late final _ma_waveform_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_waveform>)>>(
          'ma_waveform_uninit');
  late final _ma_waveform_uninit = _ma_waveform_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_waveform>)>();

  int ma_waveform_read_pcm_frames(
    ffi.Pointer<ma_waveform> pWaveform,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    return _ma_waveform_read_pcm_frames(
      pWaveform,
      pFramesOut,
      frameCount,
    );
  }

  late final _ma_waveform_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_waveform>, ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_waveform_read_pcm_frames');
  late final _ma_waveform_read_pcm_frames =
      _ma_waveform_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_waveform>, ffi.Pointer<ffi.Void>, int)>();

  int ma_waveform_seek_to_pcm_frame(
    ffi.Pointer<ma_waveform> pWaveform,
    int frameIndex,
  ) {
    return _ma_waveform_seek_to_pcm_frame(
      pWaveform,
      frameIndex,
    );
  }

  late final _ma_waveform_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_waveform>,
              ma_uint64)>>('ma_waveform_seek_to_pcm_frame');
  late final _ma_waveform_seek_to_pcm_frame = _ma_waveform_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>();

  int ma_waveform_set_amplitude(
    ffi.Pointer<ma_waveform> pWaveform,
    double amplitude,
  ) {
    return _ma_waveform_set_amplitude(
      pWaveform,
      amplitude,
    );
  }

  late final _ma_waveform_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_waveform>,
              ffi.Double)>>('ma_waveform_set_amplitude');
  late final _ma_waveform_set_amplitude = _ma_waveform_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, double)>();

  int ma_waveform_set_frequency(
    ffi.Pointer<ma_waveform> pWaveform,
    double frequency,
  ) {
    return _ma_waveform_set_frequency(
      pWaveform,
      frequency,
    );
  }

  late final _ma_waveform_set_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_waveform>,
              ffi.Double)>>('ma_waveform_set_frequency');
  late final _ma_waveform_set_frequency = _ma_waveform_set_frequencyPtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, double)>();

  int ma_waveform_set_type(
    ffi.Pointer<ma_waveform> pWaveform,
    int type,
  ) {
    return _ma_waveform_set_type(
      pWaveform,
      type,
    );
  }

  late final _ma_waveform_set_typePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_waveform>, ffi.Int32)>>('ma_waveform_set_type');
  late final _ma_waveform_set_type = _ma_waveform_set_typePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>();

  int ma_waveform_set_sample_rate(
    ffi.Pointer<ma_waveform> pWaveform,
    int sampleRate,
  ) {
    return _ma_waveform_set_sample_rate(
      pWaveform,
      sampleRate,
    );
  }

  late final _ma_waveform_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_waveform>,
              ma_uint32)>>('ma_waveform_set_sample_rate');
  late final _ma_waveform_set_sample_rate = _ma_waveform_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>();

  ma_noise_config ma_noise_config_init(
    int format,
    int channels,
    int type,
    int seed,
    double amplitude,
  ) {
    return _ma_noise_config_init(
      format,
      channels,
      type,
      seed,
      amplitude,
    );
  }

  late final _ma_noise_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_noise_config Function(ffi.Int32, ma_uint32, ffi.Int32, ma_int32,
              ffi.Double)>>('ma_noise_config_init');
  late final _ma_noise_config_init = _ma_noise_config_initPtr
      .asFunction<ma_noise_config Function(int, int, int, int, double)>();

  int ma_noise_init(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ma_noise> pNoise,
  ) {
    return _ma_noise_init(
      pConfig,
      pNoise,
    );
  }

  late final _ma_noise_initPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ma_noise>)>>('ma_noise_init');
  late final _ma_noise_init = _ma_noise_initPtr.asFunction<
      int Function(ffi.Pointer<ma_noise_config>, ffi.Pointer<ma_noise>)>();

  void ma_noise_uninit(
    ffi.Pointer<ma_noise> pNoise,
  ) {
    return _ma_noise_uninit(
      pNoise,
    );
  }

  late final _ma_noise_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_noise>)>>(
          'ma_noise_uninit');
  late final _ma_noise_uninit =
      _ma_noise_uninitPtr.asFunction<void Function(ffi.Pointer<ma_noise>)>();

  int ma_noise_read_pcm_frames(
    ffi.Pointer<ma_noise> pNoise,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
  ) {
    return _ma_noise_read_pcm_frames(
      pNoise,
      pFramesOut,
      frameCount,
    );
  }

  late final _ma_noise_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ma_noise>, ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_noise_read_pcm_frames');
  late final _ma_noise_read_pcm_frames =
      _ma_noise_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_noise>, ffi.Pointer<ffi.Void>, int)>();

  int ma_noise_set_amplitude(
    ffi.Pointer<ma_noise> pNoise,
    double amplitude,
  ) {
    return _ma_noise_set_amplitude(
      pNoise,
      amplitude,
    );
  }

  late final _ma_noise_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_noise>, ffi.Double)>>('ma_noise_set_amplitude');
  late final _ma_noise_set_amplitude = _ma_noise_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, double)>();

  int ma_noise_set_seed(
    ffi.Pointer<ma_noise> pNoise,
    int seed,
  ) {
    return _ma_noise_set_seed(
      pNoise,
      seed,
    );
  }

  late final _ma_noise_set_seedPtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_noise>, ma_int32)>>('ma_noise_set_seed');
  late final _ma_noise_set_seed = _ma_noise_set_seedPtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, int)>();

  int ma_noise_set_type(
    ffi.Pointer<ma_noise> pNoise,
    int type,
  ) {
    return _ma_noise_set_type(
      pNoise,
      type,
    );
  }

  late final _ma_noise_set_typePtr = _lookup<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_noise>, ffi.Int32)>>('ma_noise_set_type');
  late final _ma_noise_set_type = _ma_noise_set_typePtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, int)>();
}

class ma_context extends ffi.Struct {
  external ma_backend_callbacks callbacks;

  @ffi.Int32()
  external int backend;

  external ffi.Pointer<ma_log> pLog;

  external ma_log log;

  external ma_log_proc logCallback;

  @ffi.Int32()
  external int threadPriority;

  @size_t()
  external int threadStackSize;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_allocation_callbacks allocationCallbacks;

  external ma_mutex deviceEnumLock;

  external ma_mutex deviceInfoLock;

  @ma_uint32()
  external int deviceInfoCapacity;

  @ma_uint32()
  external int playbackDeviceInfoCount;

  @ma_uint32()
  external int captureDeviceInfoCount;

  external ffi.Pointer<ma_device_info> pDeviceInfos;
}

class ma_backend_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_backend_callbacks>)>> onContextInit;

  external ffi.Pointer<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_context>)>>
      onContextUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>> onContextEnumerateDevices;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_context>,
              ffi.Int32,
              ffi.Pointer<ma_device_id>,
              ffi.Pointer<ma_device_info>)>> onContextGetDeviceInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_device>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device_descriptor>,
              ffi.Pointer<ma_device_descriptor>)>> onDeviceInit;

  external ffi.Pointer<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>
      onDeviceUninit;

  external ffi.Pointer<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>
      onDeviceStart;

  external ffi.Pointer<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>
      onDeviceStop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Void>,
              ma_uint32, ffi.Pointer<ma_uint32>)>> onDeviceRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Void>,
              ma_uint32, ffi.Pointer<ma_uint32>)>> onDeviceWrite;

  external ffi.Pointer<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>
      onDeviceDataLoop;

  external ffi.Pointer<
          ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_device>)>>
      onDeviceDataLoopWakeup;
}

typedef ma_result = ffi.Int32;

class ma_context_config extends ffi.Struct {
  external ma_log_proc logCallback;

  external ffi.Pointer<ma_log> pLog;

  @ffi.Int32()
  external int threadPriority;

  @size_t()
  external int threadStackSize;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_allocation_callbacks allocationCallbacks;

  external UnnamedStruct12 alsa;

  external UnnamedStruct13 pulse;

  external UnnamedStruct14 coreaudio;

  external UnnamedStruct15 jack;

  external ma_backend_callbacks custom;
}

typedef ma_log_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ma_context>, ffi.Pointer<ma_device>,
            ma_uint32, ffi.Pointer<ffi.Int8>)>>;

class ma_device extends ffi.Struct {
  external ffi.Pointer<ma_context> pContext;

  @ffi.Int32()
  external int type;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int state;

  external ma_device_callback_proc onData;

  external ma_stop_proc onStop;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_mutex startStopLock;

  external ma_event wakeupEvent;

  external ma_event startEvent;

  external ma_event stopEvent;

  external ma_thread thread;

  @ma_result()
  external int workResult;

  @ma_bool8()
  external int isOwnerOfContext;

  @ma_bool8()
  external int noPreZeroedOutputBuffer;

  @ma_bool8()
  external int noClip;

  @ffi.Float()
  external double masterVolumeFactor;

  external ma_duplex_rb duplexRB;

  external UnnamedStruct1 resampling;

  external UnnamedStruct4 playback;

  external UnnamedStruct11 capture;
}

abstract class ma_device_type {
  static const int ma_device_type_playback = 1;
  static const int ma_device_type_capture = 2;
  static const int ma_device_type_duplex = 3;
  static const int ma_device_type_loopback = 4;
}

typedef ma_uint32 = ffi.Uint32;
typedef ma_device_callback_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ma_uint32)>>;
typedef ma_stop_proc = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_device>)>>;
typedef ma_mutex = ma_handle;
typedef ma_handle = ffi.Pointer<ffi.Void>;
typedef ma_event = ma_handle;
typedef ma_thread = ma_handle;
typedef ma_bool8 = ma_uint8;
typedef ma_uint8 = ffi.Uint8;

class ma_duplex_rb extends ffi.Struct {
  external ma_pcm_rb rb;
}

class ma_pcm_rb extends ffi.Struct {
  external ma_rb rb;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;
}

/// Ring Buffer
class ma_rb extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pBuffer;

  @ma_uint32()
  external int subbufferSizeInBytes;

  @ma_uint32()
  external int subbufferCount;

  @ma_uint32()
  external int subbufferStrideInBytes;

  @ma_uint32()
  external int encodedReadOffset;

  @ma_uint32()
  external int encodedWriteOffset;

  @ma_bool8()
  external int ownsBuffer;

  @ma_bool8()
  external int clearOnWriteAcquire;

  external ma_allocation_callbacks allocationCallbacks;
}

class ma_allocation_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(size_t, ffi.Pointer<ffi.Void>)>>
      onMalloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<ffi.Void>)>> onRealloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      onFree;
}

typedef size_t = ffi.Uint64;

abstract class ma_format {
  static const int ma_format_unknown = 0;
  static const int ma_format_u8 = 1;
  static const int ma_format_s16 = 2;
  static const int ma_format_s24 = 3;
  static const int ma_format_s32 = 4;
  static const int ma_format_f32 = 5;
  static const int ma_format_count = 6;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external UnnamedStruct2 linear;

  external UnnamedStruct3 speex;
}

abstract class ma_resample_algorithm {
  static const int ma_resample_algorithm_linear = 0;
  static const int ma_resample_algorithm_speex = 1;
}

class UnnamedStruct2 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class UnnamedStruct4 extends ffi.Struct {
  external ma_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> name;

  @ffi.Int32()
  external int shareMode;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int internalFormat;

  @ma_uint32()
  external int internalChannels;

  @ma_uint32()
  external int internalSampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()
  external int internalPeriodSizeInFrames;

  @ma_uint32()
  external int internalPeriods;

  @ffi.Int32()
  external int channelMixMode;

  external ma_data_converter converter;
}

class ma_device_id extends ffi.Union {
  @ffi.Array.multi([64])
  external ffi.Array<wchar_t> wasapi;

  @ffi.Array.multi([16])
  external ffi.Array<ma_uint8> dsound;

  @ma_uint32()
  external int winmm;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> alsa;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> pulse;

  @ffi.Int32()
  external int jack;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> coreaudio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> sndio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> audio4;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> oss;

  @ma_int32()
  external int aaudio;

  @ma_uint32()
  external int opensl;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> webaudio;

  external UnnamedUnion1 custom;

  @ffi.Int32()
  external int nullbackend;
}

typedef wchar_t = ffi.Uint16;
typedef ma_int32 = ffi.Int32;

class UnnamedUnion1 extends ffi.Union {
  @ffi.Int32()
  external int i;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> s;

  external ffi.Pointer<ffi.Void> p;
}

abstract class ma_share_mode {
  static const int ma_share_mode_shared = 0;
  static const int ma_share_mode_exclusive = 1;
}

typedef ma_channel = ma_uint8;

abstract class ma_channel_mix_mode {
  static const int ma_channel_mix_mode_rectangular = 0;
  static const int ma_channel_mix_mode_simple = 1;
  static const int ma_channel_mix_mode_custom_weights = 2;
  static const int ma_channel_mix_mode_planar_blend = 0;
  static const int ma_channel_mix_mode_default = 0;
}

class ma_data_converter extends ffi.Struct {
  external ma_data_converter_config config;

  external ma_channel_converter channelConverter;

  external ma_resampler resampler;

  @ma_bool8()
  external int hasPreFormatConversion;

  @ma_bool8()
  external int hasPostFormatConversion;

  @ma_bool8()
  external int hasChannelConverter;

  @ma_bool8()
  external int hasResampler;

  @ma_bool8()
  external int isPassthrough;
}

/// Data Conversion
class ma_data_converter_config extends ffi.Struct {
  @ffi.Int32()
  external int formatIn;

  @ffi.Int32()
  external int formatOut;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMapIn;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMapOut;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Float>> channelWeights;

  external UnnamedStruct5 resampling;
}

abstract class ma_dither_mode {
  static const int ma_dither_mode_none = 0;
  static const int ma_dither_mode_rectangle = 1;
  static const int ma_dither_mode_triangle = 2;
}

class UnnamedStruct5 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  @ma_bool32()
  external int allowDynamicSampleRate;

  external UnnamedStruct6 linear;

  external UnnamedStruct7 speex;
}

typedef ma_bool32 = ma_uint32;

class UnnamedStruct6 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class ma_channel_converter extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMapIn;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMapOut;

  @ffi.Int32()
  external int mixingMode;

  external UnnamedUnion2 weights;

  @ma_bool8()
  external int isPassthrough;

  @ma_bool8()
  external int isSimpleShuffle;

  @ma_bool8()
  external int isSimpleMonoExpansion;

  @ma_bool8()
  external int isStereoToMono;

  @ffi.Array.multi([32])
  external ffi.Array<ma_uint8> shuffleTable;
}

class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Float>> f32;

  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ma_int32>> s16;
}

class ma_resampler extends ffi.Struct {
  external ma_resampler_config config;

  external UnnamedUnion3 state;
}

class ma_resampler_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ffi.Int32()
  external int algorithm;

  external UnnamedStruct8 linear;

  external UnnamedStruct9 speex;
}

class UnnamedStruct8 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

class UnnamedStruct9 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class UnnamedUnion3 extends ffi.Union {
  external ma_linear_resampler linear;

  external UnnamedStruct10 speex;
}

class ma_linear_resampler extends ffi.Struct {
  external ma_linear_resampler_config config;

  @ma_uint32()
  external int inAdvanceInt;

  @ma_uint32()
  external int inAdvanceFrac;

  @ma_uint32()
  external int inTimeInt;

  @ma_uint32()
  external int inTimeFrac;

  external UnnamedUnion4 x0;

  external UnnamedUnion5 x1;

  external ma_lpf lpf;
}

/// Resampling
class ma_linear_resampler_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ma_uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

class UnnamedUnion4 extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Float> f32;

  @ffi.Array.multi([32])
  external ffi.Array<ma_int16> s16;
}

typedef ma_int16 = ffi.Int16;

class UnnamedUnion5 extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Float> f32;

  @ffi.Array.multi([32])
  external ffi.Array<ma_int16> s16;
}

class ma_lpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int lpf1Count;

  @ma_uint32()
  external int lpf2Count;

  @ffi.Array.multi([1])
  external ffi.Array<ma_lpf1> lpf1;

  @ffi.Array.multi([4])
  external ffi.Array<ma_lpf2> lpf2;
}

class ma_lpf1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient a;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r1;
}

/// Biquad Filtering
class ma_biquad_coefficient extends ffi.Union {
  @ffi.Float()
  external double f32;

  @ma_int32()
  external int s32;
}

class ma_lpf2 extends ffi.Struct {
  external ma_biquad bq;
}

class ma_biquad extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient b0;

  external ma_biquad_coefficient b1;

  external ma_biquad_coefficient b2;

  external ma_biquad_coefficient a1;

  external ma_biquad_coefficient a2;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r1;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r2;
}

class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pSpeexResamplerState;
}

class UnnamedStruct11 extends ffi.Struct {
  external ma_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> name;

  @ffi.Int32()
  external int shareMode;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int internalFormat;

  @ma_uint32()
  external int internalChannels;

  @ma_uint32()
  external int internalSampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()
  external int internalPeriodSizeInFrames;

  @ma_uint32()
  external int internalPeriods;

  @ffi.Int32()
  external int channelMixMode;

  external ma_data_converter converter;
}

class ma_log extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ma_log_callback> callbacks;

  @ma_uint32()
  external int callbackCount;

  external ma_allocation_callbacks allocationCallbacks;

  external ma_mutex lock;
}

class ma_log_callback extends ffi.Struct {
  external ma_log_callback_proc onLog;

  external ffi.Pointer<ffi.Void> pUserData;
}

typedef ma_log_callback_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ma_uint32, ffi.Pointer<ffi.Int8>)>>;

abstract class ma_thread_priority {
  static const int ma_thread_priority_idle = -5;
  static const int ma_thread_priority_lowest = -4;
  static const int ma_thread_priority_low = -3;
  static const int ma_thread_priority_normal = -2;
  static const int ma_thread_priority_high = -1;
  static const int ma_thread_priority_highest = 0;
  static const int ma_thread_priority_realtime = 1;
  static const int ma_thread_priority_default = 0;
}

class UnnamedStruct12 extends ffi.Struct {
  @ma_bool32()
  external int useVerboseDeviceEnumeration;
}

class UnnamedStruct13 extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> pApplicationName;

  external ffi.Pointer<ffi.Int8> pServerName;

  @ma_bool32()
  external int tryAutoSpawn;
}

class UnnamedStruct14 extends ffi.Struct {
  @ffi.Int32()
  external int sessionCategory;

  @ma_uint32()
  external int sessionCategoryOptions;

  @ma_bool32()
  external int noAudioSessionActivate;

  @ma_bool32()
  external int noAudioSessionDeactivate;
}

abstract class ma_ios_session_category {
  static const int ma_ios_session_category_default = 0;
  static const int ma_ios_session_category_none = 1;
  static const int ma_ios_session_category_ambient = 2;
  static const int ma_ios_session_category_solo_ambient = 3;
  static const int ma_ios_session_category_playback = 4;
  static const int ma_ios_session_category_record = 5;
  static const int ma_ios_session_category_play_and_record = 6;
  static const int ma_ios_session_category_multi_route = 7;
}

class UnnamedStruct15 extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> pClientName;

  @ma_bool32()
  external int tryStartServer;
}

typedef ma_enum_devices_callback_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_bool32 Function(ffi.Pointer<ma_context>, ffi.Int32,
            ffi.Pointer<ma_device_info>, ffi.Pointer<ffi.Void>)>>;

class ma_device_info extends ffi.Struct {
  external ma_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> name;

  @ma_bool32()
  external int isDefault;

  @ma_uint32()
  external int formatCount;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int32> formats;

  @ma_uint32()
  external int minChannels;

  @ma_uint32()
  external int maxChannels;

  @ma_uint32()
  external int minSampleRate;

  @ma_uint32()
  external int maxSampleRate;

  @ma_uint32()
  external int nativeDataFormatCount;

  @ffi.Array.multi([64])
  external ffi.Array<UnnamedStruct16> nativeDataFormats;
}

class UnnamedStruct16 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int flags;
}

class ma_device_config extends ffi.Struct {
  @ffi.Int32()
  external int deviceType;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int periodSizeInFrames;

  @ma_uint32()
  external int periodSizeInMilliseconds;

  @ma_uint32()
  external int periods;

  @ffi.Int32()
  external int performanceProfile;

  @ma_bool8()
  external int noPreZeroedOutputBuffer;

  @ma_bool8()
  external int noClip;

  external ma_device_callback_proc dataCallback;

  external ma_stop_proc stopCallback;

  external ffi.Pointer<ffi.Void> pUserData;

  external UnnamedStruct17 resampling;

  external UnnamedStruct20 playback;

  external UnnamedStruct21 capture;

  external UnnamedStruct22 wasapi;

  external UnnamedStruct23 alsa;

  external UnnamedStruct24 pulse;

  external UnnamedStruct25 coreaudio;

  external UnnamedStruct26 opensl;

  external UnnamedStruct27 aaudio;
}

abstract class ma_performance_profile {
  static const int ma_performance_profile_low_latency = 0;
  static const int ma_performance_profile_conservative = 1;
}

class UnnamedStruct17 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external UnnamedStruct18 linear;

  external UnnamedStruct19 speex;
}

class UnnamedStruct18 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

class UnnamedStruct19 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class UnnamedStruct20 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int shareMode;
}

class UnnamedStruct21 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int shareMode;
}

class UnnamedStruct22 extends ffi.Struct {
  @ma_bool8()
  external int noAutoConvertSRC;

  @ma_bool8()
  external int noDefaultQualitySRC;

  @ma_bool8()
  external int noAutoStreamRouting;

  @ma_bool8()
  external int noHardwareOffloading;
}

class UnnamedStruct23 extends ffi.Struct {
  @ma_bool32()
  external int noMMap;

  @ma_bool32()
  external int noAutoFormat;

  @ma_bool32()
  external int noAutoChannels;

  @ma_bool32()
  external int noAutoResample;
}

class UnnamedStruct24 extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> pStreamNamePlayback;

  external ffi.Pointer<ffi.Int8> pStreamNameCapture;
}

class UnnamedStruct25 extends ffi.Struct {
  @ma_bool32()
  external int allowNominalSampleRateChange;
}

class UnnamedStruct26 extends ffi.Struct {
  @ffi.Int32()
  external int streamType;

  @ffi.Int32()
  external int recordingPreset;
}

abstract class ma_opensl_stream_type {
  static const int ma_opensl_stream_type_default = 0;
  static const int ma_opensl_stream_type_voice = 1;
  static const int ma_opensl_stream_type_system = 2;
  static const int ma_opensl_stream_type_ring = 3;
  static const int ma_opensl_stream_type_media = 4;
  static const int ma_opensl_stream_type_alarm = 5;
  static const int ma_opensl_stream_type_notification = 6;
}

abstract class ma_opensl_recording_preset {
  static const int ma_opensl_recording_preset_default = 0;
  static const int ma_opensl_recording_preset_generic = 1;
  static const int ma_opensl_recording_preset_camcorder = 2;
  static const int ma_opensl_recording_preset_voice_recognition = 3;
  static const int ma_opensl_recording_preset_voice_communication = 4;
  static const int ma_opensl_recording_preset_voice_unprocessed = 5;
}

class UnnamedStruct27 extends ffi.Struct {
  @ffi.Int32()
  external int usage;

  @ffi.Int32()
  external int contentType;

  @ffi.Int32()
  external int inputPreset;
}

abstract class ma_aaudio_usage {
  static const int ma_aaudio_usage_default = 0;
  static const int ma_aaudio_usage_announcement = 1;
  static const int ma_aaudio_usage_emergency = 2;
  static const int ma_aaudio_usage_safety = 3;
  static const int ma_aaudio_usage_vehicle_status = 4;
  static const int ma_aaudio_usage_alarm = 5;
  static const int ma_aaudio_usage_assistance_accessibility = 6;
  static const int ma_aaudio_usage_assistance_navigation_guidance = 7;
  static const int ma_aaudio_usage_assistance_sonification = 8;
  static const int ma_aaudio_usage_assitant = 9;
  static const int ma_aaudio_usage_game = 10;
  static const int ma_aaudio_usage_media = 11;
  static const int ma_aaudio_usage_notification = 12;
  static const int ma_aaudio_usage_notification_event = 13;
  static const int ma_aaudio_usage_notification_ringtone = 14;
  static const int ma_aaudio_usage_voice_communication = 15;
  static const int ma_aaudio_usage_voice_communication_signalling = 16;
}

abstract class ma_aaudio_content_type {
  static const int ma_aaudio_content_type_default = 0;
  static const int ma_aaudio_content_type_movie = 1;
  static const int ma_aaudio_content_type_music = 2;
  static const int ma_aaudio_content_type_sonification = 3;
  static const int ma_aaudio_content_type_speech = 4;
}

abstract class ma_aaudio_input_preset {
  static const int ma_aaudio_input_preset_default = 0;
  static const int ma_aaudio_input_preset_generic = 1;
  static const int ma_aaudio_input_preset_camcorder = 2;
  static const int ma_aaudio_input_preset_unprocessed = 3;
  static const int ma_aaudio_input_preset_voice_recognition = 4;
  static const int ma_aaudio_input_preset_voice_communication = 5;
  static const int ma_aaudio_input_preset_voice_performance = 6;
}

class ma_device_descriptor extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()
  external int shareMode;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMap;

  @ma_uint32()
  external int periodSizeInFrames;

  @ma_uint32()
  external int periodSizeInMilliseconds;

  @ma_uint32()
  external int periodCount;
}

abstract class ma_backend {
  static const int ma_backend_wasapi = 0;
  static const int ma_backend_dsound = 1;
  static const int ma_backend_winmm = 2;
  static const int ma_backend_coreaudio = 3;
  static const int ma_backend_sndio = 4;
  static const int ma_backend_audio4 = 5;
  static const int ma_backend_oss = 6;
  static const int ma_backend_pulseaudio = 7;
  static const int ma_backend_alsa = 8;
  static const int ma_backend_jack = 9;
  static const int ma_backend_aaudio = 10;
  static const int ma_backend_opensl = 11;
  static const int ma_backend_webaudio = 12;
  static const int ma_backend_custom = 13;
  static const int ma_backend_null = 14;
}

abstract class ma_stream_format {
  static const int ma_stream_format_pcm = 0;
}

abstract class ma_stream_layout {
  static const int ma_stream_layout_interleaved = 0;
  static const int ma_stream_layout_deinterleaved = 1;
}

abstract class ma_standard_sample_rate {
  static const int ma_standard_sample_rate_48000 = 48000;
  static const int ma_standard_sample_rate_44100 = 44100;
  static const int ma_standard_sample_rate_32000 = 32000;
  static const int ma_standard_sample_rate_24000 = 24000;
  static const int ma_standard_sample_rate_22050 = 22050;
  static const int ma_standard_sample_rate_88200 = 88200;
  static const int ma_standard_sample_rate_96000 = 96000;
  static const int ma_standard_sample_rate_176400 = 176400;
  static const int ma_standard_sample_rate_192000 = 192000;
  static const int ma_standard_sample_rate_16000 = 16000;
  static const int ma_standard_sample_rate_11025 = 11250;
  static const int ma_standard_sample_rate_8000 = 8000;
  static const int ma_standard_sample_rate_352800 = 352800;
  static const int ma_standard_sample_rate_384000 = 384000;
  static const int ma_standard_sample_rate_min = 8000;
  static const int ma_standard_sample_rate_max = 384000;
  static const int ma_standard_sample_rate_count = 14;
}

abstract class ma_standard_channel_map {
  static const int ma_standard_channel_map_microsoft = 0;
  static const int ma_standard_channel_map_alsa = 1;
  static const int ma_standard_channel_map_rfc3551 = 2;
  static const int ma_standard_channel_map_flac = 3;
  static const int ma_standard_channel_map_vorbis = 4;
  static const int ma_standard_channel_map_sound4 = 5;
  static const int ma_standard_channel_map_sndio = 6;
  static const int ma_standard_channel_map_webaudio = 3;
  static const int ma_standard_channel_map_default = 0;
}

class ma_lcg extends ffi.Struct {
  @ma_int32()
  external int state;
}

typedef va_list = ffi.Pointer<ffi.Int8>;

class ma_biquad_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Double()
  external double b0;

  @ffi.Double()
  external double b1;

  @ffi.Double()
  external double b2;

  @ffi.Double()
  external double a0;

  @ffi.Double()
  external double a1;

  @ffi.Double()
  external double a2;
}

typedef ma_uint64 = ffi.Uint64;

/// Low-Pass Filtering
class ma_lpf1_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

/// Low-Pass Filtering
typedef ma_lpf2_config = ma_lpf1_config;

class ma_lpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ma_uint32()
  external int order;
}

/// High-Pass Filtering
class ma_hpf1_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

/// High-Pass Filtering
typedef ma_hpf2_config = ma_hpf1_config;

class ma_hpf1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient a;

  @ffi.Array.multi([32])
  external ffi.Array<ma_biquad_coefficient> r1;
}

class ma_hpf2 extends ffi.Struct {
  external ma_biquad bq;
}

class ma_hpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ma_uint32()
  external int order;
}

class ma_hpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int hpf1Count;

  @ma_uint32()
  external int hpf2Count;

  @ffi.Array.multi([1])
  external ffi.Array<ma_hpf1> hpf1;

  @ffi.Array.multi([4])
  external ffi.Array<ma_hpf2> hpf2;
}

/// Band-Pass Filtering
class ma_bpf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

class ma_bpf2 extends ffi.Struct {
  external ma_biquad bq;
}

class ma_bpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ma_uint32()
  external int order;
}

class ma_bpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int bpf2Count;

  @ffi.Array.multi([4])
  external ffi.Array<ma_bpf2> bpf2;
}

/// Notching Filter
class ma_notch2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

class ma_notch2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Peaking EQ Filter
class ma_peak2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

class ma_peak2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Low Shelf Filter
class ma_loshelf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

class ma_loshelf2 extends ffi.Struct {
  external ma_biquad bq;
}

/// High Shelf Filter
class ma_hishelf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

class ma_hishelf2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Channel Conversion
class ma_channel_converter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMapIn;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMapOut;

  @ffi.Int32()
  external int mixingMode;

  @ffi.Array.multi([32, 32])
  external ffi.Array<ffi.Array<ffi.Float>> weights;
}

class ma_IMMNotificationClient extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpVtbl;

  @ma_uint32()
  external int counter;

  external ffi.Pointer<ma_device> pDevice;
}

abstract class ma_ios_session_category_option {
  static const int ma_ios_session_category_option_mix_with_others = 1;
  static const int ma_ios_session_category_option_duck_others = 2;
  static const int ma_ios_session_category_option_allow_bluetooth = 4;
  static const int ma_ios_session_category_option_default_to_speaker = 8;
  static const int
      ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others =
      17;
  static const int ma_ios_session_category_option_allow_bluetooth_a2dp = 32;
  static const int ma_ios_session_category_option_allow_air_play = 64;
}

class ma_timer extends ffi.Union {
  @ma_int64()
  external int counter;

  @ffi.Double()
  external double counterD;
}

typedef ma_int64 = ffi.Int64;

class ma_context_command__wasapi extends ffi.Struct {
  @ffi.Int32()
  external int code;

  external ffi.Pointer<ma_event> pEvent;

  external UnnamedUnion6 data;
}

class UnnamedUnion6 extends ffi.Union {
  external UnnamedStruct28 quit;

  external UnnamedStruct29 createAudioClient;

  external UnnamedStruct30 releaseAudioClient;
}

class UnnamedStruct28 extends ffi.Struct {
  @ffi.Int32()
  external int _unused;
}

class UnnamedStruct29 extends ffi.Struct {
  @ffi.Int32()
  external int deviceType;

  external ffi.Pointer<ffi.Void> pAudioClient;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> ppAudioClientService;

  external ffi.Pointer<ma_result> pResult;
}

class UnnamedStruct30 extends ffi.Struct {
  external ffi.Pointer<ma_device> pDevice;

  @ffi.Int32()
  external int deviceType;
}

typedef ma_spinlock = ma_uint32;

class ma_data_source_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Pointer<ma_uint64>)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_source>, ma_uint64)>> onSeek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>> onMap;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_data_source>, ma_uint64)>> onUnmap;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>> onGetDataFormat;

  external ffi.Pointer<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>
      onGetCursor;

  external ffi.Pointer<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>
      onGetLength;
}

typedef ma_data_source = ffi.Void;

class ma_data_source_config extends ffi.Struct {
  external ffi.Pointer<ma_data_source_vtable> vtable;
}

class ma_data_source_base extends ffi.Struct {
  external ma_data_source_callbacks cb;

  external ffi.Pointer<ma_data_source_vtable> vtable;

  @ma_uint64()
  external int rangeBegInFrames;

  @ma_uint64()
  external int rangeEndInFrames;

  @ma_uint64()
  external int loopBegInFrames;

  @ma_uint64()
  external int loopEndInFrames;

  external ffi.Pointer<ma_data_source> pCurrent;

  external ffi.Pointer<ma_data_source> pNext;

  external ma_data_source_get_next_proc onGetNext;
}

typedef ma_data_source_callbacks = ma_data_source_vtable;
typedef ma_data_source_get_next_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ma_data_source> Function(ffi.Pointer<ma_data_source>)>>;

class ma_audio_buffer_ref extends ffi.Struct {
  external ma_data_source_base ds;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint64()
  external int cursor;

  @ma_uint64()
  external int sizeInFrames;

  external ffi.Pointer<ffi.Void> pData;
}

class ma_audio_buffer_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint64()
  external int sizeInFrames;

  external ffi.Pointer<ffi.Void> pData;

  external ma_allocation_callbacks allocationCallbacks;
}

class ma_audio_buffer extends ffi.Struct {
  external ma_audio_buffer_ref ref;

  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool32()
  external int ownsData;

  @ffi.Array.multi([1])
  external ffi.Array<ma_uint8> _pExtraData;
}

abstract class ma_seek_origin {
  static const int ma_seek_origin_start = 0;
  static const int ma_seek_origin_current = 1;
  static const int ma_seek_origin_end = 2;
}

class ma_file_info extends ffi.Struct {
  @ma_uint64()
  external int sizeInBytes;
}

class ma_vfs_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Int8>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>> onOpen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ffi.Pointer<wchar_t>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>> onOpenW;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ma_vfs_file)>> onClose;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<size_t>)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ffi.Void>, size_t, ffi.Pointer<size_t>)>> onWrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>, ma_vfs_file, ma_int64, ffi.Int32)>> onSeek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_int64>)>> onTell;

  external ffi.Pointer<
          ffi.NativeFunction<
              ma_result Function(
                  ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_file_info>)>>
      onInfo;
}

/// VFS
/// ===
///
/// The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely
/// appropriate for a given situation.
typedef ma_vfs = ffi.Void;
typedef ma_vfs_file = ma_handle;

class ma_default_vfs extends ffi.Struct {
  external ma_vfs_callbacks cb;

  external ma_allocation_callbacks allocationCallbacks;
}

abstract class ma_resource_format {
  static const int ma_resource_format_wav = 0;
}

abstract class ma_encoding_format {
  static const int ma_encoding_format_unknown = 0;
  static const int ma_encoding_format_wav = 1;
  static const int ma_encoding_format_flac = 2;
  static const int ma_encoding_format_mp3 = 3;
  static const int ma_encoding_format_vorbis = 4;
}

class ma_decoder extends ffi.Struct {
  external ma_data_source_base ds;

  external ffi.Pointer<ma_data_source> pBackend;

  external ffi.Pointer<ma_decoding_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external ma_decoder_read_proc onRead;

  external ma_decoder_seek_proc onSeek;

  external ma_decoder_tell_proc onTell;

  external ffi.Pointer<ffi.Void> pUserData;

  @ma_uint64()
  external int readPointerInPCMFrames;

  @ffi.Int32()
  external int outputFormat;

  @ma_uint32()
  external int outputChannels;

  @ma_uint32()
  external int outputSampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> outputChannelMap;

  external ma_data_converter converter;

  external ma_allocation_callbacks allocationCallbacks;

  external UnnamedUnion7 data;
}

class ma_decoding_backend_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              ma_read_proc,
              ma_seek_proc,
              ma_tell_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoding_backend_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ffi.Pointer<ma_data_source>>)>> onInit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ma_decoding_backend_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ffi.Pointer<ma_data_source>>)>> onInitFile;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ma_decoding_backend_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ffi.Pointer<ma_data_source>>)>> onInitFileW;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ma_decoding_backend_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ffi.Pointer<ma_data_source>>)>> onInitMemory;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_allocation_callbacks>)>> onUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_result Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_channel>, size_t)>> onGetChannelMap;
}

typedef ma_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_result Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t,
            ffi.Pointer<size_t>)>>;
typedef ma_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_result Function(ffi.Pointer<ffi.Void>, ma_int64, ffi.Int32)>>;
typedef ma_tell_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_result Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ma_int64>)>>;

class ma_decoding_backend_config extends ffi.Struct {
  @ffi.Int32()
  external int preferredFormat;
}

typedef ma_decoder_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        size_t Function(
            ffi.Pointer<ma_decoder>, ffi.Pointer<ffi.Void>, size_t)>>;
typedef ma_decoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_bool32 Function(ffi.Pointer<ma_decoder>, ma_int64, ffi.Int32)>>;
typedef ma_decoder_tell_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_result Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_int64>)>>;

class UnnamedUnion7 extends ffi.Union {
  external UnnamedStruct31 vfs;

  external UnnamedStruct32 memory;
}

class UnnamedStruct31 extends ffi.Struct {
  external ffi.Pointer<ma_vfs> pVFS;

  external ma_vfs_file file;
}

class UnnamedStruct32 extends ffi.Struct {
  external ffi.Pointer<ma_uint8> pData;

  @size_t()
  external int dataSize;

  @size_t()
  external int currentReadPos;
}

class ma_decoder_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Array.multi([32])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int ditherMode;

  external UnnamedStruct33 resampling;

  external ma_allocation_callbacks allocationCallbacks;

  @ffi.Int32()
  external int encodingFormat;

  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomBackendVTables;

  @ma_uint32()
  external int customBackendCount;

  external ffi.Pointer<ffi.Void> pCustomBackendUserData;
}

class UnnamedStruct33 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external UnnamedStruct34 linear;

  external UnnamedStruct35 speex;
}

class UnnamedStruct34 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

class UnnamedStruct35 extends ffi.Struct {
  @ffi.Int32()
  external int quality;
}

class ma_encoder extends ffi.Struct {
  external ma_encoder_config config;

  external ma_encoder_write_proc onWrite;

  external ma_encoder_seek_proc onSeek;

  external ma_encoder_init_proc onInit;

  external ma_encoder_uninit_proc onUninit;

  external ma_encoder_write_pcm_frames_proc onWritePCMFrames;

  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<ffi.Void> pInternalEncoder;

  external ffi.Pointer<ffi.Void> pFile;
}

class ma_encoder_config extends ffi.Struct {
  @ffi.Int32()
  external int resourceFormat;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  external ma_allocation_callbacks allocationCallbacks;
}

typedef ma_encoder_write_proc = ffi.Pointer<
    ffi.NativeFunction<
        size_t Function(
            ffi.Pointer<ma_encoder>, ffi.Pointer<ffi.Void>, size_t)>>;
typedef ma_encoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_bool32 Function(ffi.Pointer<ma_encoder>, ffi.Int32, ffi.Int32)>>;
typedef ma_encoder_init_proc = ffi
    .Pointer<ffi.NativeFunction<ma_result Function(ffi.Pointer<ma_encoder>)>>;
typedef ma_encoder_uninit_proc = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_encoder>)>>;
typedef ma_encoder_write_pcm_frames_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_uint64 Function(
            ffi.Pointer<ma_encoder>, ffi.Pointer<ffi.Void>, ma_uint64)>>;

abstract class ma_waveform_type {
  static const int ma_waveform_type_sine = 0;
  static const int ma_waveform_type_square = 1;
  static const int ma_waveform_type_triangle = 2;
  static const int ma_waveform_type_sawtooth = 3;
}

class ma_waveform_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Int32()
  external int type;

  @ffi.Double()
  external double amplitude;

  @ffi.Double()
  external double frequency;
}

class ma_waveform extends ffi.Struct {
  external ma_data_source_base ds;

  external ma_waveform_config config;

  @ffi.Double()
  external double advance;

  @ffi.Double()
  external double time;
}

abstract class ma_noise_type {
  static const int ma_noise_type_white = 0;
  static const int ma_noise_type_pink = 1;
  static const int ma_noise_type_brownian = 2;
}

class ma_noise_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Int32()
  external int type;

  @ma_int32()
  external int seed;

  @ffi.Double()
  external double amplitude;

  @ma_bool32()
  external int duplicateChannels;
}

class ma_noise extends ffi.Struct {
  external ma_data_source_vtable ds;

  external ma_noise_config config;

  external ma_lcg lcg;

  external UnnamedUnion8 state;
}

class UnnamedUnion8 extends ffi.Union {
  external UnnamedStruct36 pink;

  external UnnamedStruct37 brownian;
}

class UnnamedStruct36 extends ffi.Struct {
  @ffi.Array.multi([32, 16])
  external ffi.Array<ffi.Array<ffi.Double>> bin;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Double> accumulation;

  @ffi.Array.multi([32])
  external ffi.Array<ma_uint32> counter;
}

class UnnamedStruct37 extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Double> accumulation;
}

const int MA_VERSION_MAJOR = 0;

const int MA_VERSION_MINOR = 10;

const int MA_VERSION_REVISION = 37;

const String MA_VERSION_STRING = '0.10.37';

const int MA_TRUE = 1;

const int MA_FALSE = 0;

const int MA_SIZE_MAX = 4294967295;

const int MA_SIMD_ALIGNMENT = 64;

const int MA_LOG_LEVEL_DEBUG = 4;

const int MA_LOG_LEVEL_INFO = 3;

const int MA_LOG_LEVEL_WARNING = 2;

const int MA_LOG_LEVEL_ERROR = 1;

const int MA_LOG_LEVEL_VERBOSE = 4;

const int MA_LOG_LEVEL = 1;

const int MA_CHANNEL_NONE = 0;

const int MA_CHANNEL_MONO = 1;

const int MA_CHANNEL_FRONT_LEFT = 2;

const int MA_CHANNEL_FRONT_RIGHT = 3;

const int MA_CHANNEL_FRONT_CENTER = 4;

const int MA_CHANNEL_LFE = 5;

const int MA_CHANNEL_BACK_LEFT = 6;

const int MA_CHANNEL_BACK_RIGHT = 7;

const int MA_CHANNEL_FRONT_LEFT_CENTER = 8;

const int MA_CHANNEL_FRONT_RIGHT_CENTER = 9;

const int MA_CHANNEL_BACK_CENTER = 10;

const int MA_CHANNEL_SIDE_LEFT = 11;

const int MA_CHANNEL_SIDE_RIGHT = 12;

const int MA_CHANNEL_TOP_CENTER = 13;

const int MA_CHANNEL_TOP_FRONT_LEFT = 14;

const int MA_CHANNEL_TOP_FRONT_CENTER = 15;

const int MA_CHANNEL_TOP_FRONT_RIGHT = 16;

const int MA_CHANNEL_TOP_BACK_LEFT = 17;

const int MA_CHANNEL_TOP_BACK_CENTER = 18;

const int MA_CHANNEL_TOP_BACK_RIGHT = 19;

const int MA_CHANNEL_AUX_0 = 20;

const int MA_CHANNEL_AUX_1 = 21;

const int MA_CHANNEL_AUX_2 = 22;

const int MA_CHANNEL_AUX_3 = 23;

const int MA_CHANNEL_AUX_4 = 24;

const int MA_CHANNEL_AUX_5 = 25;

const int MA_CHANNEL_AUX_6 = 26;

const int MA_CHANNEL_AUX_7 = 27;

const int MA_CHANNEL_AUX_8 = 28;

const int MA_CHANNEL_AUX_9 = 29;

const int MA_CHANNEL_AUX_10 = 30;

const int MA_CHANNEL_AUX_11 = 31;

const int MA_CHANNEL_AUX_12 = 32;

const int MA_CHANNEL_AUX_13 = 33;

const int MA_CHANNEL_AUX_14 = 34;

const int MA_CHANNEL_AUX_15 = 35;

const int MA_CHANNEL_AUX_16 = 36;

const int MA_CHANNEL_AUX_17 = 37;

const int MA_CHANNEL_AUX_18 = 38;

const int MA_CHANNEL_AUX_19 = 39;

const int MA_CHANNEL_AUX_20 = 40;

const int MA_CHANNEL_AUX_21 = 41;

const int MA_CHANNEL_AUX_22 = 42;

const int MA_CHANNEL_AUX_23 = 43;

const int MA_CHANNEL_AUX_24 = 44;

const int MA_CHANNEL_AUX_25 = 45;

const int MA_CHANNEL_AUX_26 = 46;

const int MA_CHANNEL_AUX_27 = 47;

const int MA_CHANNEL_AUX_28 = 48;

const int MA_CHANNEL_AUX_29 = 49;

const int MA_CHANNEL_AUX_30 = 50;

const int MA_CHANNEL_AUX_31 = 51;

const int MA_CHANNEL_LEFT = 2;

const int MA_CHANNEL_RIGHT = 3;

const int MA_CHANNEL_POSITION_COUNT = 52;

const int MA_SUCCESS = 0;

const int MA_ERROR = -1;

const int MA_INVALID_ARGS = -2;

const int MA_INVALID_OPERATION = -3;

const int MA_OUT_OF_MEMORY = -4;

const int MA_OUT_OF_RANGE = -5;

const int MA_ACCESS_DENIED = -6;

const int MA_DOES_NOT_EXIST = -7;

const int MA_ALREADY_EXISTS = -8;

const int MA_TOO_MANY_OPEN_FILES = -9;

const int MA_INVALID_FILE = -10;

const int MA_TOO_BIG = -11;

const int MA_PATH_TOO_LONG = -12;

const int MA_NAME_TOO_LONG = -13;

const int MA_NOT_DIRECTORY = -14;

const int MA_IS_DIRECTORY = -15;

const int MA_DIRECTORY_NOT_EMPTY = -16;

const int MA_AT_END = -17;

const int MA_NO_SPACE = -18;

const int MA_BUSY = -19;

const int MA_IO_ERROR = -20;

const int MA_INTERRUPT = -21;

const int MA_UNAVAILABLE = -22;

const int MA_ALREADY_IN_USE = -23;

const int MA_BAD_ADDRESS = -24;

const int MA_BAD_SEEK = -25;

const int MA_BAD_PIPE = -26;

const int MA_DEADLOCK = -27;

const int MA_TOO_MANY_LINKS = -28;

const int MA_NOT_IMPLEMENTED = -29;

const int MA_NO_MESSAGE = -30;

const int MA_BAD_MESSAGE = -31;

const int MA_NO_DATA_AVAILABLE = -32;

const int MA_INVALID_DATA = -33;

const int MA_TIMEOUT = -34;

const int MA_NO_NETWORK = -35;

const int MA_NOT_UNIQUE = -36;

const int MA_NOT_SOCKET = -37;

const int MA_NO_ADDRESS = -38;

const int MA_BAD_PROTOCOL = -39;

const int MA_PROTOCOL_UNAVAILABLE = -40;

const int MA_PROTOCOL_NOT_SUPPORTED = -41;

const int MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;

const int MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;

const int MA_SOCKET_NOT_SUPPORTED = -44;

const int MA_CONNECTION_RESET = -45;

const int MA_ALREADY_CONNECTED = -46;

const int MA_NOT_CONNECTED = -47;

const int MA_CONNECTION_REFUSED = -48;

const int MA_NO_HOST = -49;

const int MA_IN_PROGRESS = -50;

const int MA_CANCELLED = -51;

const int MA_MEMORY_ALREADY_MAPPED = -52;

const int MA_FORMAT_NOT_SUPPORTED = -100;

const int MA_DEVICE_TYPE_NOT_SUPPORTED = -101;

const int MA_SHARE_MODE_NOT_SUPPORTED = -102;

const int MA_NO_BACKEND = -103;

const int MA_NO_DEVICE = -104;

const int MA_API_NOT_FOUND = -105;

const int MA_INVALID_DEVICE_CONFIG = -106;

const int MA_LOOP = -107;

const int MA_DEVICE_NOT_INITIALIZED = -200;

const int MA_DEVICE_ALREADY_INITIALIZED = -201;

const int MA_DEVICE_NOT_STARTED = -202;

const int MA_DEVICE_NOT_STOPPED = -203;

const int MA_FAILED_TO_INIT_BACKEND = -300;

const int MA_FAILED_TO_OPEN_BACKEND_DEVICE = -301;

const int MA_FAILED_TO_START_BACKEND_DEVICE = -302;

const int MA_FAILED_TO_STOP_BACKEND_DEVICE = -303;

const int MA_MIN_CHANNELS = 1;

const int MA_MAX_CHANNELS = 32;

const int MA_MAX_FILTER_ORDER = 8;

const int MA_MIN_SAMPLE_RATE = 8000;

const int MA_MAX_SAMPLE_RATE = 384000;

const int MA_MAX_LOG_CALLBACKS = 4;

const int MA_CHANNEL_INDEX_NULL = 255;

const int MA_STATE_UNINITIALIZED = 0;

const int MA_STATE_STOPPED = 1;

const int MA_STATE_STARTED = 2;

const int MA_STATE_STARTING = 3;

const int MA_STATE_STOPPING = 4;

const int MA_BACKEND_COUNT = 15;

const int MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE = 2;

const int MA_OPEN_MODE_READ = 1;

const int MA_OPEN_MODE_WRITE = 2;
